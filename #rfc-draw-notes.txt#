Notes on rfc-draw.py

killall snap-store  # to fix "snap has no updates available"


1646, Sat  1 Oct 2022 (NZDT)

Got rect-mouse-click.py (saved as -00 version) to the point where
 - left mouse button to draw a rectangle
 - right button down near top-left corner to move the rectangle

Now want to stop rectangle moving too far towards edge of window  ...
  drag-example uses self._drag_data = {"x": 0, "y": 0, "item": None}
    to track an item being moved
  uses tags = ("token",)  for each token created (by token() and token1()

  then
    self._drag_data["item"] = self.canvas.find_closest(event.x, event.y)[0]
    rect = self.canvas.bbox(self._drag_data["item"])

    self.canvas.addtag_enclosed("drag", *rect)
    print(rect)
    self.canvas.move("drag", delta_x, delta_y)

>>> look up find_closest(), bbox() and addtag_enclosed()

1417, Sun  2 Oct 2022 (NZDT)

rect-mouse-click-00.py implements
  B1 to draw rectangles
  B3 to move a rectangle

rect-mouse-click-01 adds near_corner() and near_edge()
  but it only allows B3 to move the last-created rectangle!

rect-mouse-click-02 tried to add dragging from drag-example -
  that didn't go well, sigh

1654, Mon  3 Oct 2022 (NZDT)

cp rect-mouse-click.py rect-mouse-click-00.py
  This version creates rectangles from b1-down to b1-up,
  allows you to draw a sequence of rectangles
Now we want to be able to resize one (by dragging an edge),
and to move them (by dragging inside one)

# https://bytes.com/topic/python/answers/22538-canvas-rectangle-there-easy-way-detect-if-youre-inside
x = cv.canvasx( event.x )
y = cv.canvasy( event.y )
cvid = cv.find_closest( x, y )[0]
cv.itemconfig( cvid, fill = 'black' )

1536, Tue  4 Oct 2022 (NZDT)

Need now:
 - buttons to say "working on rect/arrow/..." 
   and "save" text enetered into message display, remember last file used
 - use find-closest, using tags for current widget type
 - drag edge to resize
 - drag away from edge to movr

1257, Wed  5 Oct 2022 (NZDT)

Can now draw one rectangle, then use bbox() to get it's coords
>>> but then we don't start to draw a new rectangle on b1-click <<<

Need to use distance from current rectangle to decide either
   - start a new rectangle, or
   - click near corner -> reswize current rectangle
           near edge -> move rect horizontaly or verticaly

1714, Wed  5 Oct 2022 (NZDT)

OK, we can draw a rectangle, and get the region we clicked in :-)
  but now we need to start a new rectangle when we're too_far away
OK, that works, and dragging the lr corner expands the rectangle
Now dragging at all four corners works properly,
  need to make dragging the sides work now

1722, Thu  6 Oct 2022 (NZDT)

Now can draw seveal rectangles, and move them by dragging in middle :-)
  Saved as rect-mouse-click-01.py

Oh, Oh, clicking on an already-drawn rectangle resets x0,y0 *and* x1,y1
  for that rectangle <<<<<<<<<<<<<<<<<<

1750, Fri  7 Oct 2022 (NZDT)

Now have rect-mouse-click-02.py, it uses self.c_rect[self.rect_nbr]
  to keep track of the current rectangle.


1516, Sun  9 Oct 2022 (NZDT)

Canvas items aren't actually objects; the integer ID is all you get. 
  You do things with them by calling methods on the Canvas itself,
  passing these IDs as parameters.

got rect-mouse-click-03.py to draw several rectangles properly,
  BUT dragging a corner doesn't work properly,
  even for the first rectangle, sigh.

1233, Mon 10 Oct 2022 (NZDT)

Got rect-mouse-click-04.py working properly, now it can
 - draw several rectangles (b1-click, drag to size)
 - move edges or corners in or out, keeping them 3 px away from drawing edges
 - move rectangle by dragging middle, at least 3 px away from drawing edge

To do now:
 1 Allow root window to be resized, keeping part below drawing intact
 2 Add buttons (Rectangle, Arrow, Text, Save) in lower oart of window
 3 Implement Save - write list of rectangles and coords to drawing-00.txt
 4 Write drawing-to-svg and drawing-to-asciiart programs
 5 Impmement Text
 6 Implement Arrows 
     multiline sections, simple arrowhead in middle of each section

1304, Tue 11 Oct 2022 (NZDT)

Copied rect-mouse-click-04.py to draw_rect_class
Changed rfc-draw.py to use draw_rect_class
Now to start on to-do list :-)

1733, Fri 14 Oct 2022 (NZDT)

Started on item 1; reached point where root.resizable() sort-of worked,
  but event.x and even.y were only correct for sizes *inside* the original
Found a code snippet that does work, saved in simple-resize.py
  Managed to use that in rfc-draw :-)

1637, Sat 15 Oct 2022 (NZDT)

Worked on making a radio-button.  Lots of hassle with forward declaration!
  Got buttons-simple.py to work as expected, now need to put it into a Class

1720: OK r_buttons_class.py works too.  Now need to signal 'button x pressed"
      cp r_buttons_class.py r_buttons_class-00.py   <<< original

Started on event-example.py . . .

1735, Sun 16 Oct 2022 (NZDT)

r_buttons_class.py now works properly.  It now has a place() function,
   and the on_pressed function works properly too :-)


1747, Mon 17 Oct 2022 (NZDT)

Got resize-main-window work properly, for drawing, r_buttons and message

Started playing with tkinter Entry, which inputs text from the keyboard.
Sample program: Entry-demo.py

cp draw_rect_class.py text_entry_class.py
Started tweaking text_enter_class, but that will need some careful planning!

1740, Wed 19 Oct 2022 (NZDT)

Made text-widget.py, gets inpuT in a Text box, ESC key to grab that input,
  but when we move cursor and open a new TEXT, it leaves the whole 
  input-size box on screen
Maybe we need to change the Text to a Label - 
  propbably better to get the Text from below the screen,
    then display it as a Label on-screen ???
  That would be OK for a single line, can Labels have multiple lines?

1626, Thu 20 Oct 2022 (NZDT)

Got text-widget.py to use a Text in the message area, then press ESC 
to put that text inside a rectangle.  Save that as text-widget-00.py

Managed to put the text centred horizontally inside the rectangle, 
saved that as text-widget-01.py

1737, Mon, 24 Oct 2022 (NZDT)

Made rect+text.py, that makes a Frame (lightsteelblue) with a Text (cornsilk)
inside it.  Both are in t_canvas.drawing; that seems better than having
the Text in t_canvas, as we did in text-widget.py.

Also decided that trying to centre the text is a waste of time,
let the user do that so as to get exactly what she wants :-)

1739, Tue 25 Oct 2022 (NZDT)

Found (in Nevil's 17 RFCs) two with likely diagrams, from RTFM and IPFIX

Tidied up rect+text.py  a little 
  Mmaybe it's worth trying again to centre lines in the Text?

No, it's not - tried using TkFixedFont and DejaVu Mono, but couldn't
get font.measure to work as expected.  Gave up on this :-(

Need to think some more about how draw lines, 
and to place text near a line (i.e. not in a box)

Also need to allow user to click on text, and edit it in place <<<

1246, Fri 28 Oct 2022 (NZDT)

Made draw_text_class.py, this creates a cornsilk Text from b1_click to 
b1_motion.  Now need to be able to 
 - click on the Text so as get it's content
 - drag it to new location

1705, Sat 29 Oct 2022 (NZDT)

Copied draw_text_class.py to draw_text_class-01.py
-01 makes a new Text box on b1_click(), 
  clicking B1 on an already-drawn Text lets you change the text in it <<<

find-objects.py shows how to get type of closest object,
  need to do click and drag on a Text (as for Rectangles!)

1736, Sun 30 Oct 2022 (NZDT)

Copied draw_text_class.py to draw_text_class-02.py
This version lets you click B3 to find nearest Text :-)
  Reworked rect_draw.where to become text_draw.where

Now need to use b1 for this, and find_nearest_text() instead of find_closest()

1718, Tue  1 Nov 2022 (NZDT)

Got find_nearest_tex() to work properly, new Texts always created by new_text().
But now
 - b1_click in middle of Text isn't picked up
 - b1_click on corners or edges allows you to resize the Text area
     but it *assumes* you're dragging the x1,y1 corner  <<<
 - b1_click inside Text allows you to set Text contents <<<

Maybe we should use a Frame, rather than a Text ...
 - could resize and move it, carrying any contained widgets within it
Copied draw_text_class.py to draw_text_class-03.py

Hmm, Frame lets you draw it, set colour, relief and bd (borderwidth).
  Also lets you click near it, but not inside it,
  and you can't drag edges or corners to resize it

1740, Wed  2 Nov 2022 (NZDT)

Discovered that if you bind B1 to a Canvas, you can see clicks anywhere in it.
If you then add a Text rectangle in the Canvas, clicks inside the Text
  don't also come up in the Canvas.
However, if you bind B1 to the Text (as well as the Canvas) you can see
  clicks anywhere (Text as well as Canvas)  :-)

1532, Thu  3 Nov 2022 (NZDT)

Reworked test_n_b1.py, it now has
  one Frame (bg "cornsilk")
  one rectangle (bg "lightsteelblue")
  one line  (fill "red")

  click on/near rectangle -> Clicked canvas:  48 49 .!canvas
                                 closest (1,) (<class 'tuple'>)
  click on/near line      -> Clicked canvas:  407 186 .!canvas
  			         closest (2,) (<class 'tuple'>)

  click on/near Frame     -> Clicked canvas:  25 30 .!canvas.!frame
                                 closest (1,) (<class 'tuple'>)

  clicking elsewhere (white background) gives type .!canvas
  
  So, Frame isn't an object, find_closest_object() doesn't work nicely
  Ditto for Type

Maybe we could use a rectangle (with width 0) to contain a Text ???
Problem is that Text dodesn't work with find_closest_object()

1750, Sat  5 Nov 2022 (NZDT)

Worked on n_frame_test.py, trying to find a way to sit a Text (editable)
inside a rectangle created by create_rectangle().
Can get rectangle's coords and place a Text there - maybe try that next ...

1747, Sun  6 Nov 2022 (NZDT)

Hmm, no progress.  Need to create a new widget, a Frame with a Text
inside it (an n_Rect).  Probably need to use tags so that both Text 
and Frame can be resized as one.

1631, Mon  7 Nov 2022 (NZDT)

Got n_rect_test to draw rectangles in self.drawing, so that on_b1_click 
(using self.drawing.find_closest) does find the nearest rectangle :-)

Can also place Text inside a rectangle, but b1_click there puts it into
text-editing mode.  Need to find out how to not do that, and invent good
way to get into/out of text-edit mode.

bind Insert key to Text.configure(state='normal')
bind ESC to  Text.configure(state='disabled')
  
Done, now how to detect b1_click inside disabled Text

https://stackoverflow.com/questions/40940397/tkinter-text-widget-use-clicked-text-in-event-function

No, need to make create_rect, so that                 rect state:
 - always detect clicks inside a rect                (Rect normal)
 - only put Text into rect following Insert keypress (Rect text_modify)
 - take it out again following Escape keypress       (Rect normal)

1526, Tue  8 Nov 2022 (NZDT)

Ah, clicking in the palegreen border of a rectangle (outside it's 
  enclosed Text) *is* picked up as expected
Ah again, can't bind to a Frame; TypeError: 'Frame' object is not callable

n_frame_test now has make_n_rect(), which makes a Canvas with a rectangle in it.
It uses **kwargs; width= and tags= work fine, but fill= doesn't !?

1033, Wed  9 Nov 2022 (NZDT)

Tried puting a Label into an n_rect.
  OK, provided we self.label.bind_class('Label', ..)
Now make a second window when we click on a Label
  Need to get Label text and make a Text in the second window
OK, managed to get n_frame_test editing labels nicely,
  save copy as n_frame_test-00.py

Made n_frame_class.py from n_frame_test.py
  This behaves as above, but works on drawing in the root window
  (i.e. it's a proper python class :-)

Reworked rfc-draw.py to use class n_frame, now need to position
  label_window to rignt of main window :-)

1222, Thu 10 Nov 2022 (NZDT)

Text Edit window - make same size as on drawing (so user can see how text fits)
  - B for no border on text rectangle (may need to do that in drawing window)
Not possible to do that. Instead need to resize n_rect to take new (edited)
  text.  Will have to do that in n_frame.
Also need to be able to resize and move n_rects.
  1. Don't need text_entry_class (trc) any more
  2. Need to use the text editing stuff in n_frame_class in draw_rect_class

n_frame_class uses b1_click to start editing the rect's Label (text),
    and ESC when that's finished
draw_rect_class uses b1_click and b1_motion to draw, resize and move rectangles;
    it doesn't let you put text onto a rectangle
>>> Draw_rect could use b3_click to start editing text
    or use 'Text' button to switch modes ???
>>> Also need a way to blank out rect's frame around text

1620, Fri 11 Nov (NZDT)

Got nfc.n_frame working properly in rfc-draw.py
Tried to resize n_rect on ESC hwile editing Label frame, failed.
  Better to let user resize as needed
Now need to use Rect/Text buttons to switch between modes

Got draw_rect_class.py close to working.
  Can draw n_rects, move them and resize them :-)
Now, in rfc-draw.py
  When we click on drawing, we get a new rect with label "no text yet"
    however, we can move and resize that one 

1210, Sat 12 Nov (NZDT)

Drawing, resizing and moving rectangle works properly in rect mode.
Got Delete key to delete current rect when not in text mode.

1746, Sun 13 Nov (NZDT)

Can now press Save to write to sys.argv[1] file
Have drc.read_from_rdd started, 
  need to use drc functions to re-create the objects

python special characters:
    \n - Newline         linux EOL
    \t - Horizontal tab
    \v - Vertical tab
    \r - Carriage return
    \b - Backspace
    \f - Form feed
    \\ - Backslash

    \'- Single Quote
    \"- double quote
    \N - N is the number for Unicode character
    \NNN - NNN is digits for Octal value
    \xNN - NN is a hex value; \x is used to denote following is a hex value.
    \a - bell sound, actually default chime

1700, Tue 15 Nov (NZDT)

drc_tool.read_from_rdd() reads .rdd file and displays rects correctly,
  drawing a new rect then clicking Save r_button save all objects in drawing;
  closing the root window does the same :-)

Now to get Text into rects . . .
  in draw_rect_class, changed read_rdd() to get "text" for each rect
  now get
  File "rfc-draw.py", line 95, in on_closing
    drc_tool.save_to_rdd(save_file_name)
  File "/home/nevil/rfc-draw/draw_rect_class.py", line 285, in save_to_rdd
    text = self.drawing.get_text(obj_id)   #  "rect 0"
AttributeError: 'Canvas' object has no attribute 'get_text'

1555, Wed 17 Nov 2022 (NZDT)

n_frame_class.py  is the code that edits Text in a rectangle
Got that to put Label centred in rect, but can't trap clicks 
  on the rect's inner Canvas or Label

1150, Fri 18 Nov 2022 (NZDT)

Made class n_rect in draw_rect_class, to contain tags, coords and text.
Will need changes to draw- and move- an n_rect !!!

1753, Tue 22 Nov 2022 (NZDT)

Started reworking things so that self.nro (in draw_rect_class)
  is the base class for n_rect objects
Now have to work through which variables need to move from draw_class.self
  inro draw_class.self.nro . . .

1419, Wed 23 Nov 2022 (NZDT)

Added test code to n_rect_class.py, that moves an n_rect about on screen :-)

Can now move n_rect (rectangle and text) around on screen, but
  we do get the right region (so on_b1_motion() get's that right)
  but it always gets moved bodily (region 8)

Ah, where assumes that position (x0,y0, x1,y1) are all in draw_rect.self !!!

Looking at self.drawing.find_closest(item), for an n_rect, 
that finds it's rectangle or it's text
Added code to work that out, now we have two dictionaries,
  self.nro_by_rect_id and nro_by_text_id
We can use them to get the nro corresponding to an object id :-)

1054, Fri 25 Nov 2022 (NZDT)

Sorted out problems with Resize/Drag an n_rect, that all works proply now :-)
Added delete() to n_rect class, so Delete key deletes an n_rect

Now: click on text to edit it (in n_rect_class)

Hmm, n_frame_test.py binds both Label and Canvas to on_b1, that works!

1427, Sun 27 Nov 2022 (NZDT)

Started again on draw_text_class (saving yesterday's version as old_draw_text..)

1736, Mon 28 Nov 2022 (NZDT)

Realised that position (x,y) for a Label is it's top-left corner.
Wrote font-sizing to get font metrics from tkinter.font,
  used them in on_b1_click_t() to place text so that mx,my is (roughly)
  at the text's centre.
Now odd things happen when we move the label about with on_b1_motion_t() %^&*
  (we're not making a new label then, need to work on find_nearest_text() ?

1736, Tue 29 Nov 2022 (NZDT)

Aha, bind_class('Label'..) gives mouse coords **inside** the label !!!!
But ... bind('<Button ..) only detects clicks on canvas (not on a label), sigh.

So:
  item_type !label -> find the label, 
  "event.widget is reference to widget that was clicked on and 
    triggered the function"
  for me, event.widgets are Label, Label1, Label2 ... (but check this!)

1725, Wed 30 Nov 2022 (NZDT)

To retrieve the text from an item with object ID I on a canvas C, 
  call C.itemcget(I, 'text').
To replace the text in an item with object ID I on a canvas C
  with the text from a string S, call C.itemconfig(I, text=S). 
To move a text object: canvas.move(text_id, 10, 0)   #  for x += 10

1542, Sun  4 Dec 2022 (NZDT)

First create_text() object id is 1 !!!
Got create, move and delete to work for c_text objects :-)
Also got B3 (edit) to work on the clicked text,

1639, Tue  6 Dec 2022 (NZDT)

Worked out how to get a mono-spaced font
draw_text_class edit (with justify) works properly,   <<< text_mode
    can create aand move a new and an edited label, and 
  Delete key deletes selected text :-)

Now need draw_rect_class to also use create_text objects instead of Labels,
  and to use Include key to move text as well as surrounding rectangle

Ah, need to read through n_rect_class.py,             <<< rect_mode
  change it to use create_text() objects instead of Labels
Also need to work out how to use Include key to move text into an n_rect

1702, Wed  7 Dec 2022 (NZDT)

Worked on draw_rect_class and n_rect_class
draw_rect works as expected when recovering rectangle 
  with '+' string from test.rdd
but allowing n_rect to create a rect causes problems
  need to compare how these two creation methods work (and differ!)

Need to try draw_text and draw_rect simultaneously,
  using r-buttons to switch modes

1645, Thu  8 Dec 2022 (NZDT)

Made draw_objects_class.py from draw_text_class.py
Worked on rfc-draw (to get r_buttons_handler to work properly
  it now sets draw_objects_class.mode to "rect"|"text"|"line" :-)

1737, Fri  9 Dec 2022 (NZDT)

Got buttons to set objects properly, text mode works now.
Started on using n_rect objects (nros) for rectangles with centred text,
  needs more work.
Should we just use nros for free texts and lines too?

1735, Sat 10 Dec 2022 (NZDT)

Decided to use object (item) ids as key for objects {}
In draw_objects_class, got text objects close to working properly,
  but we don't always pick up the object we click on ?? !!

1518, Mon 12 Dec 2022 (NZDT)

Got Texts to work properly (create, move edit)
Also got Rects to work properly (create, resize, move)

1656, Tue 13 Dec 2022 (NZDT)

Reworked get_nro, it's now maily a lookup of self.objects
Now in rect mode, we can click to create/move/resize/drag an n_rect
    in text mode we can create/edit a new text object,
                and can edit (B3) the text inside an n_rect :-)
Oops, creating new text objects doesn't increment the 
  integer in --0-- properly ???
Doesn't save to an .rdd file
  File "rfc-draw.py", line 98, in on_closing
    doc_tool.save_to_rdd(save_file_name)
  File "/home/nevil/rfc-draw/draw_objects_class.py", line 455, in save_to_rdd
    text = self.drawing.get_text(obj_id)   #  "rect 0"
  AttributeError: 'Canvas' object has no attribute 'get_text'

1739, Thu 15 Dec 2022 (NZDT)

On saving to .rdd
will save drawing
save_to_rdd, 2 objects
object %s is not a text!

1737, Sat 17 Dec 2022 (NZDT)

Can now save simple drawing (just one n_rect, with three-line text, 
  and no other objects), but now we get hassles restoring it on startup :-(

1146, Sun 18 Dec 2022 (NZDT)

Sorted out yestrday's save/restore problems.
  and got the new text stringe to use self.n_objects (i.e. --1--, --2--, ...)
Now, new things:
 - Save root window geometry in save-file.rdd, restore on startup; 'geometry'
      >>> Done, 22 Dec
      Also save font name, height and width (in pixels); 'font-info'
        Start from font-sizing.py!
        Oh, oh, can't get font metrics from strings like "TkFixedFont 10"
        Using font.Font.metrics, get line-space 17, width 7
      >>> Done, 22 Dec
 - Implement line mode:
      var = w.create_line(0, 0, 100, 100)  # draw the line
      w.coords(var, 0, 0, 75, 25)  # change it's coordinates
    * Will need to check lines start and end on rectangle(s),
         don't cross other rectangles (don't need to check this?)
         and only make 90-degree (and maybe 45-degree) turns

1718, Thu 22 Dec (NZDT)

Implemented changes to .rdd file (noted above).
Now we have problems when we try to move an n_rect ...

1032, Fri 23 Dec 2022 (NZDT)

Fixed most of the above problems.
Now we seem to have problems with where(mx,my) finding it's 
surrounding rectangle, sigh

1651, Thu 29 Dec 2022 (NZDT)

Worked on getting save_file_name from message area;
  how do we wait until after ESC has been pressed?

1152, Fri 30 Dec 2022 (NZDT)

Save button now waits for save file name edited/entered in Message window,
  using tkinter wait_variable(), then writes current objects to save file
Clicking near an n_rect:
  close to (or on the) border works as expected, 
  but near the text gets it as closest!

Made closest(mx,xy) -> item_ix, obj  (entry from objects)
  Use on_delete_key to delete a text (ok), 
  and an n_rect (only deletes rect obj, leaves it's text in place) ?????

1748, Sat 31 Dec 2022 (NZDT)

Added class object(obj, type), modified closest() to use that.
Tested in rect mode by drawing in n_rect, then clicking just below it;
  lots of problems!

1728, Sun  1 Jan 2023 (NZDT)

Sorted out some of the problems, now we can create an n_rect, 
  resize and move it.
However, B3 click on it's text doesn't work properly <<<

1739, Mon  2 Jan 2023 (NZDT)

Trying to tidy up use of class object, get_object() and dump_objects()
Situation confused; drawing two n_rects thinks only the last is there ???

1750, Tue  3 Jan 2023 (NZDT)

Distracted myself by trying to add function into r_buttons class
to restore previous button state.  Failed :-(

Need to read up on calling functions inside a class, sigh

1752, Wed  4 Jan 2023 (NZDT)

Reworked r_buttons_class to allow call of a class function from outside
  the class, test code in __main__ of r_buttons_class.py

reworked rfc-draw to store previous button/mode and restore it after
  'save' pressed.
Works (i.e. restores previoius button/mode), but doesn't use filename
  from message area, sigh

1107, Thu  5 Jan 2023 (NZDT)    Frances tests positive for Covid :-(

Sorted out above Save problem, we now get the 
  Save filename and save to it correctly
Also can resize and drag an n_rect properly,
  and can edit text inside n_rec :-)

Problems with creating an n_rect.
Added on_b1_release() to save last state of whatever we're drawing.
Need to work through xxx.yyy to see what's happening, sigh

1751, Fri  6 Jan 2023 (NZDT)

new_n_rect makes 2 objects entries, both Object, "n_rect" and "text"

but by the time on_b1_release() is called, 
  objects[key 2] has a second copy of objects[key 1]  ???

1714, Sat  7 Jan 2023 (NZDT)

Realised that b1_click, motion and release must all operate on
  the actual draw_objects object, which is at
  self.objects[self.current_object_key]
Still working through the consequences of that !

1102, Sun  8 Jan 2023 (NZDT)

test-references.py shows that making a copy of a dict member,
then changing an object inside that copy, does change the dict member.
So 7 Jan comment is wrong, sigh

1752, Mon  9 Jan 2023 (NZDT)

Reworked n_rect_class.py to initialise properly, by moving the
  create_rectangle() code into __init__
That allows calls on an n_rect objects functions to work properly :-)

1251, Tue 10 Jan 2023 (NZDT)

Got draw_objects_class to work properly using new n_rect_class.py.
Can draw a second (new) rectangle, but crashes trying to save new drawing.

Sorted out those problems, now for n_line_class.py
Test program draw_line looks promising, can draw the line in b1_motion -
  however, to do that, we have to delete the old line before each
  new motion dx,dy..  Oh well, we have to do that, sigh

1701, Wed 11 Jan 2023 (NZDT)

Now have draw_line using rect_mode to draw up, down, left or right.
Use find_closest to find nearest line, then
  test if near an end, and set add_to_line
Need add_to_line() function !

1657, Thu 12 Jan 2023 (NZDT)

Made new version of draw_line.py, lots of problems debugging it :-(
Now have it drawing one line as expected, but drawing a second line has it
  starting at same point as first, and not enforcing 90 degree orientation!

1705, Sat 14 Jan 2023 (NZDT)

draw_line getting clearer!  We now make line_id to begin a new line,
old_line is the existing line, motion concatenates mx,my to it,
then sets coords of old_line to redraw it.
Alas, it doesn't actually work properly yet, sigh :-(

1146, Sun 15 Jan 2023 (NZDT)

Sorted out yesterdays problems, all working.  However, starting a line
  in the middle of an existing segment adds it to old_line ???
Need to use "click near middle of line" to move that line ...

1648, same day:
  Implemented near_line, returns n = -1 = not near line, n >= 0 near segment n.
  Click at end of line now works for start -or- end of line.
  Can probably turn of motion printout, just rely on release

Now need to decide how editing lines should work, e,g:
  click b1 near either end of line -> add segment to line
	b1 in a segment -> shift segment r/l/up/down (i.e. edit line)
	b1 at junction of two segments -> move whole line

1118, Mon 16 Jan 2023 (NZDT)

Started big rework of draw_line; now have functions near_line() and near_end().
Drawing two horizontal lines: first one works OK, second has starting grade
  before setting direction, then OK <<<

1645, same day:

Everything works now, ##print statements commented out
Can detect all three click points as listed above, 
  now need to implement tjose actions :-(

ls -1 | grep _line_  # list directory entries with _line_

1747, Tue 17 Jan 2023 (NZDT)

cp draw_objects_class.py draw_lines_class.py
Edited draw_lines_class.py to make draw_line globals draw_lines class variables
Saved copy of draw_objects rdd file (cp save-file.rdd save-file-three.rdd)

1737, Wed 18 Jan 2023 (NZDT)

Finished yesterday's editing, draw_lines_class now behaves just 
like draw_lines.py  Now need to 
  - Implement move when clicking on a junctio
  - Create an Object wnen a line is created, put it self.objects table
  - update save/restore rdds to handle line objects

1726, Thu 19 Jan 2023 (NZDT)

Created object_utilities.py, it's a class as described above
rfc-draw globals are in the rdglob class, use them as rdg.variable_name

1613, Fri 20 Jan 2023 (NZDT)  >> N&F's 65th wedding anniversary <<

Got draw_lines to work in rfc-draw (sorted out use of rdg. vs self.)
  Making an rdg, an rdglob object, binds b1 event handlers to ln_b1 routines,
    and that all works as expected :-)

Need to get button handlers to switch between line and n_rect handlers @@@
  and to tidy up code in object_utilities.py
Also rework draw_objects class to use object_utilities.py

1638, Sat 21 Jan 2023 (NZDT)

Changed order of buttons to Rect | Line | Text | Save
CHanged draw_objects_class.py to draw_n_rects_class.py
Added set_event_handlers() to draw_ n_rects, lines and texts

draw_lines lets you add a segment at the end of the current line,
  but not to the beginning of the current line !!!

Worked on draw_n_rects_class.py to make it use object_utilities -
  it crashes attempting to initialise an rdglob object !! ??

1404, Sun 22 Jan 2023 (NZDT)

From https://tkinter-docs.readthedocs.io/en/latest/widgets/canvas.html

find_closest(x, y, halo=None, start=None)

    Returns the closest visible item to the point given by x and y. If 
more than one item is at the same closest distance (e.g. two items overlap 
the point), then the top-most of these items (the last one in the display 
list) will be returned.

    If halo is specified, then it must be a non-negative length. 
Any item closer than halo to the point is considered to overlap it. 
All items overlapping the halo are treated as if they have a distance 
of 0 from the given point.

    If start is specified, it names an item using a tag or id (if by 
tag, it selects the bottom / first item in the display list with the 
given tag). Instead of returning the topmost closest item, this will 
return the topmost closest item that is below start in the display list; 
if no such item exists, then it will behave as if the start argument 
had not been specified. This will only have an effect if halo is given.

>>> NOT CLEAR how to use 'start' parameter
    Need to make a test program to look at this -
    or maybe do that when we have draw_lines and draw_n_rects classes working

1621, Sun 22 Jan 2023 (NZDT)

Worked out how to use rdg as a class variable in rfc_draw_globals_class.
In draw_n_rect_class;
  Moved n_rect-specific variables into n_rect_class,
    along with functions like where()
  Realised we need to use self.rdg in the draw_* classes
  Now we have draw_n_rects_class working properly again in rfc-draw :-)

Need to do the same with draw_lines and draw_texts

1637, Mon 23 Jan 2023 (NZDT)

Reworked closest() in rfc_draw_globals_class,
  moved class object to be an inner class of class rdglob
Now draw_n_rects_class works properly

Hmm, draw_n_rects has code for mode = "text" in it !!!

Also, draw_n_rects now uses rdg.closest(), so although clicking near the
  n_rects edges allows you to move it as expected, clicking on the text
    just tells you "you clicked on a text, not a rectangle"
  However, at least it's rdg.object has in_rect True, should we just ignore it?
  We should probably search the objects dict to find it's enclosing n_rect,
    and allow you to move that!

1554, Tue, 24 Jan 2023 (NZDT)

Moved 'b3 to edit text' into rfc_draw_globals_class
   Also removed it from draw_lines, draw_n_rects and draw_texts
   Note that text window uses Home and End to position cursor,
     that's why we use Esc to end editing!
   Also do the same for the main window's message area
     Save to edited-text.rdd works properly :-)

Delete key handler could also be in rfc_draw_globals_class ??

draw_n_rects_class.py has self.mode, and uses it to switch between 
  rect, text and line.  We want to use the buttons to do that <<<<<<<<<
  Have done that for rect (needs tidying up); now do text and line!

1508, Wed 25 Jab 2023 (NZDT)

Moved Delete key into rdglob, rather than in draw_* modules
However, problems with difference between tkinter object id's and objects keys!

1616, Thu 26 Jan 2023 (NZDT)

Moved on_delete_key() out of rdglob, now have it in each of the draw_* classes
Moved n_rect class into rdglob
Checked that save_to and restore_from rdd still work properly; they do
Recovered on_closing() for rfc-draw.py from (archived) 30 Dec 2022 version!

To do:
 - add on_delete_key() to lines and texts classes
 - get draw_lines_class working again, implement move (whole or part of line)
 - get draw_texts_class to work

1707, Fri 27 Jan 2023 (NZDT)

Worked on texts_class:
  Use rdg.centre_texts to say we do (or don't) want the text centred
  That doesn't help, in edit_esc_key() we use itemconfigure(self.text_id,
    to put the new text back, but that puts it centred on the cursor position
  We need to do something different . . .
    create_text(x,y,"actual text") - x,y is the centre of the displayed text!
    need to move the text half it's width sideways ???

1723, Sat 28 Jan 2023 (NZDT)

Sorted out positioning of edited text; move the text left by len(line)/2
  Now set centre_texts in draw_n_rects, and nowhere else
Checked that we can save/restore edited texts properly
Started work on draw_lines:  line variables are now in draw_lines,
  but we haven't got picking up an existing line vs 
  starting a new line to work properly

1531, Sun 29 Jab 2023 (NZDT)

Worked on draw_lines.  Now have it mostly working, but not yet 
  making correct decision about the b1_click's position in the line, sigh

1729, Mon 30 Jan 2023 (NZDT)  Auckland Anniversary Day

Worked on draw_line.py, getting it to draw arrows in line segments.
At 1729 it draws arrows on right-going and left-going lines,
  but the arrow only appears on the last line drawn!
It doesn't draw arrows on up-going or down-going lines :-)

1637, Tue 31 Jan 2023 (NZDT)

Sorted out arrow drawing in a single segment (in draw_lines.py)
Moved arrow-drawing code into draw_lines_class.py
  Drawing a right-going or up-going arrow works,
  but left_going or down_going draw right or up arrows ???
  Drawing an up-going segment after a right-going one 
    draws the line, but	not it's arrow ???

1656, Wed  1 Feb 2023 (NZDT)

Arrows being drawn properly now :-)
Second down segment joins properly to first right segment,
  but need to draw arrows on all segments <<<
self.ln_dir set: up False, down True, left False, right False
old_line = [117.0, 112.0, 336.0, 112.0]
new line = [117.0, 112.0, 336.0, 112.0, 334, 131]

1654, Thu  2 Feb 2023 (NZDT)

Added class a_line to draw_lines_class.py,
  it should (!) be able to draw a multi-segment line, with direction arrows!
  Not clear that it's doing that just yet!
To do:
   b1_click on an existing line should move it around on drawing <---

1722, Fri  3 Feb 2023 (NZDT)

Made test-re-draw.py to remind myself how to draw/move a line
    self.line = [self.sx,self.sy, self.sx+3,self.sy+3]  # Start new line
    self.line_id = self.drawing.create_line(self.line)  # Draw it first
then
    mx, my = (event.x, event.y)  # Mouse position
    self.line = [self.sx,self.sy, mx,my]
    self.drawing.coords(self.line_id, self.line)  # Change line's coords

Need a_line to re-draw the whole line (after adding a new segment) <<<

1639, Sat  4 Feb 2023 (NZDT)

Now have a single line drawn with arrows going l,r, u or d,
  can now add an arrowed segment at the end of a line,
  and a third, and a fourth :-)
However, saving that 4-sgment arrowed-line drawing works properly,
but reading it in again doesn't draw the arrows !!!

1551, Mon  5 Feb 2023 (NZDT)

Moved class a_line out of draw_lines_class.py, into arrow_lines_class.py
Changed rfc-draw.py to import a_line into both rdg and draw_lines
Reworked restore_line() (in rdg) to use a_line
We now restore arrowed lines properly, and can create new lines :-)

rfc-draw now uses
  rfc_draw_globals_class.py, r_buttons_class.py, arrow_lines_class.py, 
  draw_n_rects_class.py, draw_texts_class.py, draw_lines_class.py

Now to make draw_lines move an existing line ...
  Added self.mode to rdg, use it in draw_n_rects nr_b1_click() to print 
    "==> error message" if not in 'rect' mode

  Started on a_line.move() function in a_line class
  Looks as though "moving a line" is different to "drawing a line" !!!!!

  Now have self.ln_mode in draw_lines_class,
  a_line.move_line() is being called, but isn't moving the existing line <<<

1632, Tue  7 Feb 2023 (NZDT)

Fixed a_line.move_line, now can move an arrowed line :-)

What to do when clicking near_to an existing object ...
  Added near_to(item_id) to rfc_draw_globals_class.py

Tested starting in 'rect' mode, drawing an n_rect,
  then changing to 'line' mode and trying to draw a line -
      File "/home/nevil/rfc-draw/draw_lines_class.py", line 222, 
          in ln_b1_release
      new_line = self.lbd + [mx,my]
    AttributeError: 'draw_lines' object has no attribute 'lbd'

Interaction between drawing tools and mode needs work!

1700, Wed  8 Feb 2023 (NZDT)

In draw_lines_class.py, set ln_mode to "exist_ln" in set_event_handlers
  That allows us to move an existing 4-line on the screen :-)

Worked on near_to() and closest() in rdg.
Now, starting with 4-segment-line.rdd in Rect mode, can draw an n_rect,
  and move it :-)
Then, in line mode, can draw one new line segment, but not a second -
  need to set ln_mode "new_ln" when starting a new line
Question: in line mode, how to manage ln_mode -
  new_ln -> OK to start new line, 
    but now that only lets us draw a single segment ???
      new segment should change ln_mode?

1603, Thu  9 Feb 2023 (NZDT)

Decided to have separate closest() funtions in each drawing tool,
  started that change for draw_lines_class
Now we can draw a line, and extend it;
  first line in "new_ln", changes to "exist_ln", we can move it around
Clicking on it's end, we can add another segment ...
  Then, clicking in middle of a segment lets us move the whole line :-)

Sorted out near_junction(), that's working now - but we want:

 0. closest() not near a line, or not near existing line
      Start creating a new line                             Yes

 1. To add a segment to an existing line: (n_points >= 2),
      click near it's end (or it's beginning?)              Yes (at end)

 2. To move an existing line:
      click near middle of 1-segment line (n_points == 2),  Yes
      or at an internal junction (n_points > 2)

 3. To resize an existing line: (n_points > 2),
      click near middle of a segment

Shouldn't need to use ln_mode for this !! <<<<<

1724, Fri 10 Feb 2023 (NZDT)

Tried near_which() function, to find where we clicked on the line.
  Need more work, sigh :-(

1304, Sat 11 Feb 2023 (NZDT)

Looking at ln_delete_key, to delete a just-drawn line
  mx,my coords for <Delete> are not the current cursor position,
    they're those from the last b1_motion or b1_release event !!!
  That means we need to click near middle of line, then hit Delete

1750, ditto

Realised we need to have a_line as just an object,
  with function init_a_line to set it's lbd and lbd_id

1718, Sun 12 Feb 2023 (NZDT)

Changed rfc_draw_globals and draw_lines_class to use a_line objects,
  with the line coords contained inside them
Wrote rel_to_line(self, mx,my, l_coords) to determine where cursor is
  It always says cusor is at middle of a segment ???

1509, Mon 13 Feb 2023 (NZDT)

Sorted out problems with rel_to_line, added tell_where() to show it's reponse
Sorted out problem in ln_closest(), now set current_object to closest line
Tweaked ln_closest() to return None if not near an a_line

Now need to work out ln_mode / click / move / release interaction properly !!!
  rel_to_line tells us we're near end of seg 0,
    but that doesn't let us add another seg to it
      (should check it's orientation is different (not 2 horiz or 2 vert)!

1739, Tue 14 Feb 2023 (NZDT)

Can now add a segment to a drawn line.
Working on not allowing last two segs to be both horiz or both vert ...

1715, Wed 15 Feb 2023 (NZDT)

ln_closest() now uses rel_to_line() to test whether closest line far away,
  if so, it starts a new line
Problem: new line has a wee tick at it's start, 
  now we don't draw it until we've determined it's direction

Now we're back to picking up new seg same orientation as last . . .

1709, Thu 16 Feb 2023 (NZDT)

Sorted out 'same seg orientation'; delete new point, set "move" mode
Only 'middle of seegment' left to implement :-)

1755, Fri 17 Feb 2023 (NZDT)

Implemented ln_mode "modify", can now move a segment L-R or U-D ":)
Now, can write to save-file.rdd, but can't read that back:

1238, Sat 18 Feb 2023 (NZDT)

Can now read back rdd file that included a 3-segment line
New question: how to shorten/lengthen the first or last segment of a line?

terminal bell:
  added >set bell-style audible< to /etc/inputrc
    That allows  python3 print("\a")  to make a 'clunk' sound
  my bell-sound.py uses mixer (from pygame module) to play a .wav file
    'small-bell-ring-01a.wav' makes a nice 'ding' with a fading bell sound
    (it needs sound turned upp on the lenovo slimline 3!)

1749, Sun 19 Feb 2023 (NZDT)

Worked on draw_texts: now it has tx_closest(),
  but a new text comes up in edit mode, and we can move it
    what if we only want to move it ???
Also looked at double-click: 
  not very useful, since we also get single-click
Again, at b3:
  rdg uses that for editing text (see move-text comment above)

1706, Mon 20 Feb 2023 (NZDT)

Tried to use End instead of Escape to finish editing text, failed.
  Remembered that tk.Text widget uses Home and End inside it's window :-(
Hmm, b1_click on a text brings up text_edit window
  Fixed that, now b1 (in "text" mode) can move it

To shorten first or last segment of a line, 
  use inward motion of Start or End of line :-)

1720, Tue 21 Feb 2023 (NZDT)

Tidied up closest():
  each drawing tool has a closest() function, ln_, nr_ and tx_
Sorted out rdg.on_delete_key;
  it now gets mx,my from the Delete key event, and deletes that
  Added delete_text() to rdg, use that in on_delete_key()
Added m_text into rdg, use it to display messages
  Change starting screen size to 800x600, to make m_text longer

1729, Wed 22 Feb 2023 (NZDT)

draw_n_rects_class.py uses last_mx/y to compute dx/dy so it can 
  move an n_rect
ditto for draw_lines_class.py and draw_texts_class.py
rfc_draw_globals_class doesn't use last_mx/my, deleted it from there

To do:
 - Implement "inward motion of Start or End of line"
 - Use Message field on rfc-draw screen for error messages  DONE
 
1307, Thu 23 Feb 2023 (NZDT)

Implemented rdg.display_message() to display 'normal' or 'error' 
  messages in the Message Area
That involved reworking the order in which rfc-draw.py sets up the
  rfc-draw-globals (rdg) class!

draw_lines_class.py:  has b3 code (for testing? lines have no associated text!)

Now can change start of first (horiz or vert) seg,
  but clicking on end of last seg still wants to add another segment <<<

Improved rfc-draw to get a better m_text window
  also tidied up Save button usage of m_text window

1733, Fri 24 Feb 2023 (NZDT)

Clicking near end of line:
  can't tell whether to shorten seg or to add new seg :-(
However, we can tell whether click it inside seg (-> shorten)
  or outside it (add new)

1613, Sat 25 Feb 2023 (NZDT)

Worked on inside_seg() and modify_end(); more work to do!

1713, Sun 26 Feb 2023 (NZDT)

It's hard to put the cursor just inside the end of the last segment!

1725, Mon 27 Feb 2023 (NZDT)

Added a new test to rel_to_line(), now returns 6 for "near end of line"
Used that to change length of a line's last seg :-)

Now, find_closest() finds the nearest object to mx.my,
  we use rel_to_line() to decide if it's close to an existing line,
  but somehow that gets us into modify_end() ???
Also, for that new line, we're not getting into 'ln_dir setting',
  and we never see ln_dir set True ???

1619, Tue 28 Feb 2023 (NZDT)

To do:
* Delete works for text object in all modes,
  it doesn't for a line,
  in Text, can delete an n_rect's text and rectangle (two Delete presses)
    ditto in Line
  in Rectangle, can Delete just the text, or just the rectangle

Changed ln_closest(), now return None, None when far from closest line.
Made 4-lines.rdd, changing length of last seg works for rightward and upward
  last-segs, but not for leftward and downward ???

Now, click outside rightward works, but leftward acts as a move,
  Similarly for downward ??

Click on internal corner also acts as a move ???

1109, Wed  1 Mar 2023 (NZDT)

Got "outside end of line" detection right at last :-)
Looking ad Delete, rfc_draw_globals has it, so does draw_rect,
  but draw_text and draw_line don't

1511, Thu  2 Mar 2023 (NZDT)

rfc_draw_globals has Delete handler, it works properly on line, text and n_rect
Could we make Insert retrieve the last-deleted object?
  Yes, do that next!  << Done
Worked on draw_texts_class.py, it now uses len(self.rdg.objects)+1
  in the --l-- string
Started on rfc-draw-manual.txt

Constrained Resource Identifiers  (CoRE Working Group, draft-ietf-core-href-05)
  Bormann's example of a diagram that checksvg made a complete mess of
Now draft-ietf-core-href-11, has a nice svg railroad diagram
  Does suggest that making curved corners for lines could be good :-)
  Consider how rfc-draw might do that . . . .

1619, Fri  3 Mar 2023 (NZDT)

Hmm, we need groups, something like:
 - Ctrl-G to start a group, objects drawn in group's colour (not black)
     e.g. ["red", "orange", "yellow", "green", "blue", "indigo", "darkviolet"]
       for groups 1..7
     Use Ctrl-S to save group
 - New attribute for rdg.object, group_nbr (0 = none, else >= 1)
 - Use Ctrl-1..Ctrl-7 to use a group. 
     Bring up created version of it, then can edit it's compnents
Making round corners - do that in rdd-to-svg.py
  Can't do them for rdd-to-asciiart.py

1714, Sat  4 Mar 2023 (NZDT)

Reworked save/restore objects to use ss, a text string describing the object
Delete / Restore now works properly :-)

Now time to start implementing groups
 1. Need a group nbr (gn) for an object, says this tk object is part of
      Need to save/restore this as another object attribute
 2. Ctrl-G starts creating new group
      Use cursor to draw a containing (dashed?) rectangle for the group
      Draw tk objects inside th rectangle
      Ctrl-S to save group, and go back to normal mode
 3. When we have an edited group on-screen, need to save it's 
      gn and ss (save-string) for all it's objects
Want to:
 * bring up a group, move it on-screen  (Ctrl-1 etc)
 * edit the group (add/delete objects to/in it)

1728, Sun  5 Mar 2023 (NZDT)

Added group attribute to class object()
 . a_liine arrows could be smaller, e.g. half the length
     Done, reduced fronm 16 to 12
 . Started on making white background for a Text object
      need an n_text object, with a white background, sigh
      n_rect should do this, but it needs a white background!
      >> Done
Changed r_buttons_class to add a Group button
Reduced message area size to all for that,
  NOTE message area width is determined in rfc-draw's on-resize code !!!
Now have other problems, when 'group' pressed
  may relate to rdg vs rdgc ???
  Exception in Tkinter callback
    File "rfc-draw.py", line 75, in r_buttons_handler
    rdgc.set_mode('group')
    AttributeError: module 'rfc_draw_globals_class' has no attribute 'set_mode'

1715, Tue  7 Mar 2023 (NZDT)

Sorted out rfc-draw.py; I made a complete mess of it yesterday!
  Sorted out by comparing it to rfc-draw from 26 Feb (n-backup :-)
But
 - ^g only says "in on_ctrl_g", and draws a (dashed) group outline
 - Group button doesn't do anything (not surprising)

 - Really need startup message to distinguish between 
     "read from xx-yy.rdd", and blank message for "no save file specified"
   >> Done

Thoughts about groups ...
 - Group button:
   . Origin for group as lower LH corner of containing rectangle,
       coords for objects within the group should be relative to that
   . Need to support Group button with a separate draw_groups_class.py,
       that way we can handle b1 interrupts to create/edit/arrange the goup
       No, do that in draw_n_rects.py, it already has rectangle-editing code
   . Don't need the Group button, ^g and ^1-7 is enough >> Done
       ^g Brings up anpopulated group, ^d a populated one
       Need to resize/move the group's enclosing rectangle
         just click on the rectangle
       Now can add objects into the group

     No, Group button should let you edit the group
       Difference between bring up copy or existing group (ctrl-d)

 - Ctrl-d (d=1..7):
   . Brings up a copy of the macro, can move it into place
   . Ctrl-e to move back to previous mode
       Now 'cursor on a group' should move the group about on-screen

1736, Wed  8 Mar 2023 (NZDT)

Decided we need a separate draw_groups.py
Moved the location (self.tl, etc) variables, and the where() function
    into rfc_draw_globals_class.py
  Tweaked draw_n_rects to use them there
Started on draw_globals_class.py
  Can now start a new group, 3 pixels square, at cursor position
  Now to resize it in b1_click and motion :-)

1733, Thu  9 Mar 2023 (NZDT)

Got where() working properly in draw_rfc_globals_class.py
Added class rd_group to draw_rfc_globals_class.py
Now need to work through design and use of that vs new_group() !

'create a group' needs to
 - create a group-class object
   . with it's dashed enclosing rectangle
     + so it can be resized/moved on-screen
   . and an entry in self.rdg.objects ("the objects table)
   . plus entries in the object info tables

1715, Fri 10 Mar 2023 (NZDT)

Got group object (more or less) working.
  Can create/resize/move it, write it to an rdd file, and read it back :-)

Now  (edr = Enclosing Dashed Rectangle)
 . put objects into group, with their own coords rel to top-left of it's edr
   >>> the edr is really a group template!
 . move group edr around, with all it's objects staying in position
 . save group to / read groups from rdd file
   >>> Note difference from creating/editing a group using Group and it's edr,
       and an actual group instance, with objects and their *actual* coords
 . pick a group instance (ctrl-1..7 in non-Group mode) and place it on-screen

All objects need to be in rdg.objects, so that the *_closest() functions
  can find them
Also, the group template (aka edr) needs a list of them, so that when we
  use a group template it can create new objects, and change their coords
  if the instance is moved on-screen

1554, Sat 11 Mar 2023 (NZDT)

Made classes g_template() and g_instance(),
  now to put objects into a g_template, and move it about ...

Working with tags: 
  https://anzeljg.github.io/rin2/book2/2405/docs/tkinter/canvas-methods.html
  also  object.itemconfig(tag="xxx")

 .addtag_enclosed(newTag, x1, y1, x2, y2)
    Add tag newTag to all objects that occur completely within the rectangle
    whose top left corner is (x1, y1) and whose bottom right corner is
   (x2, y2). 

.addtag_overlapping(newTag, x1, y1, x2, y2)
   Like the previous method, but affects all objects that share at least one 
   point with the given rectangle.

.addtag_withtag(newTag, tagOrId)
   Adds tag newTag to the object or objects specified by tagOrId.

.bbox(tagOrId=None)
   Returns a tuple (x1, y1, x2, y2) describing a rectangle that encloses all 
   the objects specified by tagOrId. If the argument is omitted, returns a 
   rectangle enclosing all objects on the canvas. The top left corner of the 
   rectangle is (x1, y1) and the bottom right corner is (x2, y2).

Also:
   .tag_lower(tagOrId, belowThis)
   .tag_raise(tagOrId, aboveThis)
   .addtag_above(newTag, tagOrId)
   .addtag_below(newTag, tagOrID)
   .find_overlapping(x1, y1, x2, y2)
      returns a list of the object IDs of all the objects that share 
      at least one point with the given rectangle. 
  .find_enclosed(x1, y1, x2, y2)
      ditto, returns list of all objects completely enclosed

Made test-tag-raise.py, demonstrates a line moving below a 
  white-filled rectangle :-)

1527, Sun 12 Mar 2023 (NZDT)

To do:
 1. Allow text object to be moved on-screen << Done
 2. Make objects have tags in low-to-high order line | rectangle | text
    Done >> implemented add_to_layer to draw
      lines (layer 1), n_rects (layer 2) and texts (layer 3)

1255, Mon 13 Mar 2023 (NZDT)

Reworked tx_closest() to test whether mouse is inside a multi-line text :-)
  (Remember, can only move a text in Text mode!)
However, the text isn't on layer 3
 
Made test-adjust-layers.py.  Using add_to_layer();
  draws a red circle (layer 1), overlaid with a blue rectangle (layer 2)
  i.e. higher layer number overlays other (lower) layers

Alas, ongoing problems with add_to_layer.
  python3 rfc-draw.py text+line.rdd draws a line and a wide text, 
    but the line overlays the text :-(
   python3 rfc-draw.py hits a problem drawing a line:

  File "/home/nevil/rfc-draw/rfc_draw_globals_class.py", line 276, in add_to_layer
    item_id = command(coords, **kwargs)
TypeError: draw_line() got an unexpected keyword argument 'sd'

1755, Tue 14 Mar 2023 (NZDT)

Still haven't got layers (1=line, 3=text) to work properly,
  python3 rfc-draw.py text+line.rdd  draws a blue line over the text
Need to track through which object is being drawn from where !!!!! :-(

1157, Wed 15 Mar 2023 (NZDT)

Tried adding the test-adjust-layers.py code into the start of rfc_draw_globals.
It works there, and later objects, e.g. from text+line.rdd
   are also properly layered.
So now, why does it not work fom other classes?
Aha!  Changed line fill from blue to chartreuse, that makes it much 
  more obvious that it really is on layer 1 :-)

Realised that create_text objects don't have a background colour -
  if we want that, we have to "**use the bbox function to get the bounding box 
  of the text** and then overlay a white rectangle under the text which would 
  have a similar effect.
    i=w.create_text(*textSet, text=i[3], font=("Helvetica", 16))
    r=w.create_rectangle(w.bbox(i),fill="white")
    w.tag_lower(r,i)
  (*xxx in a function header = xxx is 'all the positional arguments')
Again, since add_to_later() nworks on create* objects, we have to use it
  on those in classes like arrow_lines

1712, Wed 15 Mar 2023 (NZDT)

Finally got add_to_layer working properly for arrow-lines, texts and n_rects :-)
Tweaked word-group.rdd.  Can't get line lengths exactly right with mouse,
  finished up editing the .rdd file to get the up-over-down line right

Now we can get back to implementing groups!

1753, Thu 16 Mar 2023 (NZDT)

Implemented move_deltas() in rdg, changed draw_groups to use it
  Need to do same in draw_n_rects_class !
Where is the dashed rectangle (group template border) drawn?

1256, Fri 17 Mar 2023 (NZDT)

Changed draw_n_rects_class.py to use move_deltas
  current_obj = <Key 1, Object <rfc_draw_globals_class.rdglob.n_rect object at 0x7fcb4b114400>, Type n_rect, Group 0, In_n_rect 0>
  ... ... where: rdo = <rfc_draw_globals_class.rdglob.n_rect object at 0x7fcb4b114400>
  n_rect b1_click: self.region = 9, self.rdg.far 0
@@@ but that was for a click inside the rectangle (far -> 9), 
   should have been 4 -> middle ????????

Hmm, problems with creating an n_rect.
Need to tell tkinter we're moving the lower right corner -
  we're not doing that at the moment!

1751, Sat 18 Mar 2023 (NZDT)

Problem with n-backup of rfc_draw_globals_class.py<
Need to fix this when we're not being rushed!

Installing gnome desktop on lenovo ideapad
  sudo apt install ubuntu-gnome-desktop -y
search "Ubuntu 20.04 how to install gnome desktop" <<<

1619, Sun 19 Mar 2023 (NZDT)

Tried installing gnome on ideapad (it's running 20.04 LTS),
  failed, eheu :-(
Sorted out problem with n-backup.  
  NOTE: check N-disk/i-backup/log-files at least once per week !!!

In rfc_draw_globals_class, class n_rect sets type = "n_rect" <<<
Sorted out handling of self.region (in rfc_draw_globals)
  vs  self.rdg.region (in draw_*_class)
Now, rfc-draw.py text+line.rdd draws line (black) over text (red)

The line is drawn using add_to_layer(1), so it's drawn at the lowest level.
If we set fill="chartreuse" for the line and arrowheads,
  then the text is drawn  with fill="red", it's drawn by add_to_layer(3),
  and it's red is enough to stand out above the line.
Without setting fill, line colour is black (no R,G,or B), but the text
  doesn't seem to be drawn over it ???

Now, in draw_n_rect_class, clicking brings up an n_rect, but also a
  small  rectangle behind it ???

1438: Mon 20 Mar 2023 (NZDT)

Tested drawing line (layer 1), n_rect (l2) and text (l3)
Layering works as expected, but
 . two calls on create_line?  Fixed
 . small rectangle drawn as well as the n_rect?  Fixed
 . text initially comes up with black border?  Couldn't reproduce

Worked on draw_groups, we have grp_template deltas and coords tracking OK,
  but nothing happens on-screen :-(

1716, Tue 21 Mar 2023 (NZDT)

draw_groups now working properly;
 . Draw enclosing dashed rectangle (edr) by dragging from tl to br corner
 . Resize by clicking near coners or edges of edr
 . Move by dragging middle of edr
 . Draw new group edr by clicking (and dragging) outside any existing edr

Now to implement objects within a group instance (edr)!
Earlier notes on groups:
 1 put objects into group, with their own coords rel to top-left of it's edr
   >>> the edr is really a group template!
 2 move group edr around, with all it's objects staying in position
   !!! easier to use screen (*actual*) coords for this !!!
 . save group to / read groups from rdd file
   >>> Note difference from creating/editing a group using Group and it's edr,
       and an actual group instance, with objects and their *actual* coords
 . pick a group instance (ctrl-1..7 in non-Group mode) and place it on-screen

1533, Wed 22 Mar 2023 (NZDT)

Wrote find_grp_objects(), called by b3 in Group mode,
  it finds a_lines, n_rects and free-standing texts :-)
  NOTE: that means we can't edit texts using b3 in Group mode
  >>> Must hit button for object type you want to work on <<<
Now, to move a group and it's objects around ...
 * Changed class grp_template to class group,
     with a list of objects in the group; empty list => template
 * Make the edr into a group object (no longer a template),
    enter it into objects{} by clicking b3
      i.e. copy the objects into group.objects[] (with their screen coords)
 * Now, clicking on a group (inside pale colour edr)
    should let us move it around (keep showing it's edr!)

b3 in group mode finds all the objects inside the group edr,
  now need to save them in the group's g_objects list
  Should shrink edr to group's bbox, will need bbox for that

1304, Thu 23 Mar 2023 (NZDT)

Wanted b3 in draw_groups to shrink edr to bbox of enclosed objects
  arrow_lines object doesn't have x,y, .. !
  will neeed to test for a_line (lbd), n_rect (bbox), text (drawing.coords)

Wrote self.find_grp_objects(id_list) in draw_groups_class.py
  Finds min/max of x,y points in grp_objects, we use that to shrink edr
  Now move grp only moves it's edr <<<<

Considering groups again ...
 1. Create group template by drawing it's objecst; in group mode put edr
      around them, using dark colour.  B3 to create group's template << Done
 2. Move template (or group) on screen, by dragging a clear area within 
     it's edr.  Will need to .move() each of it's objects
 3. Create group object in group mode, using key 1..8. Draw it's edr in 
      pale colour.
 4. Save template (or group) to rdd file, type 'g_template' (or 'group'), 
      including it's group number (1..8)
      class group allows for 'group' and 'g_template',
        Diference between them is: 'group' has a group number

 5? Only show edrs in Group mode, then can move groups and templates on screen.
    In other modes, usual editing of objects within groups ??
      Saving saves group objects and edr with screen coords and group number
      and templates with group coords ??

To do:
 - 1-9 key to form group from template (instead of B3; B3 is for editing texts)
 - move template (or group) by dragging it's edr

1709, Sat 25 Mar 2023 (NZDT)

Implemented key handling for draw_groups_class (e.g. 1-9)
  Couldn't use readchar.readkey() because draw_groups traps key-press events!
Bogged down in draw_groups_class: sequence key - make_group - new_group ???

1223, Sun 26 Mar 2023 (NZDT)

Decided readkey approach was too complicated, 
  use b3-double-click instead to make group
Also, don't use numeric key to specify group number,
  simpler to just use the next in sequence (as we did earlier in draw_groups_ )

Made test-bclick-and-key-detect.py to distinguish single- from double- clicks

Testing:
 - draw edr around objects to be in group
     . edr drawn in rdg class group __init__(), coords in self.g_rect_id,
         and appended to rdg.g_rect_ids, g.g_nbr = len(rdg.g_rect_ids)
     . Double-B3 invokes edr_to_group(), that has test code for
         find_enclosed() objects inside edr, and find_grp_objects()

Should now be able to make several group objects,
  but drawing an n_rect, then Group, only says 
    ==> Can't move a 'n_rect' in 'group' mode  ???
  so dg_closest() finds the n_rect: need to decide it's far away <<<

Then, we want to move the group object, with all it's contained objects ...
  the group object, g, so far has only the edr

1234, Mon 27 Mar 2023 (NZDT)

Tried making a group containing a single text
  Fails because a text only has one point (it's centre),
     so it's bbox is just a point!
Added code in find_objects_bbox() to find bbox size for texts
  And now, can create a group for line, text and n_rect :-)

Tried having single+double b3 in rfc_draw_globals, didn't work.
Went back to just using b3 to edit text in all but group mode.
Can't edit text in group mode, that gets into strife calling
  on_b3_click() in draw_globals, that just exits rfc-draw, sigh

Can now make groups for n_rects, lines and texts :-)

1727, Tue 28 Mar 2023 (NZDT)

Got colours of group templates correct (brown, red, orange ...)
Can now Delete a group template, and restore it (with correct g_nbr)
We now save g_nbr for a group, so restore_group can set it

Now for group.b1_motion:
 - Move a group, or resize a template edr?
   . len(g.g_objects) == 0 -> template, can resize edr (i.e. drag lr corner)
     + Maybe we should be able to move it as well, 
       ! use where to set region, middle -> move it, else as for n_rect
   . len(g.g_objects) != 0 -> group, move it and all it's objects

1735, Wed 29 Mar 2023 (NZDT)

Saving group to rdd: need a 'state' field, G=group, T=tmplate?
  No, just use g_nbr == 0 -> Template :-)

Tidied up *.rdd files; deleted most, 
  added trailing 0 (g_nbr) in those that remain

Verified that the following now works properly:
 1 python3 syntax-groups.rdd
 2 Group mode, draw edr using b1; now we have a template
 3 Double-click b3, now we have group 1
 4 Save as test-save.rdd
 5 python3 rfc-draw.py test-save.rdd does bring up group 1, edr is brown :-)

1541, Thu 30 Mar 2023 (NZDT)

In group mode, want b1 to move an existing group; dg_closest needs to find it!
Hmm. when closest() returns None, we call new_group;
  that creates a group object (type 'group'), which only has the edr so far,
  and current_object is set to that group
Then when closest returns an item_id ...

Need to better understand how dg_closest is supposed to work
  edr = group with no contained objects, only the tkinter rectangle, edr
  
How to tell if it's a newly-drawn dashed rectangle?
  obj.type() -> 'rectangle'  # Not actually useful

If near 'group' object, get set to move it
otherwise, message >> Not near any group

1735, Fri 31 Mar 2023 (NZDT)

Problems with add_to_layer, restore_line doesn't seem to put line at
  layer 1, i.e. behind layer 2, sigh ;-(

1012, Sat  1 Apr 2023 (NZDT)

Hmm, python3 rfc-draw.py layers-test.rdd draws properly, 
  so add_to_layer() does work properly
However, python3 rfc-draw.py syntax-groups.rdd doesn't,
  so the problem is in saving or restoring the objects, sigh

layers-test.rdd
  0 (line 1) [117, 242, 615, 242] "-|-" 0
  1 (line 3) [117, 242, 615, 242] "-|-" 0
  2 (n_rect 5) [263.0, 162.0, 490.0, 284.0] " + " 0
syntax-groups.rdd
  0 (n_rect 1) [291.0, 212.0, 362.0, 246.0] "word" 0
  2 (line 3) [269, 230, 269, 195, 384, 195, 384, 230] "-|-" 0 
  3 (line 7) [226, 230, 425, 230] "-|-" 0

Aha, layers- has the n_rect last, syntax- has it first <<<<

test-adjust-layers.py works properly (using create_line)
test-adjust-a-line.py crashes, 
  File "test-adjust-a-line.py", line 41, in add_to_layer
    item_id = command(coords)
  TypeError: draw_line() takes 1 positional argument but 2 were given

1711, Sat  1 Apr 2023 (NZDT)

test-adjust-layers.py stopped working.
Eventually, pulled test-adjust-layers.py for 19 March from n-backup,
  realised that tags.append(layer_tag) must NOT have [] around layer_tag
Changing that got  rfc-draw.py layers-test.rdd  working again
A wasted day, alas :-(

1145, Sun  2 Apr 2023 (NZST)

python3 rfc-draw.py syntax-groups.rdd 
  restores the objects in group 1
  group 1, draw dashed rectangle (edr) around them
  double-b3 makes a group
    but b1_click / dg_closest finds the enclosing rectangle ??
  saved that as syntax-groups-sun02.rdd 

python3 rfc-draw.py syntax-groups-sun02.rdd 
  restores the objects, and the dashed rectangle,
  but but b1_click / dg_closest only finds the edr

We shouldn't save just the edr, need to save a group
  and the object (copies) in it
First, we need to move a group clear of it's starting position

Made new-adjust-layers(), to test using tags=["edr] in add_to_layer()
  That works properly, as long as we also have kwargs.setdefault("tags", [])

Now in rfc_draw_globals, class group, we draw the enclosing rectangle
  with  tags=["edr"]
That allows us to check in draw_groups edr_to_group that we are
  about to make a group fom an edr :-)

1719, Mon  3 Apr 2023 (NZST)

Worked on edr_to_group(), adding objects into g.objects
  after that, it prints "edr now", a list of g.objects

However, back in dg_closest, clicking near it's enclosing rectangle
I get 
   BBB 224,193, 427,248
   edr now:  g_nbr 1, 3 objects
      line: type a_line, key 3, coords [269, 230, 269, 195, 384, 195, 384, 230]:
      line: type a_line, key 7, coords [226, 230, 425, 230]:
      n_rect: type n_rect, key 1, coords (291, 212, 362, 246):
   # # # dg_b1_click: group ln_mode, 223,203, 5 objects, .!rfc_canvas.!canvas, ButtonPress
   @dg@ closest(): item_x = (9,) (rectangle), mx,my 223,203
   b1_click(): closest returned item None, obj None
and that starts it drawing a new edr ???

Need to tag the edr rectangle to mark it as "template"
  drawing.dtag(id, tagToDelete) removes a tag
  drawing.addtag_withtag(newTag, id)  adds a tag

Hmm, need class group to include it's edr rectangle, and tag that as "edr n"

1725, Tue  4 Apr 2023 (NZST)

Implemented "edr n" tag, that works properly.
Changed edr_to_group() to out the group's edr into it's objects list
Have been able to move all the enclosed objects, but not the edr
  bogged down in trying to debug that :-(

1440, Wed  5 Apr 2023 (NZST)

Try: don't add edr to it's objects, move it seperately
  Yes, that works well :-)
Now:
 - light colours for group (dark for template)
 - Need to keep template in position (we can move it though) 
 - write/read .rdd files
   . Now we save group with only it's edr
     + We need to save it's contained objects too
     + Also need to move it, say x+= 50, y-= 50, and change to light colour

1706, Wed  5 Apr 2023 (NZST)

Copying edr works, added copy_group() to draw_groups, that worked for edr
Now to make copies of the gggroup's objects, added copy_object(),
  that has to copy n_rects, lines and texts as well as groups ...
    Should use restore_ text, line_ and rect() in rfc_draw_globals <<<

Rethink ...
 1 Create a group
   . Draw objects for the group
   . In group mode, draw it's enclosing dashed rectangle (edr) dark colour
   . double-click b3 to create the group, edr colour remains dark
       the group object is now a template, it can be moved, e.g. to screen RHS

 2 Use the group
    . In group mode, double-click b1 on the template
        this new group is a copy of the template, and can be moved on-screen

 3 Save/Restore of rdd files
   . Each template is saved in a template line
       each of it's objects appear in separate lines, 
         with the telmplate's group number
   . Ditto for each group instance

1716, Thu  6 Apr 2023 (NZST)

Added bind and functions for b1_double click in draw_groups (not used yet)
Changed edr_to_group() to edr_to_template()
Had b1 move-template working, but that's stopped just now, sigh :-(

1726, Fri  7 Apr 2023 (NZST)  Good Friday

n-backup of draw_groups_class.py provided draw_groups_class_04_working.py,
  worked on current draw_groups_class, looking for changes since 04 version
edr is drawn as a dashed rectangle, an object of type "group",
  with no encllosed objects
edr_to_template should return an object containing the edr,
  then double-b3 returns an object containing it - or does it?

1434, Sat  8 Apr 2023 (NZST)

Decided not to have template as a separate o_type:
 . an edr is created as a group object (in self.objects), with tag 'edr n'
 . draw_groups lets you draw the edr's dashed rectangle,
     then double-b3 appends the edr's contained objects (also in self.objects)
 . then draw_group lets you move the complete group to where you park it

Got it working, then changed it slightly (trying to remove the # lines
    in draw_groups_class and rfc_draw_globals),
  Now double-b3 shrinks the dashed rectabgle, but when you put button 1
    down the rectangle changes it's coords, becoming a smaller rectangle
    displaced up and left.
    However, it does move along with all the enclosed objects !

1451, Sun  9 Apr 2023 (NZST)  Easter Sunday

Worked through current code, doule-b3 makes objects[9], tags 'layer 1'
  then new_group() makes objects[10] (by edr_to_group()) ??, 
    tags 'edr 1', 'layer 1'  !!!
Changes arrow_lines_class.py so that it's move() only sets new coords
  for the line's segments and their arrowheads
Finally got b1-action() to move a group, with it's enclosed objects :-)
  This works properly when you click in the top left corner of it's edr <<<
  Ah, you have to click near the edr, so dg_closest can find it !!!

Saves the final state in apr10.rdd; oh, oh, we haven't changed the
  enclosed object's groups to 1, we need to do that, to allow the
  saved objects to appear within it's group <<<

1641, Tue 11 Apr 2023 (NZST)

Moved the group.move code into class group, using self.rdg.move_deltas()
  to stop the edr going off-screen.
That all works fine, as long as one b1_clicks just inside the edr,
  and doesn't move the group out to an edge.
  If you do, the objects in the group move about relative to the edr, why ???

1449, Wed 12 Apr 2023 (NZST)

We now compute actual deltas in group.move(), can move edr and group around
  without changes, even out to edges of screen :-)

To do:
 1. dg_closest(): in group mode, use g.g_nbr to determine group,
      so that we can click anywhere inside group to move it  >>DONE
 2. Make sure group number is saved properly for group, a_line, text and n_rect
      so that they're properly restored from .rdd file  >>DONE
 3. Implement double-b1 to copy a group template (T) to a new group (G)

 4. Draw syntax objects 2..6, save as new version of syntax-objects.rdd
 5. Make groups of all the syntax objects, save as syntax-groups.rdd

Started on 1: 
  Click inside edr (just inside top left corner), can move whole group OK
  Click on line, ditto, but repeated clicks on a line seems to shift group
    with cursor a little to the top left of group edr

1539, The 13 Apr 2023 (NZST)

Reworked dg_closest() to use find_surrounding_group()
  This works fairly well, so long as you click in the white space
    near the dashed rectagle's corners - anywhere else may work, but also 
    picks a cursor location somewhere away from where you clicked!
  Maybe we need to update last_mx,my as part of this?  <<< Needs work <<<

Restoring objects from rdd file works, but need to add group's objects
  into the group itself - otherwise we can't move it as a group!
  Remember, the group object is it's dashed rectangle.

populate_groups() searches self.objects to find groups,
  for each group it scans self.objects to find tk objects in that group
  Had to rework restore_object to get the group number for each object!
  Still not quite working, sigh

1703, Fri 14 Apr 2023 (NZST)

- added .g_type to class group; initally "T", edr_to_group() changes it to "G"
- tweaked save/restore functions to handle g_type
    Now we can read in aaa.rdd, save it as bbb.rdd, diff says aaa == bbb  :-)
- back to  rfc-draw.py syntax-objects.rdd /
    b1 to draw edr /  double-b3 to make new group  / b1 to move
      OK if we drag from just inside tl corner,
      but the group can jump to a new position wrt the cursor,
        this seems to jump to revious cursor position inside the group ???
	Also, drag from just outside the edr sometimes tries to resize it ???
    
    Need to look (yet) again at dg_closest() < < < <

1639, Sun 16 Apr 2023 (NZST)

We now have group-1.rdd, wider screen, group 1 at top right :-)
  Alas, we can't move it properly in group mode, see above comments

rdd files:
    # tests of Line drawing
      4-lines.rdd, 4-segment-line.rdd, 4+2-segment-line.rdd
    # object layers (1 = lines, 2 = n_rects, 3 = texts)
      layers-test.rdd  # test of rfc-draw object layering
    # groups
      syntax-objects.rdd  # group 1 components, no groups
      
      nr-in-g1+g2.rdd  # 2 groups, each with an n_rect

To do: item 3, double-b1 to make copy (group) of a group (template)
New items
  . key u to ungroup:  We need these components to make new syntax groups
  .     c to copy a tk object (still double-b1 for T to G copy)
  .     f to flip (invert) an rfc-draw line
  .     r to reverse (LR to RL) an rfc-draw line

1508, Mon 17 Apr 2023 (NZST)

Lines: click on end of line to draw next segment
        at middle of segment to move sideways, 
	  horiz line allows left/right move, but how to do up/down?
    Added code for 1-segment line, can now move it up/down and/or left/right :-)

C to copy object: now works for line and n_rect using their bbox() function,
  but text objects don't have a bbox().  Have to use self.drawing.coords()

1736, Thu 20 Apr 2023 (NZST)

Got code to debounce key release events workking :-)
Implemented "r" -> Line Reverse
Started on "f" -> Line flip: get bbox, r_coords rel to bbox,
	            f_coords y inverted rel to bbox
         Now must convert f_coords back to screen coords and redraw the line

1019, Fri 21 Apr 2023 (NZST)

Got "f" to work properly, but ... 
  had to offset flipped line (otherwise can't see where it overlays old line)
  problems in Line mode with clicking on a corner to move the old line,
    bad tendency to start a new line starting at where you clicked!
    Ah, clcking near flipped line starts a new line ??
  Disable keypress binds in Save mode, to allow normal entry of filename <<<
  Need to invoke bind/unbind_keys() in rfc_draw_globals;

Got "f" to flip a line working :-)
  Saved flipped line in flip.rdd

new line started (rdg.ln_mode "line", sub_modes in draw_lines.ln_mode)
  click far from a line -> "new_ln"
  near an existing line -> "exist_ln"
  near a line's end -> "end_seg"
  near internal junction -> "move"

1609, Sat 22 Apr 2023 (NZST)

Continued work on flip and reverse
  Do them in place, by altering the line's object in self.objects
  -> "c" to copy existing object, then "f" and/or "r"

python3 rfc-draw.py 1-line.rdd | tee xxx.yyy

flip looks OK now, can move the flipped line,
  but can't move a reversed line ???
  That's done in arrow_lines, added some code to save reversed coords in  

1552, Sun 23 Apr 2023 (NZST)

Deleted reverse_line() from arrow_lines_class.py,
Added reverse_line() to draw_lines_class.py, 
  starting from a copy of flip_lines()
Now both "f" and "r" work properly :-)

bad-svgcheck-diagram.png relates to draft-ietf-core-href-12,
  copied current version of that diagram onto desktop; it's much clearer!
Was able to draw a copy (in cri-syntax.rdd)
Only need a way to draw the two short vertical bars at either end of it :-)

Tried to do that using small n-rects with " " text,
  problems with delete/insert for those ??

1440, Mon 24 Apr 2023 (NZST)

Ideas for new rfc-draw features:  
 - Rectangle with no text inside?  Use " "
 - Snytax end marker for lines (two vertical lines, space in between)
 - Line with no arrowheads

Try text H at ends, or "||"  No, H too small, "||" looks OK, but why is it red?

Line option strings:  "A/N" for Yes/No arrowheads, "E" for Syntax End markers
                      "=" to set start/fin; start seg vert, end seg to same x,
                                           start seg horiz, end seg to same y

Tweaked cri-syntax.rdd putting everything into a group
  (b1 to draw edr /  double-b3 to make new group  / b1 to move) works fine,
  cri-syntax.rdd now has one group, type T, i.e. template, with dashed edr.
    (N for all the other objects only means "not a group")

Implemented line_options in draw_lines_class.py and arrow_lines_class.py,
  keyboard handling for ne= looks OK, but doesn't seem to get across
  to the draw_line or arrow_lines object, so we get an empty string
    back from obj_to_save_str()
Had to update options of dl and arrow_lines objects, they may change
  when user sets them!

1628, Tue 25 April 2023 (NZST)  Anzac Day

Sorted on line-change key actions, n, a, f and r all work properly,
  on the self.rdg.current_object line :-)
Now for "=" action ...

Ah, save to rdd failed,
  File "/home/nevil/rfc-draw/rfc_draw_globals_class.py", line 577, in obj_to_save_str
    coords = val.object.lbd;  str = val.object.line_options

Need to make an options string from settings in arrow_lines <<<
  Done (most of) that, needs more debugging, 
    save-file isn't adding E to the arrow_lines options string

1632, Wed 26 Apr 2023 (NZST):

Now make (lc) options string from arrow_lines, can now save and restore a line
Draw line with syntax-ends, save and restore it, now try to move it:
  line (and arrowhead) moves, but bars extend to bottom of their original y ??
Looks as thoug undraw_se_bars isn't working

alc.move moves a line and it's arrowheads
Tried to also move the syntax_end bars, but that just doesn't work :-(

Try saving the four s_e bar coords, the move by changing their coords <<<

1731, Tue  2 May 2023 (NZST)  Back from Auckland trip, Assembled Roland's shed

Draw a line, E adds end-marks, U removes them
Move moves the line, but not the end marks ??

1639, Fri  5 May 2023 (NZST)

Finally able to move a line with syntax-end marks :-)

However, can move horiz line up/down no problems,
  but left/right doesns't work nearly as well ???

1720, Mon  9 May 2023 (NZST) <<< working on nebbiolo2

Tweaked cri-syntax.rdd to add 'e' to its config line,
  it looks OK now on nebbiolo-2

1642, Wed 24 May 2023 (NZST)  After several weeks setting up nebbiolo-2 :-)

Looking at .rdd files:
  cri-syntax.rdd  is my version of cri-syntax-from-draft-ietf-core-href-12.png
    it has the a and e attributes set for lines :-)

  Need to decide which rdd files to keep, and edit them properly !!!
  Also, key-press of n to turn off arrowheads doesn't work
    nor does r to reverselne direction ???

1705, Thu 25 May 2023 (NZST)

Worked on option setting for lines:
  n doesn't remove arrows, a should restore arrows ?
  r draws reverse arrows but doesn't remove the old ones !
  f flips a newly-drawn line
  e puts End marks onto line, u removes them  :-)
  = doesn't even up bottom edges of line

1711, Sun 28 May 2023 (NZST)

Got = to work properly :-)
Need to fix problems with n/a (arrows/no arrows),
  and r (reverse direction of arrows)

1251, Mon 29 May 2023 (NZST)

Sorted out n key to remove arrows, needed to work on existing line object!

Tidying up list of .rdd files:
  2-Ls.rdd   4-lines.rdd   4+2-segment-line.rdd
  2-n_rects.rdd   text+line.rdd
  test-r+f.rdd   test\=.rdd
  syntax-objects.rdd  cri-syntax.rdd

grp-5.rdd  <<< Nearly OK, but n-rect (with "word") doesn't move with others

1730, Tue 30 May 2023 (NZST)

Wrote rdd-to-svg.py, tested it using 2Ls.rdd, it works as expected :-)

To do:
 - mke rdd_rw a separate class, use it in rfc_draw_globals_class to
     restore an rdd file.  Maybe also have it write rdd files?
 - rdd-to-svg.py:  After reading rdd file, find min/max x and y,
     make svg drawing that size, map rdd coords into it.
     (We already have edge margin(s) specified.)

1748, Wed 31 May 2023 (NZST)

Wrote rdd_io.py, contains stuff to read .rdd files
  - will need to add more stud=ff top write them <<<
Worked on rdd-to-svg.py
  now it uses rdd_io, and draws lines _with arrowheads_,
    using the arrows code from arrow_line.py :-)

1657, Tue  6 Jun 2023 (NZST)

Installed svgcheck   pip3 install svgcheck

This didn't work, problems with a subprocess (not with pip!)

Copied 4+2-segment-line.svg to nebbiolo, verified it there using
  svgcheck-0.6.0
That showed I'd used 'stroke red' for the frame;
  changed that to black in rdd-to-svg.py, now it conforms :-)

1143, Wed  7 Jun 2023 (NZST)

Found https://libraries.io/pypi/svgcheck

pip install svgcheck==0.6.0   # Installed version 0.6.0, no problems :-)

svgcheck rfc-draw/4+2-segment-line.svg
  says
Parsing file rfc-draw/4+2-segment-line.svg
rfc-draw/4+2-segment-line.svg:2: The attribute viewBox is required on the root svg element
rfc-draw/4+2-segment-line.svg:2: Trying to put in the attribute with value '0 0 757.0 606.0'
INFO: File conforms to SVG requirements.

https://svgwrite.readthedocs.io/en/latest/classes/mixins.html

ViewBox.viewbox(minx=0, miny=0, width=0, height=0)

1713, Wed  7 Jun 2023 (NZST)

Added ViewBox to rdd-to-svg.py, now svgcheck says it conforms :-)

Tried to add draw_n_rect() to rdd-to-svg.py
  Seems like I have to make a css style sheet for this,
    (to specify font size, font family, stroke and fill)
  but I didn't get anywhere with doing that, sigh

1706, Thu  8 Jun 2023 (NZST)

Got style= working in svgwrite, tyhanks to
  https://stackoverflow.com/questions/17127083/python-svgwrite-and-font-styles-sizes

Layering in svg: each element is drawn over existing ones.
Tweaked rdd-to-svg.py to draw all lines first, then n_rects (and then texts) <<<

Need to test text object layering, try text+line.rdd ?
Yes, that works fine :-)

1745, Thu  9 Jun 2023 (NZST)

Worked on layers-test.rdd, realised that svgwrite doesn't handle \n
  characters at all; had to break text-to-be-drawn into lines.
Also, tkinter draw_text_class uses anchor=tk.CENTER,
  so we have to allow for that in rdd-to-svg,py, draw_text()
Getting closer, slowly !!!

1729, Sat 10 Jun 2023 (NZST)

Tried to get monospace font in rdd-t-svg.py, failed.
But it works properly in test-svg-style ???

1627, Sun 11 Jun 2023 (NZST)

Worked out how to set font style in svgwrite :-)
However, couldn't get font mono to behave.
Decided to use Droid Sans Mono, downloaded for free from
  https://www.fontsquirrel.com/fonts/droid-sans-mono
unzip droid-sans-mono.zip
  unzips  DroidSansMono.ttf and 'Apache License.txt'
clicked on DroidSansMono.ttf to install it

I did try to use tkFixedFont in rdd-to-svg, that didn't work, alas

Now I'm able to use droidsansmono in both rfc_draw_globals_class.py
  and rdd-to-svg.py
However, it looks heavier-weight in the svg version, alas

Maybe I can find a lighter-weight mono font?
  https://www.1001fonts.com/light+monospaced-fonts.html?page=1
    looks promising, downloaded monospace medium, it looks better
    so does nimbusmono
  need to compare these tomorrow !!

ctrl-x ctrl-+  to increase font size, crtl-x ctrl-- to decrease it

1543, Mon 12 Jun 2023 (NZST)

For emacs, Set Default Font to Misc 9x15

Tweaked text-svg-style.py to compare four 'light monospace' fonts.
Nimbus Mono 12 seems smallest/lightest in Inkscape,
  but Droid Sans Mono also looks OK; lets go with it <--

Testing with monospace-text+line.rdd shows that svgwrite/svg text
  is collapsing successive spaces into one.
xml:space='preserve' should stop that,
  but I haven't been able to make it work :-(

1539, Tue 13 Jun 2023 (NZST)

to see svg file in Firefox:
  file:///home/nevil/rfc-draw/monospace-text+line.svg

At last, got rdd-to-svg.py to use style info properly,
  including "white-space:pre" (don't shrink consecutive spaces :-)

Tried Google's Space Mono Regular font, not as nice as Nimbus Mono

1742, Wed 14 Jun 2023 (NZST)

Spent all day trying to get 'working' version of rdd-to-svg.py
Saved versions from time to time:
  -00.py gets monospace, none of the later ones do !!! <<<<<<<<<<<<
Made find_words() to get positions of words in a line,
  so that we can position each word's x position, instead of using
  xml:space or white-space:pre

Need to back up to -00, but use find-words to position them, sigh

1554, Thu 15 Jun 2023 (NZST)

Switched back to 00,py,  cp rdd-to-svg.py rdd-to-svg-15Jun.py
svgcheck monospace-text+line.svg
  doesn't conform, because it's full of Style attributes

Changing to using font-family:monospace to set style works.
  Sequences of blanks are lost, and font size needs to be bigger,
  but ... svg file now conforms :-)

Reworked to use style string; now have monospace, but width of spaces is wrong
  Also, changing f_height has no effect on font size used !@#$%^&  :-(
  but ... svg file still conforms :-)

1737, Tue 20 Jun 2023 (NZST)  Back from Auckland (Wurlitzer Afternoon :-)

Tweeked rdd-to-svg.py, using w/h = 3/5 to get monospace width,
  rdd-to-svg.py now seems OK on monospace-text+line.svg,
  and although svgcheck grizzles about font-size and font-family properties,
  it finishes by saying: INFO: File conforms to SVG requirements.

To do:
 - Should rfc-draw-globals use rdd-io class to write rdd files?
     NO, it uses a dictionary of class object instances
       there's too much difference between them and what rdd-to-svg.py needs
 - Done  Sort out mapping from tkinter to svg for line, n_rect and text
 - Done Implement syntax-end markers on lines
 - Arrow on a line doesn't move when line's angle is changed
     Can't reproduce this ???
     

1535, Wed 21 Jun 2023 (NZST)

Found RFC2722, with example of ASCII ART diagram,
Drew RFC2722-TM-Architecture.rdd,
  rdd-to-svg does quite well with it,
    but text inside n_rects isn't centred!
  Also, font size for text in n_rects is smaller than for Text objects

Details of .rdd files
  n_rect objects: text is that of text centred inside the rectangle
  line   objects: text is option chars a/n for arrowheads, e/u for se_bars

Worked on rdd-to-svg.py to get texts properly centred in n_rects

  file:///home/nevil/rfc-draw/monospace-text+line.svg
  file:///home/nevil/rfc-draw/RFC2722-TM-Architecture.svg

1751, Thu 22 Jun 2023 (NZST)

Reworked rdd-to-svg.py to use style= SVG attribute in svgwrite.text.Text(),
  instead of in dwg.g (in earlier versions)
Also, "text-align:inherit" allows us to just write whole lines of text.
and "font-weight:bold" makes the text clearer in Firefox

1533, Fri 23 Jun 2023 (NZST)

Implemented Syntax-End markers, moved them down/right a little
Single-line n_rect texts are high of rectangle centre-line, fixed that
svg white space handling was closing up spaces, 
  added white-space:pre into t_style, svgcheck says cri-syntax.svg conforms :-)

To do:
 - document group implementation
 - document rdd-to-svg.py
 - develop rdd-to-ascii.py ?
 - find some more RFC diagrams ?
     saved the few from RFC 7996 work in rfc-draw/RFC7996-svg-diagrams
     None of those could be drawn with rfc-draw, alas :-(

1715, Sat 24 Jun 2023 (NZST)

Started looking (to doument) draw_groups_class
  found that (free) texts don't get moved by b1 (after double-b3)
Need to look further into draw_groups_class.py and draw_texts_class
  draw_texts should have move() to move a text ...

1531, Sun 25 Jun 2023 (NZST)

Made group-test.rdd;  simple group with 1 n_rect, 1 free text and one line
b1 move now moves the n_rect and line, but not the free text ???

group.move(), obj = <rfc_draw_globals_class.rdglob.n_rect object at 0x7f6cfeae6710>
group.move(), obj = <arrow_lines_class.a_line object at 0x7f6cfeae6770>
alc move = = =

Attempted to handle free-text move as special case in class group.move(),
  that didn't help :-(

1539, Mon 26 Jun 2023 (NZST)  Water leak in WC wall fixed!

Moving a group: b1-draw-edr, b3-double, b1 to move grouped objects
  now works, but the enclosing dashed rectangle dosn't move with it
  DONE, but now b1-click moves only the rectangle ???
Also, to do this, we have to handle text objects using canvas.move();
  should make an rfc-draw object so we don't need that special case <<<

1728, Tue 27 Jun 2023 (NZST)

Worked on draw_texts_ and rfc_draw_globals_ to create n_text objects
  and put them into objects[]
rfc-draw starts up OK, but crashes with
AttributeError: 'object' object has no attribute 'move'
group.move(), obj = <Key 1, Object <rfc_draw_globals_class.rdglob.n_rect object at 0x7f9868cda7a0>, Type n_rect, Group 1, In_n_rect 0>

Emacs: select region, then
  C-u C-x <tab> will shift 4 spaces. You can type a number
      after C-u to change 4 to anything else.

1514, Thu 29 Jun 2023 (NZST)

Decided it's too messy to add a new n_text object, reverted to versions of
  rfc_draw_globals_class.py and draw_texts_class.py

With 4 (group 8) [250, ... line in group-test.rdd,
  group loads properly, with n_text, line, text objects, AND their edr
  however, attempting to move the edr crashes,
Sorted that out, carried on testing with group-test.rdd
  Got it working for n_rect and text, but not line
Added move_line() to draw_lines_class.py,
  That isn't working yet, sigh :-(

1443, Fri 30 Jun 2023 (NZST)

Testing group move with all but one object commented out in group-test.rdd
  0 n_rect works OK, 2 line doesn't, 3 text works OK
Got move_line working properly for line within group :-)

changed key handling to use key b (bare line ends) instead of key u

To do: item 3, double-b1 to make copy (group) of a group (template)
 2 Use the group
    . In group mode, double-click b1 of the template
        this new group is a copy of the template, and can be moved on-screen
    . Objects in the new group will need different keys so as to
        distinguish them.  They'd also need a new group number
    . This seems like an awful lot of work, how useful would it be?
    * Could be better to have a group definition using relative coords,
        that way copies would all use the same set of relative coords

New rdd Example ...

 0 (group 1) 0 (id within group) (x0,y0, x1,y1 (actual edr coords),
 0    g-obj  1 (type key) coords (rel to x0,y0), text, group, g-type
 0	     ...
 0    g-obj  n  nth object in group
 1 (line 3) [434, 107, 434, 187, 571, 187, 571, 273] "a" 1 N
 2 (text 7) [395.0, 283.0] "Free text example" 1 N2 (line 3) 

Surely this can wait for rfc-draw.py version 1 !!!

Meanwhile (in version 0), can use Group mode to move a (section of)
a drawing around the canvas :-)

And now:
 1 rdd-to-svg.py -b 3 # leave a 3-px border around the .svg drawing
 2 rdd-to-ascii.py

Got rdd-to-svg to parse -b (3 px) and -b123 (123 px)
  We have the code to find min/max y/y for diagram,
  now must add code to move objects towards top LH corner

1625, Sat  1 Jul 2023 (NZST)

Decided to use group-relative coords for objects within  group.
Wrote rrd-rel-coords.py to convert .rdd file to .new-rdd file (with rel coords)
>>> assumed there's only one group (!= 0), that's OK for existing .rdd files

Objects in a group now use rel coords, must map those to screen coords <<<

1420, Sun  2 Jul 2023 (NZST)

Needed a tk colour chart, got tk-colour-chart.py from stackoverflow :-(

Can now move line within a group, but have to start moving group to see that <<<
Tried moving n_rect in the same way, works, but keep  n_rect outside edr !
    Need to workk out how to get screen coords for n_rect ihn group <<<

1642, Tue  4 Jul 2023 (NZST)

Can now load group-test.rdd, draw edr with b1, b3-double to make group,
  then can move whole group with b1  :-)
Now try Save as group-test+group.rdd
  5 (group 11) [139, 49, 197, 91] "N" 1 T
  0 (n_rect 1) [176, 141, 323, 214] "n_rect text" 0 N
  2 (line 3) [323, 51, 323, 131, 460, 131, 460, 217] "a" 0 N

=> need to save group members list, for group 1 in this case
  group 1 rdd lines: n   (member 1) n_rect 1 [g_coords]
                     n+1 (member 1) line 3 [g_coords]
		     ...
Added code to save_to_rdd() to write members list

=> Now need to read the group members back from rdd file
-> Also, replicate group using Delete/Insert to make copies

python3 rfc-draw.py group-test+group.rdd | tee xxx.yyy
  crashes <<<<<<<
  
1724, Wed  5 Jul 2023 (NZST)

Changed structures, now have classes
  template:  t_members (member coords rel to 0,0 i.e. top-left of edr)
  group:     edr coords, template nbr, zoom factor

In Group mode: b1 to draw edr, b3_double to make template and group
               b1_double to duplicate the group (using same template)  ??
	       then b1 to move a group

1717, Thu  6 Jul 2023 (NZST)

Reworked class template, now have up to 8 templates (rather than groups)
We want draw_groups_class to let us draw the template's surrounding
rectangle (edr), but that's not working ...
b1_click finds the nearest object, how did that work before (with groups) ??

1647, Fri  7 Jul 2023 (NZST)

Tried to make rfc-draw-30june directory, that (I think) was the last
  properly-working group draw and move version
Failed, but helped remember that 'move group' is in draw_groups_class.py,
  and edr_to_group() is in rfc_draw_globals.py

1710, Sat  8 Jul 2023 (NZST)

Worked on creating a template; we now do that in Group mode,
  with b_ events trapped in draw_groups_class.py
but b1_motion isn't updating it's edr coords !!! ???

1725, Sun  9 Jul 2023 (NZST)

More template work.  In Group mode, we can now draw a Template's edr :-)
  Do we need both new_template() and new_template_object() ???
  Same question for new_group() ???
Hmm, template edr is not being updated as we draw it

1722, Mon 10 Jun 2023 (NZST)

Template edr not updating doesn't happen until b1_raise, then we do it :-)
We now have b1 | b3_double finding (and setting) template members,
    then we crash

1738, Tue 11 Jun 2023 (NZST)

Sorted yesterday's problem, on to writing updated .rdd file
Reworked template handling, realised template must conitain object number
Now we write .rdd file with simple objects first, then templates.
  Now the t_members use object's tk indeces, i.e. indeces into self.objects :-)

1253, Sun 16 Jul 2023 (NZST)

Changed g_nbr to t_nbr in rfc_draw_globals, draw_groups/n_rects/lines/texts
Realised that b1-draw-edr | b3_double makes a template AND a group,
  we need to save all it's contained objects as part of that template!

To do:
 - make group as well as template 1, save as in (i.e. using) template 1
 - don't draw t1 objects on their own, only in their group(s)

1727 ...

Worked on edr_to_group; we're back to having edr as a group, rather than
a "template".  For this, the group's in_n_rect must be 0 !!!

We need group objects, they point to a template object
  group -> top-left corner, template -> coords inside edr

1702, Mon 17 Jul 2023 (NZST)

- templates have  tlc (top-left corner) coords for each t-member
- groups    have  t-nbr + screen coords for the group's tlc

Need to decide how to dump templates and groups,
  how to save them to .rdd files, and top restore tham from .rdd files

self.objects is a dictionary; can use tn for template keys, gn for group keys!

1718, Tue 18 Jul 2023 (NZST)

Working on groups vs templates ...

1654, Wed 19 Jun 2023 (NZST)

Have now written group-test-ggg.rdd
  This has template t1, used by group g1.
  also, the group rectangle is the same as it's edr :-)

To read in group-test-ggg.rdd, will need to keep track of
  how many templates and groups we have !

Again, how to create several groups using the same template?
  b1_motion draws edr (template boundary)
    < draw in td_colours
  b3_double makes a group using the edr template
    < replace template, draw group boundary in tl_colours
  b1_double to copy a group (using the same template)

But first, need to read group-test-ggg.rdd back in, to display it's group <<<

RFCs with diagrams  5755

https://authors.ietf.org/en/diagrams
asciiflow.com lets you draw ASCIIART diagrams directly

8340 YANG Tree Diagrams
9139 Information-Centric Networking (ICN) Adaptation to Low-Power Wireless
                    Personal Area Networks (LoWPANs)

1711, Thu 20 Jul 2023 (NZST)

Noticed that when drawing an edr with b1, then b3_double to shrink it,
  we're left with the initial single-pixel at top-left of unshrunk retangle!
Tried to undraw that, failed :-(

Hmm, in draw_groups_class.py  we have new_template(),
  that draws a single-point edr, creates a template using it,
    saves it in self.objects (key t_rect_id) and makes it self.current_object
We also have new_template_object(), it does the same ???

new_template() is called from b1_action()
new_template_object() isn't called at all, deleted it!

1537, Fri 21 Jul 2023 (NZST)

Fixed single-point edr problem, now we only draw/resize the edr in b1_move()
Now we use tk object nbr for group object, now dg_closest can find it :-)
Also, save as group-test-ggg.rdd makes a valid-looking .rdd file

To do:
- delete edr after we make it's group <- DONE
- test moving the group
- update read-rdd-file
- template coords are those of it's template edr; what should they be?

$ cat group-test-ggg.rdd 
root_geometry 800x600+5+5                       +-- group nbr
mono_font width 10.2 height 17 pixels           |
0 (n_rect 1) [252, 167, 399, 240] "n_rect text" 0 N
2 (line 3) [434, 107, 434, 187, 571, 187, 571, 273] "a" 0 N
3 (text 7) [395, 283] "Free text example" 0 N
4 (text 8) [475, 480] "Text not in a group" 0 N
5 (template t1) [250, 105, 573, 302] "T" 1 template
  (t1 member 3) line [184.0, 2.0]        |
  (t1 member 1) n_rect [2, 62.0]	 +-- template nbr
  (t1 member 2) text [2, 62.0]
  (t1 member 7) text [145.0, 178.0]
6 (group 10) [250, 105, 573, 302] "G" 1 group
                                      |
				      +-- group nbr
Moving the group:
  Current code (in class group,, and probably class template) doesn't work
  Look at rfc_draw_globals_class_OK_1552.py (from n-backup)
    for some clue as to how to do it !!!

1627, Sat 22 Jul 2023 (NZST)

Making a group - needs all the info group's: edr coords, member objects
  (object.key is their tk_id).
To move a group, we need to move all it's member objects

1701, Sun 23 June 2023 (NZST)

We now make a group object, including g_members list from an edr's template.
We need to draw it's objects, as well as it's edr <<<<<
  their tk_ids are kept in the group's g_members <--
  started by drawing the text; Free text example now in red,
    but also get n_rect text@@@ and Free text example@@@ in black ???

1700, Mon 24 June 2023 (NZST)

Template object has list of t_members, with template-relative coords
However, group object uses a template to get those
  t-relative (= g_relative) coords
Group object also needs the self.objects info, so that we can draw/move them !!!

1728, ditto

Made proper n_rect object for g_member, now can move both texts and n_rects :-)
However ..
 - they start overlapping each other (as expected)
 - moving the edr left/roght increases their horizontal spacing
 - ditto for moving up/down
Maybe we're computing relative->screen coords twice ???

1725, Tue 25 Jul 2023 (NZST)

Decided we don't need templates at all, worked on removing them from source!
Now in draw_groups_class.py, when we get to "Nothing drawn yet",
we call new_group() so that we can draw the group's edr.
So far, so good, but we'll need to work on edr_to_group() to change
  it from using template to use gropup instead <<<

1730, Wed 26 Jul 2023 (NZST)

Rworked g_member, it now has a tk_id for it's object
Can now draw edr, shrink it (b3_double), and move the edr and it's
  enclosed n_rect and text.
Original object remains in self.objects[],
  a group's members move together, using their own tk_ids
Need to delete each orignal object, and replace it with it's (new) g_member <<<
  Attempt to do that for n_rect didn't work, sigh :-(

1736, Thu 27 Jul 2023 (NZST)

Realised that each g_member needs an oo_key, the key for the original object,
  before edr_to_group() added it into the group
It also needs g_tk_id, used to locate/move the member,
    set when the member is first drawn
  Can be set to 0 to undraw that member!

1723, Fri 28 Jul 2023 (NZST)

edr_to_group() now works for free text and line (a_line) objects inside the edr
It does that by just grabbing the original object, and moving it into the group!
Alas I  haven't managed to make it work for n_rects :-(

1736, Sat 29 Jul 2023 (NZST)

Used traceback,print_stack() to confirm that g.move() is being called twice;
  that's because the n_rect is included in the groyp members list twice!

1217, Sun 30 Jul 2023 (NZST)

Aha! draw_groups_class.py | find_surrounding_group() wasn't always checking
  that text objects had in_in_rect == 0, fixed that
Noted that in group-test-iii.rdd, g1 members have screen coords,
  we only need tlc (edr's x0,y0) coords <<<

1209, Mon  1 Aug 2023 (NZST)

Changed save_to_rdd() to write rel_x,rel_y for g member lines in rdd.
Tweaked restore_group() to read back g_member (edr) coords properly,
moved draw_group_edr() to rdg so we can call it from restore_group.
>> Can't move the group when it's restored yet, 

1735, ditto

Can now move the restored group's edr, but not it's objects
Worked on restore_group() and populate_groups()
>> not working yet, can't just scan objects[] looking for g_nbr,
   need to use g_members list to find them <<

1725, Tue  2 Aug 2023 (NZST)

Worked on save-to-rdd() and read_from_rdd()
Need to read non-group records first, so we can restore them to self.objects
  each non-group object needs a list of groups it's in, initially 0
Then read group records, and add their g_nbr into each g_members groups list,
  e.g. 123 mean "in groups 1, 2 and 3"  ???

1212, Wed  3 Aug 2023 (NZST)

Worked on restore_group() and populate_groups() once again,
  they now write and restore .rdd files,
  
1637, Thu  3 Aug 2023 (NZST)

Tidied up lots of things!
 1 read group-test.rdd, group b1, b3_double makes group, all objects move in edr
 2 save as group-test-aaa.rdd works properly (writes g1 member records OK)
 3 read -aaa.rdd works, (group displayed), all objects move in edr
   BUT, for group.move()
   ! move a "text" works using  self.drawing.move(gm.g_object.key,
       but doesn't work using  self.drawing.move(gm.g_tk_id, dx,dy)
       Tweaked code to set text g_member's g_tk_id same as it's oo_key
 - read -aaa.rdd, then save as -bbb.rdd
     diff group-test-bbb.rdd group-test-aaa.rdd says theyre the same :-)

1050, Fri  5 Aug 2023 (NZST)

Realised that rfc_draw_globals on_key_press traps 'c' to call copy_object(),
  but for a group, that only copies it's edr, into new group 0 ?
  >> need to copy group's objects as well, into group 2 <<

ditto, 1713

Failed to get on_key('c') to copy a group, sigh :-(
Need to work out (and document) the sequence on actions needed to do this


1709, Sat  5 Aug 2023 (NZST)

Steps 1 and 2 above work properly
Tried to trace through copy_object('group') code by printing group g_members,
  fixed object() calls in *class.py, I'd added an initial_text parameter!
Our test group has 3 objects - hence 3 g_members -
  but it gets a fourth g_member added . . .
    haven't worked out why/where, sigh :-)

1645, Sun,  6 Aug 2023 (NZST)

Worked on copy_object | group()
b3_double draws group 1 (key 9. and key 10, group 1's edr).
Click on that, then 'c' draws edr for group 2 (key 11, group 2's edr)
  but group 2 has no members
Added code to add (and draw) each g1 member to g2, not working yet :-(

1219, Mon  7 Aug 2023 (NZST)

Worked through places where g_members are copied,
  copy_object appended an object key, rather than a g_member object!
Fixed that, now copy group (sort of) works, but
 a. Only one copy of the group is displayed
 b. It's edr changes to a small square near upper left of group,
      now there are two such 'edr squares'
 c. b1 down in either such square moves the displayed group

1705, ditto

Getting closer!  b (above) seems to have gone
b3_double, c now copies group 1 (brown) to show new group 2 (red),
  with the text (Free text example) drawn in it (in correct rel position)
But c (above) has changed - dragging either group moves it, with it's text
  but it also moves the original (group 1) n_rect and text !!!
Saved as cat group-test-after_cg.rdd
  group lines appear first, the g1 member lines (with r_coords)
  and then more g1 member lines (with different r_coords)
  >>> We want each group followed by it's members!

1555, Tue  8 Aug 2023 (NZST)

b3_double, c, save as group-test-after_cg.rdd now works properly :-)
BUT objects not draw in new group get moved as part of either group!
Added code to draw n_rect in group; coords not right,
  n_rect and line move along with text in group 1 (brown edr)
    but original n_rect stays put on screen
  worse, group 2 (red edr) also moves n_rect and line

1735, ditto

Worked on copying n_rect g_member.
  Need to decide how to handle an n_rects two tk_ids <<
  Original n_rect stays in group 1, and moves with it,
  copied n_rect is drawn, but doesn't move with group 2 ???

1734, Wed  9 Aug 2023 (NZST)

Attempting to get copy_group() working properly.
A bit earlier, I made min-ghroup-test.rdd, with only a text in the group
  rfc-draw.py min-group-test.rdd  works fine, but
  rfc-draw.py min-group-test-4g.rdd  gets into a recursive loop, sigh
I broke that loop in __str__() for class group,
  but haven't worked out why it's happening  :-(

1615, Thu 10 Aug 2023 (NZST)

Sorted out recursive loop; was trying to print an object, that doesn't
have a group object inside it!
Changed it's 'gn' field to 'g_nbr'm, that *is* it's group number :-)

Commented out groups 3 and 4 from min-group-test-4g.rdd,
Now, why doesn't group 2 (red) show the "Free text example" text?

Made min-group-test-2-texts.rdd
  g1 member 1 and g1 member 2 lines (i.e. two text in grouyp)
  Can read and display it.
Click near corner of new group, can move it's edr,
  but not it's (two text) objects  ???

1702, Fri 11 Aug 2023 (NZST)

At last! Got those two texts to move, but at twice the rate they should
In draw_groups_class.py, texts don't move without ...
    elif self.rdg.region == self.rdg.middle:  # Existing group
       go.move(dx,dy)  # Doesn't move without this <<<
Ditto in rfc_draw+globals for ...
                       if mo.o_type == "text" and mo.in_n_rect == 0:
                           self.drawing.move(mo.key, dx,dy)  # No move without this
Trace variable gm_count in draw_groups_class.py, didn't help, alas
Need to find out dx,dy from draw_groups, and compare it to dx,dy in r_d_glocals!

1524, Sat 12 Aug 2023 (NZST)

Fixed yesterday's problems.  In draw_groups, b1_motion() testx cursor region;
  new   (10) expands a new edr, tl to lr
  middle (4) calls current_object.move, i.e. go.move(dx,dy)

Made group-test-texts+line.rdd  no groups yet
and  group-test-texts+line+g.rdd  has group 1
        2 texts and a line move as parts of group 1 :-)

NOTE: Had problems drawing the test line for these, draw_lines.py needs work <<

Made n_rect_group.rdd added code to group.move() for n_rect, that works

Made group-test-texts+ln+nrect.rdd (has 2 texts, 1 line and 1 n_rect)
  group.move() works for that too :-)

b1_click inside g1 corner copies it's edr, but not it's objects <<<

Looking at the xxx.yyy output, copy_g_member() isn't working properly.
  The group members are a list of objects[] keys,
    and objects[] members all have screen coords, g_members group-rel coords
  We need to map oo_coords (screen) to or_coords (relative to oo's start x,y),
     then map that to new_g_m (screen) coords by adding
       edr's start x,y and gm-s rel_coord (x,y)

1654, Sun 13 Aug 2023 (NZST)

Made single-text-group.rdd, one "Example Text" at [438,270]
Enclosed in group[ 1, edr [372, 251, 503, 289],
  member 1 text at [65,19]  <-- edr-rel
Realised that restore_object() wasn't computing rel coords
  or group member objects; fixed  that :-)

Now and read in single-text-group.rdd, and 'c' draws group 2's edr
  at offset 40, but 'Example Text' is drawn below and to right of that edr!

1451, Mon 14 Aug 2023 (NZST)

Realised there are two places where we had code for draw_group()!
  draw_group() and
  copy_g_member()  <== commented this one out!
  
Sorted out transform_coords(), now we get in-group texts drawn inside the group
Now, clicking in the old (brown) group lets us move group 1,
BUT clicking in the new (red) group also moves the group 1 text <<<
Looking at draw_groups.py
  dg_closest(): finds group1 or group 2 OK, and sets current_object
  
Question: Class g_member has a g_tk_id (key) attribute (so we can look it up),
	    and a g_object attribute.
          check that g_object really is always an object <<<

1313, Sun 20 Aug 2023 (NZST)

Worked on copy_g_member(), getting closer.
Group members (old and new) need separate tk_ids !!!
  Other group member properties (e.g. text and original coords)
    can refer back to their entries in objects[]

1651, ditto

python3 rfc-draw.py single-text-group.rdd,
click on group 1, then on_key('c') copies group 1 to make group 2.
click on group 1 again, can move it, with it's text (group 2 text doesn't move)
click on group 2, can move it's edr, but that moves group 1 text !!!!

1612, Mon 21 Aug 2023 (NZST)

Realised that we need an objects[] entry for every object in each group,
  with their own tk_ids and g_members; implemented that.
Testing using gt-21Aug.rdd, 'c' shows that can move each group independently
  edrs: group 1 is brown, group 2 red
  text: group 1 is red, group 2 is black,
          and a long way down and to the right <<<<

1721, Tue 22 Aug 2023 (NZST)

Worked on new_g_member_object(ncgo, old_gm),
  now 'c' copies group as expected :-)
However, we also have copy_obect() | group,
  that calls copy_g_member() to add group members to the newly-copied group;
  it does that by calling new_g_member_object() to make new (tk) objects
    for it's group members

0948, Wed 23 Aug 2023 (NZST)

Testing multiple copies of groups, works OK :-)
  'c' to copy text does too, HOWEVER ...
  'c' to copy n_rect doesn't copy it's edited text <<

Worse, drawing lines doesn't seem to work properly now ???

To do:
 1. Sort out line drawing  # DONE (new parameters were added to class object)
 2. Fix copy n_rect (above)  # DONE Thu 24 Aug
 3. Copy line group members
 4. Copy n_rect group members
 5. 'group' object has no attribute 'delete'

1726, ditto

Looked at 'b3 to edit text'
  edit_text_object() opens the edit window,
    remembers self.text_id (tk id for the text)
  edit_esc_key gets new_text from window, moves it to centre the text,
    then changes the text_id (tk object) to put the new text into place
We also need to update it's entry in objects[] <<<

1517, Thu 24 Aug 2021 (NZST)

Fixed edit_esc_key as noted yesterday.  Now we don't actually use
  self.centre_text for anything
Worked on drawing an a_line for a g_member -
  draw a line, b3-double, 'c' doesn't draw a line in group 2,
  but the line moves with either group 1 or group 2 <<<

1707, ditto

Need to make a new line object (a_line) for the g2 line
  restore_line() should do that ?
dlc.draw_lines.start_new_line(self, coords, rdg)
  makes a new a_line, but doesn't draw it
  need to set it's options (from old_gm.
    then a_line.draw_line() (to get it's tk id)
    and undraw_line() ???

1705, Sat 26 Aug 2023 (NZST)

Changed to use restore_line() in new_g_member_object()
Works, but the drawn group 2 line overlays the group 1 line,
  and neither line is inside either group edrs !!! ???

1449, Sun 27 Aug 2023 (NZST)

Changed back to just creating new line object in new_g_member_object(),
  that now works properly

group rdds:
  texts-in-nr-and-g.rdd  3-kinds-of-text.rdd
  2-texts-group.rdd
  line-group.rdd  n_rect-group.rdd
  group-test-texts+ln+nrect.rdd

Worked on n_rect g_member
  n_rect+2-texts-group.rdd     A single n_rect, with text's above and below
  n_rect+2-texts-group-2.rdd   A group containg those

new_g_member_object(self, ncgo, old_gm)
  makes a new object, returns it's key in objects
  for a text, it's a text id; for a line it's a line id
  for an n_rect, we return a copy of the n_rect object,
    and test for it using isinstance(n_obj_key, self.n_rect)

With n_rect+2-texts-group.rdd,
  group, b1 draw edr, b3_double makes group 1, can move it ok
  'c' draws group 2 edr and the n_rect (in correct locations), but no texts

1446, Mon 28 Aug 2023 (NZST)

line-group.rdd, 2-texts-group.rdd n_rect-group.rdd  OK

TLBR.rdd has text TL and BR and an n_rect in it's centre
'c' then Save as TLBR-qqq.rdd gives
0 (text 1) [327, 257] "TL" 0 N
1 (text 2) [569, 397] "BR" 0 N
2 (n_rect 3) [99, 123, 257, 175] "text in n_rect" 0 N
6 (text 7) [80, 81] "TL" 0 N
7 (text 8) [322, 221] "BR" 0 N
8 (n_rect 9) [374, 293, 532, 345] "text in n_rect" 0 N
4 (group g1) [272, 198, 623, 456] "G" 1 group
  (g1 member 1) text [55, 59]
  (g1 member 2) text [297, 199]
  (g1 member 3) n_rect [-173, -75]
5 (group g2) [25, 22, 376, 280] "G" 2 group
  (g2 member 7) text [55, 59]
  (g2 member 8) text [297, 199]
  (g2 member 9) n_rect [74, 101] <<<< should be n_rect 9 ????

1439, Tue 29 Aug 2023 (NZST)

Testing TLBR.rdd, as above
Looks OK, but moving group 1 (brown edr) moves group 2 n_rect
          and moving group 2 (red edr) moves group 1 n_rect !!!

Trying n-rect.rdd
  On draw_groups edr_to_group we have (as of yesterday)
      es = 10  # Edge space
      eo.coords(x0-es,y0-es, x1+es,y1+es)
    That allows user to click in edge space to select the group
  Created n_rect-in group.rdd; an n_rect in a group 1

nr-in-g1.rdd is a group with one n_rect member, can move it around
  'c' that copies the 1-n_rect group to g2, can move that around too,
  saved as nr-in-g1+g2.rdd
python3 rfc-draw.py nr-in-g1+g2.rdd lets us move g1 properly,
  but moving g2 only moves it's edr ???

1621, Wed 30 Aug 2023 (NZST)

Made new version of nr-in-g1+g2.rdd ...
root_geometry 800x600+5+5
mono_font width 10.2 height 17 pixels
0 (n_rect 1) [406, 329, 570, 405] "text in n_rect 1" 0 N
4 (n_rect 3) [187, 120, 351, 196] "text in n_rect 2" 0 N
6 (text 7) [127, 369] "--7--" 0 N
2 (group g1) [362, 291, 631, 432] "G" 1 group
  (g1 member 1) n_rect [44, 38]
3 (group g2) [143, 82, 412, 223] "G" 2 group
  (g2 member 3) n_rect [44, 38]

This works properly

python3 rfc-draw.py nr-in-g1.rdd | tee xxx.yyy  # loads one nr in g1
group, 'c' copies it, can move both groups properly
but Save it as nr-in-g1+g2.Wed.rdd  produces
0 (n_rect 1) [510, 366, 674, 442] "text in n_rect" 0 N
2 (n_rect 3) [158, 162, 322, 238] "text in n_rect" 0 N
4 (group g1) [466, 328, 735, 469] "G" 1 group
  (g1 member 1) n_rect [44, 38]
5 (group g2) [105, 131, 374, 272] "G" 2 group
  (g2 member 5) group [44, 38]
             ^ should be 3 !!!

1706, Thu 31 Aug 2023 (NZST)

Made nr-in-g1+g2-1700.rdd  Looks as if it should work,
  but python3 rfc-draw.py nr-in-g1+g2-1700.rdd doesn't move n_rect 2 ~!@#$%

Thought for the day:
  g_member needs the member object's actual tk id (so it can work with it)
  but in write_to_rdd()'s g member lines, we need it's original tk id
  (so every group gets a copy of the same object)

1122, Fri  1 Sep 2023 (NZST)

python3 rfc-draw.py nr-in-g1.rdd | tee xxx.yyy
'c', then gedit xxx.yyy
Follow through making new n_rect and it's text,
  need to keep working through that :-(

1610, Sat  2 Sep 2023 (NZST)

load nr-in-g1.rdd, group 'c', save as  nr-in-g1-2Sep1711.rdd, rdd looks OK
Group 1 moves OK, but group 2 we only move it's edr ???
  (however, we can move it's n_rect in Rectangle mode)
Looking at nr-in-g1-2Sep1711.rdd, it had the (gx member tk_id) lines
  followung their (group gn) lines.
Edited nr-in-g1-2Sep1711.rdd to have them togeth er an end of file,
  that didn't help :-(
Need to look at how read_from_rdd() handles the member lines <<<

1722, Sun  3 Sep 2023 (NZST)

Realised that read_from_rdd() assumes object tk id's being read will be
the same as when they were written to an rdd file.
That's not neccessarily true; decided to build dict of old->new
  object tk_ids in read_from_rdd().

1555, Mon  4 Sep 2023 (NZST)

Got old->new object identifers dict working properly.
Can now copy, save and restore groups.
>> edited-groups.rdd is a complete example; inside groups we can eedit texts
  (in Text move), and resize and re-position n_rects.
Such edits are saved properly when written to a new rdd file :-)

Started on allowing user to resize group edr;
  need to work through b1_ handling code in draw_groups.py more carefully

1649, Tue  5 Sep 2023 (NZST)

Can now resize a group's edr,
  draw n_rect, Group, enclose in edr, b3-double, drag out corners,
  save as expanded-edr.rdd, can read it in again OK :-)

Made diagrams directory, collecting example diagrams there as .rdd (and .svg)
  files.

1045, Wed  6 Sep 2023 (NZST)

Implemented Group 'u' to undo a group (leaving it's objects active on-screen)
rdd files: group-line-test.rdd, ungrouped.rdd

To do: implement read_in_rdd program for rdds with groups

1708, Thu  7 Sep 2023 (NZST)

Got python3 rdd-io-test.py group-line-test.rdd working,
  it's dump_objects() output matches exactle with group-line-test.rdd :-)

Started looking at python3 rdd-to-svg.py  group-line-test.rdd
  problems with parsing command line

1512, Fri  8 Sep 2023 (NZST)

Fixed above problem.
python3 rdd-to-svg.py RFC2722-TM-Architecture.rdd  works to make .svg
  svgcheck RFC2722-TM-Architecture.svg says "File conforms to SVG requirements."
Ditto for monospace-text+line.rdd
Ditto cri-syntax.rdd
n_rect+2-texts-group-2.rdd  has 2 groups, it also works :-)

Need to tidy up code fo rfc-draw, and put it on github !!

Started on rdd-to-ascii.py ...
Read in objects, we have min/max x and y in pixels, * by font_width (10.2),
  now to decide on px -> chars mapping
    try round(px / font_width) ??

1545, Sat, 9 Sep 2023 (NZST)

>> Aargh, my WD 2 TB portable hard drive (N-disk) has failed !!!
>> Ordered a new one from pbtech, deliver to 18 Wembley Place

1743, Sun 10 Sep 2023 (NZST)

Remembering how to run svgcheck for Jay Daley:
  email 12/2/21 from Jay
run-svgcheck.js is in ~/ISE/Design-Team
  you have to edit that to specity the svg file to check, then\
nodejs ~/ISE/Design-Team/run-svgcheck.js
  Not an improvement on just running svgcheck test-file.svg

RFC 7996 says you can test an svg file against an rnc schema using jing.
New directory to do this in ~/rfc-draw/rnc
Pulled SVG-1.2-RFC.rnc out of 7996,
  started on strip-page-breaks.py

1548, Wed 13 Sep 2023 (NZST)

RFC 7996 says you can use jing to "test
   whether SVG file diagram.svg is a conformant SVG 1.2 RFC drawing."
   jing -c SVG-1.2-RFC.rnc diagram.svg

In rfc-draw/rnc:
  Made strip-page-breaks.py.  Extracted SVG-1.2-RFC.rnc fromm rfc7996,
  Found inkscape-drawn-arrows.svg in ~/ISE/Design-Team on old nebbiolo
  jing -c tweaked.rnc ../RFC2722-TM-Architecture.svg
    prints warnings, but no errors (can't find a way to turn warnings off)
  jing -c tweaked.rnc inkscape-drawn-arrows.svg
    throws up lots of error: messages
Now in rfc-draw
  Have SVG-1.2-RFC.rnc
  Now use jing -c SVG-1.2-RFC.rnc cri-syntax.svg to check svg :-)
    RFC2722-TM-Architecture.svg, monospace-text+line.svg, group-line-test.svg,
    n_rect+2-texts-group-2.svg, edited-groups.svg and cri-syntax.svg
  are all OK :-)

Worked on rdd-to-ascii.py, setting up an x*y array of blanks to draw in

1728, Thu 14 Sep 2023 (NZST)

Got draw_texts() in rdd-to-ascii.py to work, looks OK
Couldn't get draw_lines() to work, need to work harder on x/y scaling to lbuf[c,r]
Also need to write code to plot the lines <<<

1725, Fri 15 Sep 2023 (NZST)

Implemented draw_lines(), that looks OK for now
Tweaked draw_text(), that also look (sort of) OK.
  However, asc-atl.rdd looks fine using rfc-draw,
    n_rect+2-texts-group-2.rdd also looks OK (we're not  drawing n_rects yet),
    but asc-atl.txt suggests that it's text block should be smaller in scale
      relative to the three lines (which look OK) ???
    Need to look at text block positioning <<<

1648, Sat 16 Sep 2023 (NZST)

Got rdd-to-ascii.py working properly (drawing texts, lines and  n_rects)
for RFC2722-TM-Architecture.rdd :-)

In rnc, we now have rnc-from rfc7996.rnc (the last section of RFC 7996)
and SVG-1.2-RFC.rnc (ditto with page breaks removed)
We can test an svg file using
  jing -c rnc/SVG-1.2-RFC.rnc RFC2722-TM-Architecture.svg
    -> 3 warnings, no errors
  cri-syntax.svg is also OK

rdd-to-ascii.py cri-syntax.rdd now writes it's output to file cri-syntax.txt

python3 rdd-to-ascii.py cri-syntax.rdd makes a good try;
  it maps from x 81-938, y25-554 to col 1-85, row 1-32

The original doesn't have enough vertical spacing to map well to ASCII;
  we need enough height in the n_rects to map to 3 lines.
Tried making boxes on lower part bigger, in cri-syntax-2.rdd
  Better, but hard to guess -draw size that maps to 3-line rectangles
    (syntax-2 gets 1x 6 (path), 2x 4 (discard, authority) and 3x 5 

As well, there are some odd artifacts, need to work through these <<<

1721, Sun 17 Sep 2023 (NZST)

Added debug code to rdd-to-ascii.py, to work out which objects weren't
  being drawn properly
Reworked cri-syntax.rdd, getting to cri-syntax-2e.rrd
  .txt version looking better, but not all line segments are being drawn :-(

1651, Mon 18 Sep 2023 (NZST)

Getting closer to making a good cri-syntax.txt
Vertical lines up are missing starting +, and first few edge bars
Vertical lines down are missing end + or start +
Need to prevent - or | from overwriting + <<<

1557, Tue 19 Sep 2023 (NZST)

Sorted out rdd-ro-ascii.py, can now draw cri-syntax-2f.txt OK
  (program adds blank header and trailer lines, and 1 blank col at RHS
  Result looks good, you can edit the text in n_rects to centre them better!

Worked on diagrams/rfc3924-Intercept-Architecture.txt
  rdd-to-asc gets left lines wrongly drawn as right
>>> needs a little more work !!!

1712, Wed 20 Sep 2023 (NZST)

Sorted out problems with rdd-to-ascii.py, in example-diagrams we now have
  RFC722-TM-Architecture, cri-syntax-2f and RFC3924-Intercept-Architecture

Back to checking our svg files ...
  problems with style elements !
  RFC7996 says font-family, font-size and font-weight are allowed, 
  svgcheck doesn't like white-space:pre, removes it, File conforms :-)
  Alas, jing grizzles about "style" not allowed, so can't test using jing :-(

1522, Thu 21 Sep 2023 (NZST)

Removed ", style=self.t_style" from self.dwg.add((svgwrite.text.Text()
  in draw_text function.
jing  -c  rnc/SVG-1.2-RFC.rnc 
  svgcheck says "INFO: File conforms to SVG requirements.",
  and doesn't need to change anything :-)

1633, ditto

Realised that we have to use style in draw_text(),
  so as to get monospace font, alas :-(
Still svgcheck still says "INFO: File conforms to SVG requirements."
  and (of course) jing -c still complains about it

1438, Fri 22 Sep 2023 (NZST)

Playing with monospace-text+line.rdd -
  without white-space:pre  runs of blanks are condensed into a single blank
Fixed that with find_words(), draw_text() now draws each word in it's correct position :-)

In rdd-to-ascii.py, realised that text coords are their object's centre,
we need to know the text width so we can work out how manuy cols they'll
need.  Started on that by adding t_width as an attribute of rdd objects ...

Something's not right with either rdd_io.py or rdd-to-svg.py
It look as though we're not getting text strings broken as expected by line-feeds
  (e.g. "line 1\nmline 2\nline 3")

1232, Sat 23 Sep 2023 (NZST)

Used rdd-io-test.py to check that text is handled correctly
Worked on rdd-to-svg.py to get text propperties set correctly, using
  examples from https://pythonfix.com/code/svgwrite-code-examples/

1508, ditto

Using monospace-text+line.svg, decided that f_width 10.55px, f_height 17px
  work well for TkFixedFont.  Changed mono_font width in save_to_rdd()

Now example-diagrams directory has .rdd and .svg for
  monospace-text+line, RFC2722-TM-Architecture,
  RFC3924-Intercept-Architecture and cri-syntax
All get no errors reported by  jing -c rnc/SVG-1.2-RFC.rnc cri-syntax.svg :-)

Trying rdd-to-ascii.py, the last three .txt files are (sort of) OK
  (clearly rounding to text col/line is a rather coarse rendering)
We can tweak the drawings to improve the .txt rendering,
  or just edit the .txt files
However, the first (monospace-text+line) seem squashed into too small a width;
  need to fix that :-(

Back to work on: rdd-to-ascii.py monospace-text+line.rd
we get ...
xr 800, yr 600,  f_width 10.55 f_height 17.00
===================================================
>>> text x incr by 269 px
>>> text x decr by 269 px
x 436 to 974, y 74 to 0  <<< 974, but screen is only 800x600
                  <<<< min_y > max_y ?????????????
asc_filename monospace-text+line.txt,border 1,font_width 10.55, font_height 17
x 436 - 974, y 74 - 0
 >> c_min 1, r_min 1
 >> c_max 52, r_max -6 <<<<<<<<<<<<<<<<<
$$$$$ n_chars 64, n_lines -4  <<<<<<<<<<<

1113, Sun 24 Sep 2023 (NZDT)

Realised that in an rdd file, root-geometry only sets the rfc-draw window size!

Made test-font.py to find font width.
  That works, using font = tkinter.font.Font(family="TkFixedFont")
    so that we can use font.measure(s) and font.metrics("linespace")
  BUT we can only use fx_font = "TkFixedFont" to set size in Text widget!

1559, Mon 25 Sep 2023 (NZDT)

Sorted out rdd-to-ascii.py, it now centres lines in a block of text,
uses f_width from Drawing info (in .rdd file),
and gets the borders right (all lines the same length).
We now have monospace-text+line (.rdd,.svg and .txt) in example-diagrams

1737, ditto

Decided that n_rect texts need to be centred inside their rectangle.
Implemented that in draw_n_rect();  needsmore work, sigh :-(

1646, Tue 26 Sep 2023 (NZDT)

Sorted out problems with rdd-to-ascii.py, trimmed out
  non-useful print() statements
cri-syntax.rdd, svg and txt copied to example-diagrams

looking at .txt versions in example-diagrams,
  monospace-text+line, cri-syntax,
    RFC2722-TM-Architecture and RFC3924-Intercept-Architecture
  all look reasonable
One can tweak the drawing on-screen to improve the .txt rendering,
  but it's probably better to draw it so as to get the best .svg rendering.
The make the .txt rendering, and edit that to improve it :-)

We also have a copy of SVG-1.2-RFC.rnc in example diagrams,
  jing -c *.svg finds no errors in any of the .svg files

What next?  Thoughts ...
  - write a "what's rfc-draw all about" note
  - improve rfc-draw-manual.txt
  - Delete key action needs to be improved;
      is it enough just to delete whatever's under the cursor,
        or do we need to click on it first?
      (should only delete objects matching current mode button <<<)
  - get current version of rfc-draw.py and it's draw-*.py support routines
      onto github as version 1.0
  - add 'Help' button to rfc-draw, to display on_key actions
  - find a few more examples to draw?

1651, Thu 28 Sep 2023 (NZDT)

Worked on markdown: rfc-draw/distrib/read-this-first.md
sudo snap install dillinger --beta  # md editor
  dillinger has quirks ;-(
  it's simpler to just create a .md file, then use pandoc
    (as I did for the py-yaml/RIPE article)

sudo apt install pandoc
pandoc -f markdown read-this-first.md > read-this-first.html  # Works fine

1024, Fri 29 Sep 2023 (NZDT)

Made rfc-draw-29sep directory
python modules used by rfc-draw:
  os.path, re, sys, termios, traceback
  tkinter.font, math, inspect, svgwrite

1213, Fri 29 Sep 2023 (NZDT)

Tweaked rdd-to-asc.py to check that rdd filename ends in .rdd,
  and to write the .txt file in the directory rdd_to-asc is executed in
Made rfc-draw-29sep sub-directory, a minimal set of rfc-draw python programs
Removed (or commented out) most print() statements from those programs

On github, had problems logging in
  Reset the password for nevil.brownlee@gmail.com
Uploaded all the python programs in rfc-draw-29sep to github rfc-draw :-)

1614, Sat 30 Sep 2023 (NZDT)

line sub-modes: (rdg.ln_mode "line", sub_modes in draw_lines.ln_mode)
  click far from a line -> "new_ln"
  near an existing line -> "exist_ln"
  near a line's end -> "end_seg"
  near internal junction -> "move"

1441, Sat  1 Oct 2023 (NZDT)

Tweaked draw_lines_class and arrow_lines_class
In rfc_draw_globals_class, unbind a,n, e,b, f,r (used only by draw_lines_class)
  Can now set and un-set arrows and syntax-end-markers only while in Line mode

Tweaked display_msg() to support m_text tags "normal", "warning" and "error"

To do
 - implement 'u' in draw_groups_class  DONE
 - check that other buttons unbind / bind as they should  DONE
 - implement <Pg Dn> to clear message area  DONE
 - go on testing with RFC5755 (Updates 3281)

1721, Mon  2 Oct 2023 (NZDT)

Fixed yesterday's To Do items, back to RFC5755-AC-Exchanges.rdd
  Oh, oh, line drawing doesn't quite work as rfc-draw=manual says it should!
  Can make a multi-seg line OK, can extend from each of it's ends
    but clicking at middle of segment just moves the whole line :-(

1724, Tue  3 Oct 2023 (NZDT)

Fixed "clicking at middle of segment" problem above,
  Commented 'was "move" or "modify"' in draw_lines_class ?

Worked on Delete/Insert handling.  n_rect and text objects work OK,
but lines don't have lbd set in arrow_line_class.py ???

1705, Wed  4 Oct 2023 (NZDT)

Hmm, Draw 1-segment line, then Delete key gets
  Deleting ><Key 1, Object <arrow_lines_class.a_line object at 0x7fd6069a5660>,
      Type line, I_coords 0, G_nbr 0, In_n_rect 0>< (line)
                          ^ !!!  No coords or text in the line :-(
      a_line doesn't have i_coords set up (
         but doesn't say "no attribute i_coords")

1220, Thu  5 Oct 2023 (NZDT)

Changed draw_lines_class.py to update current_object in ln_b1_release()
Made Del+Ins-test.rdd to test Delete/Insert for n_rects, lines and texts

Completed RFC5751-AC-Exchanges.rdd
Realised it has a Text with quotes (") in it, worked on escaping those
  on writing to/reading from .rdd files  <<< not working properly yet

1536, Fri  6 Oct 2023 (NZDT)

Sorted out texts containing quotes.
Also tweaked text_edit_key() so as not to justify lines starting with a blank

Need to work out how to make a subdirectory in github (for example-diagrams)

1700, Sat  7 Oct 2023 (NZDT)

Managed to create an example-diagrams directory on github
  Create the directory by uploading a file for it to main branch
    RFC2722-TM-Architecture.rdd 
  then rename it to example-diagrams//RFC2722-TM-Architecture.rdd

renamed cri-syntax* to draft-ietf-core-href-12*
github example-diagrams now has .rdd, .svg and .txt files for
  draft-ietf-core-href-12,  RFC2722-TM-Architecture,
  RRFC3924-Intercept-Architecture and FC5755-AC-Exchanges

Github:
  to delete a file: click on it, press [..] 'more file actions', delete file

directory to-git has the rfc-draw files set, uploaded at about 1655 today

Oops, Github/nevil now has RFC3924* in main,
  haven't been able to rename them yet

1729, Mon  9 Oct 2023 (NZDT)

Set up local git repository:
git init
git add rfc_draw_globals_class.py
...
git add draw_n_rects_class.py
git ls-files
  draw_groups_class.py
  draw_lines_class.py
  draw_n_rects_class.py
  draw_texts_class.py
  r_buttons_class.py
  rdd-to-ascii.py
  rdd-to-svg.py
  rdd_io.py
  rfc-draw.py
  rfc_draw_globals_class.py
git config --global user.email "nevil.brownlee@gmail.com"
git config --global user.name "Nevil Brownlee"
git remote add origin  https://github.com/nevil-brownlee/rfc-draw
git push -u origin master

git push origin master
Username for 'https://github.com': "Nevil Brownlee"
Password for 'https://"Nevil Brownlee"@github.com':   Use token above
git push origin --tags
Username for 'https://github.com': "Nevil Brownlee"
Password for 'https://"Nevil Brownlee"@github.com':   Ditto
Everything up-to-date  :-)

Usercode and password in pwsafe for Gthub token

Now need to work on "how tu use rfc-draw" documentation ...

1703, Tue 10 Oct 2023 (NZDT)

Removed "Don't centre line starting with " " in rfc_draw_globals
Added code in save_to_rdd() to create the target directory
  before opening it for 'w'
Checked that you can Save to xxx-test/rect+centred+text.rdd,
  then open that filename again :-)

git add example-diagrams/RFC5755-AC-Exchanges.*
git add rfc_draw_globals_class
git commit -m "Fix justify(), allow directory in save filename"
git push

Should look again at github.com,
check that everything there is the latest version ...

1203, Wed 11 Oct 2023 (NZDT)

git diff  lists changes to files in local repo

1733, Thu 12 Oct 2023 (NZDT)

Editing rfc-draw-manual.md: 
  Set up  Terminal at bottom left of screen. emacs on right
          Files window on rfc-draw/distrib on left
          Firefox in middle of screen, just below Files top line
  In rfc-draw/distrib:
    pandoc -f markdown rfc-draw-manual.md > rfc-draw-manual.html
  Now drag rfc-draw-manual.html into Firefox

1515, Fri 13 Oct 2023 (NZDT)

Eek! WD 2 TB hard disk failed.  Started making ticking noise;
realised I hadn't turned on the computer power switch :-(
Ordered a new WD disk from PB Tech.

Decided to re-format WD BROWNLEE disk (500 GB), and  use it for n-backup.
sudo gnome-disk-utility
Disk name N-disk,  created i-backup directory, started n-backup at 1515

1707, Mon 16 Oct 2023 (NZST)

New WD disk drive arrived from PB Tech today.  Set it up (notes in
nevil/ideapad-notes.txt), ran n-backup to copy files from SSD to N-disk

Sent email to Brian Carpenter, Jay Daley and Robert Sparks,
announcing rfc-draw, and suggesting they download it from github and try it :-)

1529: Wed 25 Oct 2023 (NZDT)

Brian responds with several comments, some "Fixes for use on Windows"
and points out that "The first line in print_lbuf() removes the file path"

To get current version from github:
  git clone https://github.com/nevil-brownlee/rfc-draw

Renamed (old) rfc-draw (with all it's test files) to rfc-draw-dev,
then   git clone https://github.com/nevil-brownlee/rfc-draw
i.e. rfc-draw is now an exact copy of the github version
  including it's .git directory

Brian points out bug in rdd-to-ascii.py,
  print_lbuf writes to current working directory, fixed that
To push modified version of file to remote:
  git push origin main
  ### pwsafe "github token" has the username and password (token) for this
  git commit -m "Updated rdd-to-ascii to write .txt to same directory as .rdd
    rfc-draw-notes.txt shows up as an 'untracked file' :-)

For XML (and kramdown) authors, you could add rdd-to-xmlfig, which would create a complete figure in XML2RFC format:

<figure anchor="TBD">
   <name>TBD</name>
   <artset>
     <artwork align="left" type="ascii-art">
       <![CDATA[
<!-- ASCII text goes here -->
]]>
     </artwork>
     <artwork align="center" type="svg">
       <svg ...
       ...
       </svg>
     </artwork>
   </artset>`.
</figure>

1448, Thu 26 Oct 2023 (NZDT)

Added -i (immediate) to n-backup

rfc7996 (SVG 1.2 RFC) is in ~/rfc-draw/rnc
rfc7449 xml2rfc is in ~/rfc-draw

Started on rdd-to-xmlfig.py
To test this, we need a sample rfc in xml; made example-rfc.xml
  (from ~/ISE/draft-is-procedures.xml)
  using ENTITY otherFile to include file xmlfig.xml

Testing on https://author-tools.ietf.org/ grizzles about <middle>
  Is rfc2629 the right one to use on this ???

1155, Fri 27 Oct 2023 (NZDT)

Tweaked example-rfc.xml until https://author-tools.ietf.org/ accepted it
>>> Will have to tweak rdd-to-xmlfig to generate it like this <<<

Note that <figure> has to be contained in  <section> <name> TBD </name>

Made test-figure.svg (just an n_rect); svg and ascii both render properly :-)
>>> However xml2rfc sees viewBox="0,0,800,600" as a single parameter,
    need to replace those commas with blanks <<<

We need txt_from_svg() and txt_from_ascii() functions in rdd-to-xmlfig

Made new-rdd-to-svg-fn.py, with class svg_drawing,
 taking sys_arg as it's (single) parameter
That means running rdd_io to get all the objects,
  then running the rest of old rdd-to-svg

Added a lot of debugging code, trying to work out _why_ we get
  test-figure.rdd's single n_rect object in the objects list twice ???

1613, Sat 28 Oct 2023 (NZDT)

Sorted out yesterday's bugs in new_rdd-to-svg.py and rdd_io.py
Reworked rdd_io to return di, data info from the rdd file, i.e:
  "r_width", "r_height",  # root window size
  "d_width", "d_height",  # drawing Canvas size
  "f_width", "f_height",  # font size (px)
  "min_x", "max_x", "min_y", "max_y"  # extrema of objects in the drawing

Tweaked new_rdd_to_svg.py to use min/max x/y to get drawing size properly,
  old rdd_to_svg.py just used the drawing (Canvas) size!
Now we get the svg figure, with it's borders (in Inkscape) about right.
  However, it all looks OK in gThumb :-)
  my draw_frame() sets the viewbox

And now ...
 - rework rdd-to-ascii.py in the same way
 - than can work on rdd-to_xmlfig.py,
     import rdd_to_svg
     rdd_to_svg.svg_drawing(sys.argv)
       Tried this in test-rdd-to-svg.py, no problems
     Note the underscores in rdd_to_svg above
       Will need to make dummies for rdd-to-* programs ???
       (that way we won't need to change the names in github)

1723, Sun 29 Oct 2023 (NZDT)

Decided to change rdd-to-*.py to rdd2*.py
  history 20
    mv new-rdd-to-svg-fn.py rdd2svg.py
    git rm -f rdd-to-svg.py
    git add rdd2svg.py 
    git commit -a -m "rdd-to-svg.py changed to rdd2svg.py"
    git rm -f rdd-to-svg.py  # Remove from local erpo
    git ls-tree --full-tree -r --name-only HEAD

    mv test-rdd-to-svg.py test-rdd2svg.py
    python3 test-rdd2svg.py test-figure.rdd 
 
Now need to make rdd2ascii.py from new-rdd-to-ascii.py <<<<

At 1759, rdd2svg.py hadn't appeared in remote repo ???

1725, Mon 30 Oct 2023 (NZDT)

Reworked rdd-to-ascii.py to make rdd2ascii.py
  Fixed lurking bug: in print_lbuf() change s|"%s \n"|"%s\n"|
    i.e. removed the extra trailing blank !!!

git rm rdd-to-ascii.py 
git add rdd2ascii.py
git commit -m "Change rdd-to-ascii.py to rdd2ascii.py"
git push origin main

>>> Update rfc-draw-manual.rd to use rdd2* <<<

1617, Tue 31 Oct 2023 (NZDT)

Reworked rdd_io.py, rdd_io.read_from_rdd()
  returns objects, di

Reworked rdd-to-ascii.py to use this, it now calls
  rdd_io.rdd_rw(sys_argv, 1)  # b_w 1 chars/lines
and produces
  self.rdd_fn, self.border_width,  self.objects,  self.di

So, today ...
 - Tweaked rdd_io.py to produce rdd_fn, border_width, objects[] and di{}
 - rdd-to-ascii.py replaces rdd2ascii.py, and
     rdd-to-svg.py replaces rdd2svg.py
 - Changed read-this-first.md to README.md
   Fixed typos in ref-draw-manual.md, this replaces rfc-draw-maual.html
   
git rm -f rdd2ascii.py  rdd2svg.py 
git add rdd-to-svg.py
git add rdd-to-ascii.py
git rm -f rfc-draw-manual.html
git add rfc-draw-manual.md
git commit -m "Change rdd2*.py back to rdd2*.py, rework README.md, add rfc-draw-manual.md"
git push origin main

git rm -f README.md
cp read-this-first.md README.md
git add README.md
git commit -m "Improve README.md"
git push origin main

git rm -f rdd_io.py
git add rdd_io.py
git commit -m "Rework rdd_io for rdd-to-*.py"
git push origin main

git ls-tree --full-tree -r --name-only HEAD

1418, Wed  1 Nov 2023 (NZDT)

Subscribed to rfc-interest and xml2rfc mailing lists

Worked on rdd-to-xmlfig.py
Problem:
  rdd-to-asc and rdd-to-svg know their default border_widths
  That needs to be passed to rdd_io when we use it to read the rdd  file
  rdd-to-xmlfig.py can pass either two b_ws (asc and svg), or none
  Where should we keep the default b_ws ? <<<<<
    Not in  rrd_io.py, that's used by rdd-to-svg.py and rdd-to-ascii.py
    In -to-svg and to-ascii with copies in to-xmlfig ??
    In another file, say to-globals.py?
  Yes, this looks the best approach, sigh

1528, Thu  2 Nov 2023 (NZDT)

Made rdd_globals.py (global values for rdd-to-* programs)
Tweaked rdd-to-ascii.py to use rdd_globals.py for default border_width
  (or to let user specify it, e.g. python3 rdd-to-ascii.py test-figure.rdd 8

Tweaked rdd-to-svg.py likewise, found new problem
  rdd_io.py expects "-bdd"as second arg, to specify a border width
We need to change that to just getting an integer for the second arg <<<
Done, now both rdd-to-ascii.py and rdd-to-svg.py work properly
  rdd-to-*.py fn.rdd     # Use default border width for *.rdd
  rdd-to-*.py fn.rdd 22  # Use int(arg[2]) for border width, 22 here
  
Completed rdd-to-xmlfig.py, ran it, test-figre.xml looks OK
  Need to remove commas in viewBox="0,0,170,88",
    xml2rfc didn't like the commas <<<<

Added rdd_globals.py and rdd-to-xmlfig.py to github main

1055, Fri  3 Nov 2023 (NZDT)

Added x,y scale factors for rdd-to-ascii to rdd_globals.py
  tweaked them until rdd-to-ascii test-figure.txt look about right

Retrieved example-rfc.xml (26 Oct version),
  for testing on rfc-editor/author-tools site
That uses ENTITY otherFile=xmlfig.xml

cp test-figure.xml otherFile.xml

1753, Mon  6 Nov 2023 (NZDT)  Back from Wurliter Doo

Worked on rdd-to-ascii.py, trying to make re to match "viewBox=".."
Failed to make a working re, sigh :-(

1525, Tue  7 Nov 2023 (NZDT)

Got code working, using re to find >>viewBox="0,0,170,88" <<,
  use that to chnge the commas to spaces

Test sequence is:
 - python3 rdd-to-xmlfig.py test-figure.rdd
     makes test-figure.xml
 - made example-rfc.xml, have to copy test-figure.xml into that,
     in <middle> after <name>TBD</name>
 - https://author-tools.ietf.org/  to load and check  test-figure.xml
     That shows the figure as ASCII (for Text), and svg (for HTML and PDF)

Decided font_weight="bold" makes it too dark for RFCs, changed that to "normal"

git rm -f rdd_io.py
git add rdd_io.py
git commit -m "Rework rdd_io for rdd-to-*.py"
git push origin main
git ls-tree --full-tree -r --name-only HEAD

Sent email to xml2rfc list :-)

1740, Thu  9 Nov 2023 (NZDT)

Good response from xml2rfc, joined tools-discuss list
  and sent 'rfc-draw announce' email to it

1717, Wed 15 Nov 2023 (NZDT)

Martin Thompson suggest 'need a list of tkinter pre-reqs

import 
  tkinter, math, sys, re, os, svgwrite, traceback (for POSIX and windows)
  termios (for POSIX) or msvcrt (for Windows)

git commit -m  "Add python module install instructions to README.md"
git push origin main

1755, Thu 16 Nov 2023 (NZDT)

Added requirements.txt to rfc-draw github page

Started on Forking ietf tools repo

Erik Auswerwald suggested:
You could consider adding this to <https://authors.ietf.org/>, perhaps on
the page called "diagrams" <https://authors.ietf.org/en/diagrams> and on
the page called "tools catalog" <https://authors.ietf.org/en/tools-catalog>.

Attempted to add rfc-draw to https://authors.ietf.org/en/diagrams

cd rfc-draw/rfc-authors
git clone https://github.com/ietf/authors.ietf.org
  brings the whole diagrams page into rfc-draw/rfc-authors
  Now can edit that to add rfc-draw, then commit and push ???

1733, Thu 23 Nov 2023 (NZDT)

Started design of "header drawing" scheme.
 - this wil be rfc-draw 2.0 :-)
 - replace "Group" key with "Header"

1620, Fri 24 Nov 2023 (NZDT)

Remembered that python-svg directory has the svgwrite source for the
example diagrams in RFC7996, in particular
  pkt-layout.py, which draws tcp-header.svg  :-)

1712, Sat 25 Nov 2023 (NZDT)

Made v1.0 directory, copied all release files into it,
  tar -cvzf v1.0.tgz ./v1.0
  rm -r v1.0
Reworked rfc-draw.py to use 'Header' buttonn instead of 'Group'
Started on draw_headers_class.py (based on draw_groups_class.py)
  in ~/rfc-draw/pkt-header
Tweaked rfc-draw.py and rfc_draw_globals_class.py to recognise posix,
  and import termios (POSIX) or msvcrt (Windows),
then handle startup rdd file using sys.argv[2] (posix, no dialog)
  or (askopenfilename() title=) (windows, dialog)
  
Got it to having draw_headers (at present draw_groups code) to work properly

1736, Sun 26 Nov 2023 (NZDT)

Made ~/rfc-draw/v1_files; this has 25 Oct versions of
  draw_groups_class.py and rfc_draw_globals_class.py

Worked on draw_headers_class.py and rfc_draw_globals_class.py,
  mostly changing g_* to h_*
However, this needs more careful thought -
  groups used members, which had pointers back to objects
    (which could change independently).
  For headers, do we want their rows to be separate objects ?
  If so, should a header row's fields also be separate objects ?

  Surely there can only be one header in a drawing ?
    Usually, but why not?
  And not any other objects ?
    Again, why not?
    
1743, Mon 27 Nov 2023 (NZDT)

Got draw_headers_class to draw a header's edr,
  attempt to move it fails:
    'draw_headers' object has no attribute 'find_surrounding_header'

Need to work out how "headers" are created:
 - do they need an edr?  << No
 - we should start by drawing their boundary,
     with the col number heading lines, and one (the first) row

1756, Tue 28 Nov 2023 (NZDT)

Got rfc_draw_globals_class.py to draw col header numbers,
  using x spacing  round((x+1)*rdg.f_height*1.2) ! ???

Now need to draw frame around overall header < < < <

1751, Wed 29 Nov 2023 (NZDT)

Worked on drawing header col nbrs, got them drawn correctly, but only
by using font="TkFixedFont" -
i.e. font=self.rdg.f_font  isn't picking it up as expected :-(

1722, Thu 30 Nov 2023 (NZDT)

Problems in class header with f_width and f_height
Looked back at ~/rfc-draw-dev.test-font.py,
  that says that for TkFixedFont (not TkFixedFont 12 !!!),
  size = 17 pt, width = 10.333 pt

In class header, everything now (almost) works, but the header rectangle
has about 10 spaces on either side.  WHY?
An f_width of 8.2 works well, but - again - WHY ??

1728, Fri  1 Dec 2023 (NZDT)

Looked again at test-font.py ...
  font = tkinter.font.Font(family="TkFixedFont")
    gives: actual returned {'family': 'DejaVu Sans', 'size': 12, .. }
      len 30, width 290 (<class 'int'>), height 19
      c_width 9.667 <class 'float'>
    However, in rfc-draw.py, width 8.0, height 17 seem to work better
Need to make some detailed plans for header class layouts !!!

1758, Sat  2 Dec 2023 (NZDT)

Tweaked header drawing, now have something that looks OK,
  although it allows the xmrg space either side of the col text ?
  maybe make xmrg a little smaller ??

1159, Sun  3 Dec 2023 (NZDT)

Tried test-font.py with Droid and Numbes foints, all give h 19, w 9.667
TkFixedFont looks fine on-screen, but the hdr rectangle is too wide!

1755, ditto

Use width 8.0 for rectangle scaling, col_headers drawing looks good now :-)

1746, Mon  4 Dec 2023 (NZDT)

Reworked class header to have inner-class f_frame;
  draws (using add_to_layer) down-across-up line with tics at bottom

1736, Tue  5 Dec 2023 (NZDT)

Polished code to draw col_headers (i.e. field 0 of header) :-)
Tried repeating that below the col_headers, that didn't work;
  the objects drawn move to right on each line below the col_headers !!!

Will need to use b1_click on (or just below) bottom line
  to add next header row.

1713, Wed  6 Dec 2023 (NZDT)

Fixed yesterday's problems.
Made header-rdd.txt file, an example of an rdd file with a header
>>> Will need to rework the programs that write/read rdd files <<<

1734, Thu  7 Dec 2023 (NZDT)

Worked through issues arising in save_to_rdd() when we save a header
  and it's frames (and their fields)

Need each object's class to hold it's type (n_rect, header, frame, field),
  and to also have it's 'to_ds()' function -
  that way there's only one place where the type needs to be handled

header-rdd.txt file has fields for coords, text. g_nbr, g_type
  g_type N -> None,  G -> Group
  These were used to make rdd lines like
    (g1 member 3) line [4, 72],  (g1 member 8) n_rect [44, 83]
  change g_nbr and g_type to describe objects,
    i.e. o_type (header H, frame (or row) R, Field F)
    
We're going to need something like:
  (header 1) [coords] txt
  (frame 2) [coords] txt
  (field 5)  ???
    (h1 frame 2) [rel coords] txt
      (f2 field 1) ...

And these must coexist with existing lines for n_rect, line and text !

1636, Fri  8 Dec 2023 (NZDT)

Changed font sizes to self.f_width = 10.333;  self.f_height = 17
Changed header/frame/field to header/row/field, letters H/R/F in save-file

Drew header, saved as save-file.rdd
  root_geometry 800x600+5+5
  drawing_size 784x533
  mono_font width 10.333 height 17 pixels
  0 (header h1) [201, 158, 203, 160] "H" 1 header
  1 (row r1) [201, 158, 203, 160] "R" 3 row  ## top line ?
  2 (row r1) [201, 158, 203, 160] "R" 3 row  ## actual row 1 (col nbrs) ??

Mostly OK, but why two copies of (row r1) ???

1748, Sat  9 Dec 2023 (NZDT)

Realised we need to have row refer back to header, and field back to row <<<

Changed h_row from def: to class:
Keot f_col_nbrs as edf:

Can now draw the first row's frame OK, with it's col numbers :-)

Decision trees in rfc_draw_globals where we handle object type:
  obj_to_str(self, val)      by save_to_rdd() and dump_objects()
    ->  val.obj.mk_save_str()
  restore_object((self, ds)  by read_from_rdd()
    ->  val.obj.restore_object()
  copy_object(self, obj)     by on_key_press() 
  delete_object(self, obj)   by on_delete_key()
  on_insert_key(self, event) by on_insert_key()

1753, Sun 10 Dec 2023 (NZDT)

Worked on class n_rect, putting all the above routines into it.
  (will need to do the same for all oher type objects)
Also reworked save string format, adding parent_id, v1 and v2 parameters

1614, Mon 11 Dec 2023 (NZDT)

Now can draw n_rects,n_rect, save them to save-file.rdd,
    and read it back from there;
  class n_rect now has self.parent.id, self.v1 and self.v2
    parent_id is 0 for it's  rectangle, rect_id for it's text

Started working on line objects;

1604, Tue 12 Dec 2023 (NZDT)

draw_lines_class has self.a_line = alc.a_line
  so a_line is an a_line object in an alc object
  it contains self.lbd, set from the coords given to a_line
    by a call to alc.start_new_line()
  
Tracked down crash in draw_lines_class.py; b1_motion: abd.lbd does not exist
  Still need to remove a few print statememnts !!!

1748, Wed 13 Dec 2023 (NZDT)

Added mk_save_str() to arrow_lines_class.py, can now save a line :-)
Started on adding restore_object() to arrow_lines_class.py
  Not finished with this yet !!!

1741, Thu 14 Dec 2023 (NZDT)

Got restore_object working for type line :-)
  However, option 'b' (bare line ends) isn't being recognised <<<

1520, Fri 15 Dec 2023 (NZDT)

Fixed option 'b' problem above

Calling function in another class ...
  Just call it and supply self:

class A:
    def method(self, x, y):
        print(x + y)

class B:
    def call_a(self):
        A.method(self, 1, 2)

b = B()
b.call_a()

Output:
3

1735, Sat 16 Dec 2023 (NZDT)

restoring a line (continued ...)
  the line is an a_line object in draw_lines_class, we get to:
    >>> restored line, obj = <Key <rfc_draw_globals_class.rdglob object at 0x7f8d20e51840>, Object 3, Type <arrow_lines_class.a_line object at 0x7f8d20e51d80>, I_coords line, parent_id 0>
  Traceback (most recent call last):
    File "/home/nevil/rfc-draw/rfc-draw.py", line 161, in <module>
      rdg.read_from_rdd(save_file_name)
    File "/home/nevil/rfc-draw/rfc_draw_globals_class.py", line 1014, in read_from_rdd
      s_key, tk_id = self.restore_object(ds)
  TypeError: cannot unpack non-iterable NoneType object
   ->->  we're not getting the right things returned from dlc.restore_object :-(

1807, Sat 17 Dec 2023 (NZDT)

draw_lines_class draws an a_line, then tries to make a object
        line_obj = rdgc.rdglob.object(self, self.lbd_id,
            a_line, "line", l_coords, l_text, parent_id)
We have self here because without it object() doesn't get parent ???

1711, Mon 18 Dec 2023 (NZDT)

Worked through restore* for line and n_rect.  Lots of problems still :-(

n_rect object's text is tk object n_rect.text_id,
  it's edited by edit_text_object / edit_esc_key
  To get it's current value, use self.objects[t_obj.parent_id].i_text

Hmm, inside class n_rect, using self as the class object itself doesn't work!
We need to make the object() when we return from n_rect <<<

1740, Wed 20 Dec 2023 (NZDT)

Worked through problems with python3 rfc-draw.py test-n_rect.rdd
  @@ fields = ('0', 'n_rect', '1', '86.0, 70.0, 397.0, 248.0', 'text in n_rect', '0', '0', '0')
  0: >0< <class 'str'>
  RO: obj_type n_rect >text in n_rect< 0 0 0
  create n_rect, coords 86,70, 397,248
  key 1, coords [86, 70, 397, 248]
  n_rect 5
  restore_rect: coords 86,70, 397,248, 'rect 1', 'text 2'
  self.object <class 'rfc_draw_globals_class.rdglob.object'>
  nbnbn self.text_id >2<
  self.rdg.objects {}, len 0  <--- in n_rect.str()
    Seems like we haven't saved the restored n_rect ???

1746, Thu 21 Dec 2023 (NZDT)  # Frances' birthday

draw_globals_ was a big mess after yesterday, sigh
Sorted that out, dump_objects looks much better now
Still problems with  python3 rfc-draw.py test-n_rect.rdd 

1546, Fri 22 Dec 2023 (NZDT)

Got n_rect.mk_save_str() working, decided to use draw_texts_class.py
  to draw texts; need to call that from n_rect when making it's centred text <<

1217, Sat 23 Dec 2023 (NZDT)

Hmm.  Working towards having draw_texts_class,new_text() create a text object,
  and put it into rdg.objects
Succeeded in that for test-text.rdd  (text + line) :-)

So now, restore_object() calls dlt, to create a new object,
  and puts it into rdg.objects{}
This works for types text, n_rect and line

Objects are created by b1_click in draw_n_rects, draw_texts and draw_lines;
  draw_lines uses arrow_lines to draw it's lines
mk_save_str() is in arrow_lines, draw_texts, class n_rect
draw_globals.restore_object() uses whatever object it needs to get
  an object restored from it's save_string

1751, Wed 27 Dec 2023 (NZDT)

Considering how to read and use both v1 and v2 .rdd files
Test program test-re-match.py, not working yet :-(

1728, Thu 28 Dec 2023 (NZDT)

Realised that v2 (field name) has to be a quoted string
Got test-re-match.py working, for v1 and v2 records)
Oh, oh, in rfc_draw_, we get fields 6+7 back as '0 0'  :-(
  but that doesn't happen in test-re-match.py ? ? ?

1148, Fri 29 Dec 2023 (NZDT)

Running test-re-match.py on qqq-test.rdd again,
v1 split works properly on RFC2722-TM-Architecture.rdd
v2 split works properly (7 fields) on qqq-text.rdd
  but v1 doesn't (last two fields combined as '0 0')
  Do we really want v1-match to fail here?
    Alas, yes :-(

1511, Ditto

Sorted parse_rdd_line to handle both v1 and v2,
  try v2 first (8 fields, 0-7), then v1 (7 fields)
Trying python3 rfc-draw.py RFC2722-TM-Architecture.rdd,

Working on python3 rfc-draw.py test-n_rect.rdd
  restore_obj() brings it back as a string, even though it's an n_rect <<<
  Fixed that, now can Save file as RFC2722-TM-Architecture.save,
    .save file mostly OK, but needs " " around v2 ("+" or "0")
  Also, texts with embedded \n need to be escaped <<
    and reading qqq-text.rdd fails (couldn't match v1 or v2 .rdd)

1655, Sat 30 Dec 2023 (NZDT)

Each class for an rfc-draw object (n_rect, line, text, header, ..) must have:

1. mk_save_str()    -> string for a (v2) .rdd file  in obj_to_save_str()
   		         should just call val.obj.mk_save_str() <<
2. restore_object() -> object's tk id
   		         have to read a .rdd record,
			  then just call val.obj.restore_object()
			  to put restored object into rdg.objects[]

3. copy_object()     for on_key_press()   3, 4 and 5 also in val.obj <<
4. delete_object()   for on_delete_key()
5. insert_object()   for on_insert_key()

1746, Sun 31 Dec 2023 (NZDT)

Worked on draw_n_rects_class.py
Now have that working, can draw n_rects, move them abouyt, etc,
  but we still have excessive diagnostic output, need to track that down

1440, Mon  1 Jan 2024 (NZDT)

Moved all the n_rect variables and functions from
  rdg_globals to draw_n_rects_class
Almost works properly, BUT if I draw n_rect 1, then n_rect 2 overlapping it,
  I can't move n_rect 2 (instead I start drawing n_rect 3!)
Oh, it looks as though tk.find_closest() doesn't work properly with
  overlapping objects - "closest" is the one highest in "viewing order" <<<
Still, for RFC drawings we don't need overlapping objects (?)
Commented out debugging prints, draw_n_rects_class.py now works properly :-)

1630, ditto

Now test-n_rect.rdd displays properly,
  but drawing a line doesn't stay behind it -> layering isn't working ;-(
Oh dear, lots of dupplicated code in rfc_draw_globals !!!
  Fixed that
Looking back to v1/rfc_draw_globals, realised one line had gone from
add_to_layer() - the one that set the tk objects layer_tag !!!
  Fixed that, now layering works properly again :-)
  i.e. n_rect covers line, but stays under Free text
  
New bug: draw_texts_class won't move a (free) text <<

Need to move headers code from rfc_draw_globals into (new) draw_headers_class.py

1439, Tue  2 Jan 2024 (NZDT)

Wrote check-dups.py, used it to sort out duplications in rfc_draw_globals
Tweaked startup code for draw_lines and draw_texts,
  free-standing startup works properly for n_rects, texts and lines
Worked on draw_lines; lines drawn by arrow_lines_class,
  added mk_save_str to arrow_lines_class.
  test-line.rdd -> save-line.rdd now works as expected
Ditto for draw_texts and draw_n_rects :-) 

Reworked rdgc restore_object:
    renamed it to restore_saved_object
  each tool (lines, n_rects and texts) now has a restore_obect() function

1536, Wed  3 Jan 2024 (NZDT)

Worked on delete/insert:
  lines:  read_from_rdd() sets up draw_lines_class,
            dlc's interrupt handlers allow user to draw/edit the line
	  However, the line (and it's arrows) are drawn/edited by alc <<<
          We now have alc.mk_save_str() working, Delete/Insert work too  :-)
  n_rects, texts  still to do!	  

1830 (!!!), Thu  4 Jan 2024 (NZDT)

Tracked down "a_line doesn't have .lbd' bug",
  can now delete, insert and then move a line :-)

1447, Fri  5 Jan 2024 (NZDT)

Now have delete() and restore_object() working for line, text and n_rect
Time to look again at headers ...

Ah, we want to move headers as for n_rects,
  but not to resize them (except by adding a row)
So headers needs rdg.middle, but now .tl, .top, etc
  it also needs rdg.where and rdg.move_deltas
  or ... we could use them from n_rects

Messed this up, made copy of last version of rfc_draw_globals that had
class header, that's yesterday's, rfc_draw_globals_class.py+2024-01-04~164

1719, Sat  6 Jan 2024 (NZDT)

Worked on draw_headers_class.py; not working yet, alas :-(

1442, Sun  8 Jan 2024 (NZDT)

Moved where(), move_deltas() and n_rect variables back into rfc_draw_globals,
  we'll need them to move headers on-screen!
Got draw_headers_class.py working (using self.rdg n_rect variables),
  it now draws a header with it's top-left corner at b1_click()'s [mx.my] :-)
Now we need an hdr_closest() function, and
  we'd like to move it using b1_motion()

Hmm, now we're not getting <Delete> key handled at all ???
Ah, fixed that in rfc_draw_globals by moving the root.bind() and
  self.bind_keys() calls to before the where() and move_deltas() functions!
But the Insert key doesn't bring the n_rect back to it's as-drawn size ???

For texts, delete_object() and insert_object() work properly,
ditto for lines

For n_rects, b1_click() and b1_motion() do the right things,
but b1_release() doesn't manage to get the correct rectangle coords
  into self.rdg.objects, sigh :-(
Oh, oh: $$$ current_object is an NR, not an rdg.object <<<<<<<<<<<<<<<

1459, Mon  8 Jan 2024 (NZDT)

Fixed problem in draw_n_rects.b1_release; now write updated coords
  back into rdg.objects[self.rect_id]  :-)
  on_insert_key() is handled by rfc_draw_globals, it calls restore_object()
  on_delete_key() calls undraw_object()
  That works for n_rects, lines and texts

Test procedure, for texts, lines and n_rects (using line as example):
1. Draw obj on screen, save as line.rdd
2. python3 rfc-draw.py line.rdd
     texts, lines and n_rects work properly
3. python3 rfc-draw.py line.rdd
     Delete, Insert, save as line.rdd
     texts, lines and n_rects work properly :-)
     saved as line+text+n_rect.rdd

Testing with RFC2722-TM-Architecture.rdd
  We replaced obj-to-save-str() (in rfc_draw_globals, it's still there)
    with val.object.mk_save_str()
Hmm, problems with the regular expressions.
Tweaked test-re-match.py
  That now works properly with RFC2722-TM-Architecture-v1.rdd and v2
  python3 rfc-draw.py is happy with v1
  but with v2 we get most of the n_rects left out ...
    n_rect 1 becomes n_rect 11
    n_rects 3, 5, 7, 9 all become copies of n_rect_11 ???

1724, Tue  9 Jan 2024 (NZDT)

Looking further into n_rect 11 problem above ...
In n_rect mk_save_str(), the values (e.g. self.rect_id, self.text_id)
  are those coming from val.object
Are we using the right object for val ???
  rdg.obj_to_str() has val as a parameter,
  but that's only called from dump_objects() !
  Hmm, we should call dump_objects()just before mk_save_str() >>>

1635, Wed 10 Jan 2024 (NZDT)

Ah, drawing an n_rect, we get a draw_n_rects object, NOT an rdg object !!!

python3 rfc-draw.py test-n_rect.rdd  works properly
save qqq- doesn't write the n_rect line to .rdd !@#$%^&*

Oh, again: save_to_rdd() isn't writing the n_rect's text line becuase
  it's parent_id is the n_rect's recangle id :-(
Looking at text-n_rect.rdd, it only has one object (the n_rect),
  but it's parent_id is 1 (i.e. n_rect 1), and key 2 is for it's text

1654, Thu 11 Jan 2024 (NZDT)

Sorted out yesterday's n_rect problem.
Realised now that (free) text objects use an integer (their text's Tk id)
  instead of an Object, so sigh.
Now have def get_save_string(val) to handle Text objects

So now, can read RFC2722-TM-Architecture.rdd,
and Save it as RFC2722-TM-Architecture-v2.rdd
BUT the -v2 version has all the n_rects with Tk ID 11
  That's the id of the last n_rect in the file ???

Added debug code to draw_n_rects_class.py, printing "N_RECT " lines
  these show that we get objects from different keys,
  BUT it's always the same object ???

1718, Fri 12 Jan 2024 (NZDT)

Still have problem with saving n_rect info, draw_n_rect always
  writes the save string for the last n_rect drawn :-(

1739, Sat 13 Jan 2024 (NZDT)

As for yesterday, we can read in t-5n_rect.rdd,
  it loooks fine, so drc.restore_object() is working properly
BUT dumping it as *-v2.rdd doesn't work -
  instead of n_rects 1,3,5,7,9,11, it just dumps 6 copies of n_rect 11 :-(
  (the v2 save string for n_rect 11 is correct, ar least!)
Copy of output saved as xxx.yyy, sigh

1713, Sat 14 Jan 2024 (NZDT)

Finally got t-5n_rect.rdd to load, display (v1), and write to v2.rdd :-)
The v2 version loads (sort of) OK, but the text is the same for each object !!!

1100, Mon 15 Jan 2024 (NZDT)

Testing with t-5n_rect.rdd (the 5 n_rects from RFC2722-TM-Architecture)
Got it at last!  Have to use str = val.i_text to get object's text str;
  that text is updated by rdg.edit_esc_key()
Now we can read RFC2722-TM-Architecture-v1.rdd, and
  write it correctly as RFC2722-TM-Architecture-v2.rdd :-)

Testing with 4-lines.rdd:  OK
and with text+line.rdd:  OK
Tried drawing an n_rect, Delete, Insert and C key now work properly
Ditto for a line, and a text :-)

So now, functions for each object class:
    restore_object(self, r_coords, r_text, parent_id, v1, v2)
    undraw_object(self, d_obj)
    mk_save_str(self, val)
draw_headers_class has restore_object(), now it needs the other two ...

Time (at last) to actually work on draw_headers_class !!!

1715, Tue 16 Jan 2024 (NZDT)

draft-mcquistin-augmented-ascii-diagrams-13.pdf is where I started on headers.
It uses ASCII-Art, and just has the col numbers in it's top two rows.
It's rows are mostly 1 char high, but can be 3 (for names of 1-bit fields)
  or simply to allow field names too long to fit in one line.

Now working on draw_headers_class.py, to make the top-line/row 0/other_rows
structure a bit clearer

1756, Wed 17 Jan 2024 (NZDT)

Closer to getting classes header and h_row working properly again

1713, Thu 24 Jan 2024 (NZDT)  Back from Auckland

Tidied up draw_headers_class.  Now have class header, h
  We pass h to class h_row, hr, and we pass h and hr to draw_tics()
  draw_tics makes a list of tic line ids, hr.tic_ids
To do:
1. Need to make mk_save_str(),restore_object() and undraw_object() for headers
2. Because we want to move a header, need to do that using
     drawing.move(tagOrId, xAmount, yAmount)

1743, Thu 25 Jan 2024 (NZDT)

Now have b1_click() picking up header object, Clicked near header 1
   h_coords [181, 146, 705, 189.4]
   &&& where return = 4  # All details correct :-)

current_object ><Key 1, Object <draw_headers_class.draw_headers.header object at 0x7fbd4e9cae90>, Type header, I_coords [181, 146], i_text , parent_id 1 v1 1, v2 0><
=1= h_nbr middle, region 4, ho <draw_headers_class.draw_headers.header object at 0x7fbd4e9cae90>
calling ho.move(<draw_headers_class.draw_headers.header object at 0x7fbd4e9cae90>,  1,1)

But ho.move isn't moving the header, sigh :-(
Ah, "The name of a tag can be any string
  that does not contain white space or periods."
Now we can move the down-across-up part of the bottom row
  need to check that the top line, col nbrs and tics all get the same tag <<<

1212, Fri 26 Jan 2024 (NZDT)

Can now move a header by clicking in it and dragging
Can also make a second header, and move it :-)

1104, Sat 27 Jan 2024 (NZDT)

Headers in an .rdd file:
  hh (header 1) [coords] "H" parent=0 v1 v2  
  rr (row 1) [coords] "R" parent=hh v1=row_nbr v2=n_lines
  ff (field 1) [coords] "name" parent=rr v1=bit0 v2=width

To add a row:    b1_click on  bottom line
       a field:  b1_click on tic at left of field's first col
                     in the field to add it's name (b3 to change the name)
		 Nbr of lines in field derived from field name and width (?)

Working on b1_* handlers to implement this . . .

1704, ditto

Adding h_row after clicking at bottom not working,

We shouldn't need to give x,y for new row <<<<<<
  Need to work out relationship between coords in header and h_row

1637, Sun 28 Jan 2024 (NZDT)

Realised that the col-nbr strings need to be in rdg.objects{}, put them there
Also realised that the tic marks also need to be objects !!!

row object has hr.tic_ids, in order of col nbrs
  all the tics have tag=h.h_tag; for their tags we also use
  "tic_row_"+str(hr.n_rows)+"col_"+str(col)
  canvas.addtag_withtag(newTag, tagOrId)
    attaches newTag to all objects that already have tagOrId
  i.e. addtag(tic_tag, hdr_tag)
This needs to be checked carefully !!!

1730, Mon 29 Jan 2024 (NZDT)

Added h.h_tag to col_nbrs and to tics
Clicking at bottom now adds a 1-line row with tics
Dragging in any row moves whole header, i.e.col nbrs + all rows  :-)

Now show where b1_click happened:
  row 0 (labels) to move whole header
  bottom of row n to increase it's nbr of lines
  top of row n to decrease it's nbr of lines
  below bottom row to add another row
  on a tic mark -> show it's tags

1702, Tue 30 Jn 2024 (NZDT)

Tweaked dh_closest to get object tags, e.g.  Clicked near header 1
     h_coords [662, 190.20000000000002], where 4
  +++ h <draw_headers_class.draw_headers.header object at 0x7f0b47424f70> (
     <class 'draw_headers_class.draw_headers.header'>)
  clicked in row 1
  dh_closest(): item_x = tk (51,) (line), mx,my 386,162
     o_tags ('layer 1', 'r_2', 'c_14', 'current')
     Hmm, discrepancy between "row 1" and 'r_2' ???
     >>> row 1 is correct, r_n is 1 high <<<
This lets us see when a tic is clicked on :-)
  (or any other object)
>>> tics don't move with row |_| line (they should) ???

1731, Wed 31 Jan 2024 (NZDT)

Draw header, add two rows, save to save-header.rdd, cat > dump_before_save.txt
  key 1 header I_coords [197, 143]                         p 1, v1 1 <<< p 0
  key 2  row I_coords [197, 143, 721, 186.4]               p 1, v1 1 < 1-org
  key 36 row I_coords I_coords [197, 143, 721, 186.4],     p 1, v1 2
  key 68 row I_coords [197, 143, 721, 233.20000000000002]  p 1, v1 3
  >> Nothing written to save-header.rdd

 - header only has two coords, the 3 rows have these as x1,y1 (OK)
 - rows 2 and 3 have row 1's x1 = 721, x2 increasing (why not integers) ???
 - should header have 4 coords, down to bottom of row 3 ???
 
1730, Thu  1 Feb 2024 (NZDT)

Fixed yesterday's bugs (above)
Tried to save header+1 row ro save-file.rdd
  save-file.rdd has row 2 first, then header 1;  why not header first?

Oh, oh; restore_object in draw_n_rects, draw_lines, etc assume that the
  object being restored is an n_rect, line, etc.
For draw_headers we have header and h_row objects,
  restore needs the type as a parameter, commented in rfc_draw_globals .....

1613, Fri  2 Feb 2024 (NZDT)

dump_objects() calls ds = get_save_string(), then prints ds
  entries for h_row and header look OK

val.object.mk_save_str() is called for n_rect, line, header
  this is part of get_save_string()

save-file.rdd is almost right now, but it's second line
  0 (row 2) [184, 110, 708, 158] "R" 1 0 "0"
shouldn't start with a 0, should it?
O, solved that one :0)

Also, hmm, cat RFC2722-TM-Architecture-v1.rdd is the original, but
  cat RFC2722-TM-Architecture-v2.rdd has
    (text 34) [178.0, 64.0] "packet\nheader" 0 0 "0" included 4 times !!!!
OK, fixed that :-)

Now we get save-file.rdd restored, but with extra stuff draw on-screen ???
  that's the two texts hdr1, hdr2,
  and an extra line of tic marks  ???

1707, Sat  3 Feb 2024 (NZDT)

Reworked draw_col_nbrs() to create a 'field' object for the col nbr lines,
  with it's own mk_save_str() function
Reloading from save-file.rdd works,
  but draws a second row under the col nbrs ???

Ah, save-file.rdd has 
  2 (header 1) [205, 164, 729, 206] "H" 0 1 "0" << draws first row
  1 (row 2) [205, 164, 729, 206] "R" 1 2 "0"    <<       second row

Need header() to only draw row if we didn't have a save file
In rdg:  self.new_drawing = False  if we couldn't read the save file

1557, Sun  4 Feb 2024 (NZDT)
functions for each object class:
    restore_object(self, r_coords, r_text, parent_id, v1, v2)
        used by rdg.restore_saved_object, _that_ has obj_type as it's first arg!
    undraw_object(self, d_obj)
    mk_save_str(self, val)

1746, ditto

Can now draw texts, lines and n_rects, and read them in from save-file.rdd :-)
For headers, we get the outline and tics, but not the col-nbrs text
  We need to use the containing row's tk id as parent_id for fields <<<<<

1733, Mon  5 Feb 2024 (NZDT)

Realised that header, row and field need *-nbr to identify which h/r/f they are
Can now draw a new_drawing header, but ..
  on reading it's save-file.rdd, we get the frame (row 1) and it's tics,
    but not it's col nbrs ??
  Also, it's row 2 in save-fle.rdd, it should be row 1

Made tweaked-save-file.rdd to have row 1 instead of row 2, no better :-(

1729, Tue  6 Feb 2024 (NZDT)  Waitangi Day

Following through on starting a new_drawing
  We need to pass  drawing, rdg, h and hr  through the header
    class hierarchy, i.e.  header | h_row | field

1747, Wed  7 Feb 2024 (NZDT)

Trying to track down startup problem:
  rm save-file.rdd
  python3 rfc-draw.py save-file.rdd > xxx.yyy
    click Header, should draw a header, with tics, but without col_nbrs
  gedit xxx.yyy
    we seem to get key 2 col_nbrs AND key 34 col_nbrs
      or maybe key 34 is left by draw_tics ???
        draw_tics should be part of drawing a row, with txt = "" ???

1732, Thu  8 Feb 2024 (NZDT)

Continuing from yesterday ...
  In save-file.rdd,
    field  2  should be (row 2),
      it's coords are [173, 165, 697, 202] (same as header 1),
      it's text shoud be just "R",  v1 should be 1 (it's row number)
    field 34 is indeed the col+nbrs object, it's text _is_ the col_nbrs string

1745, Fri  9 Feb 2024 (NZDT)

Revised header/row/field rdd line layouts (again)
Now rm save-file.rdd;  python3 rfc-draw.py save-file.rdd | tee xxx.yyy
  writes save-file.rdd
cat save-file.rdd  now looks correct:
  root_geometry 800x600+5+5
  drawing_size 784x533
  mono_font width 10.333 height 17 pixels
  1 (header 1) [223, 127, 747, 164] "H" 0 1 0
  2 (row 2) [223, 127, 747, 164] "R" 1 0 2

And now ... rfc-draw.py save-file.rdd draws a header with  single row,
  but the row's height looks like 4 lines, and
  when I click in the row I can move it, but the tics don't move with it :-(

1539, Sat 10 Feb 2024 (NZDT)

Solved yesterdays problems; height now 2 lines, tics move along with frame
Now clicking underneath the header adds a row, with only one line -
  that's correct, if we want it to have more/less lines, we want to hit +/-

1739, ditto

Aha! Added code to check whether an object's key is already in objects[]
From that we see  *** field object hr.row_id 2 already in objects[]
  (therefore it's overwriting a row, sigh)
Need to rethink how we treat object (Tk) _ids_, vs object (rfc-draw) _numbers_

  In v1 we always just used Tk ids, knowing they're always unique;
  we should go back to that now in v2 <---

1740, Sat 11 Feb 2024 (NZDT)

Reworked code to use tk id's as objects[] keys
add_to_layer() wouldn't work for text, using 4 coords,
  eventually found it does work with just two coords

We now get a likely-looking save-file.rdd,
  BUT the field line for (field 34) has 1 for it's parent_id,
    that should be 2 for the (single) row's tk id, which is 2 <<<<<
We need to check that we can restore it from save-file.rdd!
  then, restore_object() seems to expect 4 coords ??

1801, Mon 12 Feb 2024 (NZDT)

Made save-file-1, -2, -3.rdd, working through each of them insread of save-file
save-file-1 draws just the top line
         -2 crashes
When we manage to load save-file-3, will need to reflect it back into rdg.py

1501, Tue 13 Feb 2024 (NZDT)

Reworked save-file-3.rdd, now can load it to restore original.
Changed header.mk_save_str() to save coords as only [x0,y0]
  (that lets rfc-draw draw it as the top line only)
Tested "add row by clicking below the bottom row"
  Works fine on-screen, but coords and n_lines for 2nd and 3rd row aren't right
    2 (row 2) [188, 171, 712, 208] "R" 1 2 0
    4 (row 35) [188, 171, 712, 228] "R" 1 1 0
    5 (row 67) [188, 171, 712, 248] "R" 1 1 0    
Clicking below bottom row adds another row, r_lines same as lowest row :-)
  >> We need header coordinates x0,y0,x1,y1 to find the lowest row <<<

Worked on moving a (complete) header. now that moves the header on-screen,
and updates the header coords in self.rdg.objects :-)

1741, Wed 14 Feb 2024 (NZDT)

Added code to b1_click() to display dx,dy, o_tags in Message ares
Tried to extend class row() to put a blank field into each new row -
  that still doesn't work properly :-(
  (still working from save-file-3.rdd)

1741, Thu 15 Feb 2024 (NZDT)

Improved handling of rfc.new_drawing, that seems to work properly.
However, now we're not drawing the top row at all?
Tried looking at draw_headers-class.py from a few days back,
  diff draw_headers_class.py draw_headers_class-thu.py~
    shows that draw_headers_class is as we had it at 1717 today

Now we can draw the top  line inn red, :-)
  but we go astray from there :-(
Need to look at where we draw |_| and "field-name" <<<

1627, Fri 16 Feb 2024 (NZDT)

Sorted out yesterdays bugs, saved code as draw_headers_class-fri-16.py,
  drawing as save-h-top-row.rdd
In b1_action() we call dh_closest(),
  and we have code to display the closest object's o_tags
    could also display it's type
  if it's a header, we use where() to find where we clicked in the header;
    that lets us add rows by clicking at bottom of the lowest row

We can always display the closest object's tags,
  but to find where we are in a header, we need to find the object's
    header, row and field

1622, Sat 17 Feb 2024 (NZDT)

Reworked b1_action() to use obj.otype to work out where we clicked
  Once again we can add a row by clicking just below the bottom row
Saved drawing as save-2-rows.rdd, can read it in on startup :-)

Looking closer into b1_click, when we click to left or right of any row,
  we always get r3.  Are we drawing row's |_| to the header top line,
  rather than to the bottom of the row above ??

1441, Sun 18 Feb 2024 (nzdt)

Now draw |_| for new row only up to bottom of lowest row :-)
In b1_action(), we get "clicked in bottom row", which adds a row(),
  but we draw it in red, and it overlays the col_nbrs row (row 1)

1226, Mon 19 Feb 2024 (NZDT)

Sorted out yesterday's problems.  Now can create a new header,
  with a col_nbrs row (r_nbr 1); can click on it's bottom line to add a row,
    can move it (b1_move in col_nbrs row), but can't add a third row
  Attempting to do that shows  bottom +++  3 rows, r_nbr 2 <<<
Fixed that, now have save-file-3rows.rdd, and draw_headers_class-1530-19feb.py

Now try click on a tic to draw a field line, and reflect that in row.fields
  Oh, oh, dhclosest() looks up object in rdg.objects[],
  but tics aren't kept in objects (they're part of a row).

1700, ditto  Trying to put field with "-+-" into new rows, got bogged down
  cp draw_headers_class-1530-19feb.py draw_headers_class.py  # OK again now

Tried to put a field ("-+-", 0,32) into the new row, doesn't work ... :-(
  However, adding a third row draws "-+-" fields in the top two rows !!!
  Problem with target row_nbr ??

1441, Tue 20 Feb 2024 (NZDT)

Now displaying -+- in fields for bottom 2 rows.  Can edit the text, but
  updated text not written to save-file
  
1625, Tue 20 Feb 2024 (NZDT)

Had to make a text object as child of field object,
  can now edit the text on-screen, and save it in save-file.rdd  :-)
However, if we click outside the text, we're at h_1, r_1, i.e. in row 2

Sub-dividing fields:
  click on a tic to draw an f_sep (field separator)
    but not in Row 1, the col_nbrs row
  so tics shouldn't be included in fields
  Worked on that, inconclusive so far, sigh :-(

1217, Wed 21 Feb 2024 (NZDT)

Sorted out dh_closest().  Now always returns item_id, obj

1749, ditto

b1_click: return self.n_headers  draws a second header
Hmm, rdg.new_header_nbr isn't updating rdg.n_headers ???
  otherwise, initial header isn't getting a (new) h_nbr ????

1742, Thu 22 Feb 2024 (NZDT)

Working with save-file-2-hdrs-tweaked.rdd
Looks as though we have problems because class row is inside class header <<
  try taking it outside class header

1743, Fri 23 Feb 2024 (NZDT)

Moved class row outside class header;  doesn't help, sigh :-(
Went back to debugging header.restore_object . . .

1749, Sat 24 Feb 2024 (NZDT)

Sorted out restoring a field object,
  changed save_to_rdd() to just write all object lines in increasing tk id order
  Can now read save-file-2h properly
Now add field "-+-" when creating a row object << not working yet!

Weird problem with "no objects drawn", now in draw_headers use
  if not (item_id and object):  # Empty tuple, nothing drawn yet
  >> should make that change to other draw_*.py classes <<<<

1118, Sun 25 Feb 2024 (NZDT)

Reworked draw_headers, it now looks like this:
class draw_headers:
    class header:
    	draw_col_nbrs(h, hr)
	mk_save_str()
        class row:
	    draw_tics(h)
	    mk_save_str()
	    class field:
	        mk_save_str()

save-file-1h.rdd has 1 header, col_nbrs, 1 row + 1 field (-+-)
draw_headers_class-1h.py (saved at 1118) restores it properly  :-)

save-file-2h.rdd has 2 headers, each with col_nbrs, 1 row + 1 field (-+-)
  draw_headers_class-2h.py (saved at 1247) restores it properly  :-)

Now want to move a header by clicking in it's col_nbrs row (r_nbr 1)

1627, Sun 25 Feb 2024 (NZDT)

Can now move a field's header, but need to set h_tags on fields!
h_tag added to the field's text_obj, cn=an now move header and it's fields :-)

Oh, oh, for save-file-2h.rdd, moving hdr 1 then hdr 2 works OK, 
  but clicking in either hdr's top row after that draws another top row ???
  
1737, ditto

=+=+= c_o header: h_nbr 1, len(rows) 2
->-> c_o.h_nbr 1, mx,my 164,146
=1= h_nbr 1, region middle, c_o header: h_nbr 1, len(rows) 2
=+=+= c_o header: h_nbr 1, len(rows) 2
->-> c_o.h_nbr 1, mx,my 162,145
# # # dg_b1_click: header mode, 312,139, 5 objects, .!rfc_canvas.!canvas, 4
@@ current_object ><Key 1, Object header: h_nbr 1, len(rows) 2, Type header, I_coords [126, 71, 650, 71], i_text H, parent_id 0 v1 1, v2 0><
  *** changes here, to a field ??? ***
  -> -> obj <Key 34, Object <draw_headers_class.draw_headers.header.row.field object at 0x7ff654f8e320>, Type field, I_coords [388, 88], i_text 0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1, parent_id 2 v1 0, v2 32>
dhc: item_id 34 (text)
b1_click(): item_id 34, item_type text, tags ('h_1', 'current')
312,139:  field  h_1, current
... ... where: rdo = <draw_headers_class.draw_headers.header.row.field object at 0x7ff654f8e320>
   coords 130,71, 646,105
-V-  >field< c_o_coords [646, 105], where far
field: obj <Key 34, Object <draw_headers_class.draw_headers.header.row.field object at 0x7ff654f8e320>, Type field, I_coords [388, 88], i_text 0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1, parent_id 2 v1 0, v2 32>
, , , fh header: h_nbr 1, len(rows) 2, fhr row: r_nbr 1, h_nbr 1
h_obj <Key 1, Object header: h_nbr 1, len(rows) 2, Type header, I_coords [126, 71, 650, 71], i_text H, parent_id 0 v1 1, v2 0>
-|-|- new_header_nbr()

Where do we change from c_o header to c_o field?
  That's b1 up, then down again ??

1209, Mon 26 Feb 2024 (NZDT)

Now use self.move_c_o as the object to move,
  set in b1_click, cleared in b1_release

save-hdr+row-nbrs.rdd displays hdr1 + row1 + col_nbrs text
  can move hdr1 OK
click well below hdr1 draws hdr1
  can move hdr2 OK
click in space of hdr1 top line, get new hdr3 drawn
  with it's top-left corner at point where we clicked.
  seems to happen after change to opposite hdr ???

1423, Tue 27 Feb 2024 (NZDT)

Hmm, clicking on a field gets obj.o_type = 'text'  (allows b3- editing)
  field object only has it's centre x,y in rdg.objects
  but a field sits in a row, which has 4 coords (the row's containing rectangle)
We have a find_closest_header(mx,my)  function :-)

1658, ditto

Tweaked find_closest_header() to assume obj has 4 coords, and find min
  dist to centre for all header objects
Works fine, but header objects only have the header's top line in them !!!
  Seems that adding a row to the header isn't updating it's x1,y1 ???
Sorted that, new save-file.rdd looks much better :-)

1743, Thu 29 Feb 2024 (NZDT)

Improved find_closest_rd_obj(), it now returns object and distance
Also worked on b1_action, can now click on a field and move it's header
  however, release then click below header still moves it :-(

1546, Fri  1 Mar 2024 (NZDT)

Sorted out find_closest_rd_obj, it now returns correct object, h_dist
Added rd_where, to find regon relative to an rfc-draw object
b1_action now starts a new header+top row_where says you clicked
  far from drawn headers (i.e. more than 15 px above their top line,
  of 15 px below their bottom row

 * header object starts with just the top line,
     it's x1,y1 is updated when rows are added
 * b1_click: find_closest field
     field in row 1 (top row) -> move whole header,
       i.e. everyything in it with h_ tag
     mx,my below bottom row (i.e. >= 10 px below),
       add a new row at bottom
     mx,my >= 15 px from field's edges,
       set self.rdg.current_object to this field's header,
         Delete/Insert keys can delete/insert it  (using code in rdg)

1737, Sun  3 Mar 2024 (NZDT)  Day after walk through blackberries!

Start rfc-draw, click -> new header with col_nbrs (row 1)
  click on the row_nbrs, can move the header
  click below the row_nbrs, adds row 2 with -+- field
  But now, click on row 1 -> header 1, region top
           click on row 2 -> header 1, region middle

Need to follow through getting the field for each of these cases, sigh :-(

We need to:
 - find the field clicked in, get it's h_nbr and r_nbr
 - only move it if field's h_nbr == 1 and r_nbr == 1

1233, Mon  4 Mar 2024 (NZDT)

Went back to using tk find_closest instead of my find_closest_object()
Can now move header by clicking in top row,
and can add a new bottom row by clicking just below the header's bottom row

1659, ditto

To add new row to bottom of header, click in region 'bottom' of lowest row
Sorted out problem with clicking a bit below bottom row of header;
  now that doesn't start a new header!
Started on undraw_object for header objects
  (i.e. their top line and all rows:
    (fields: f_id and f_obj) |_| line, and it's object

1739, Wed  6 Mar 2024 (NZDT)

Changed handling of output lines for get_save_string()
  Now have functions_proc(j, ds) save to save-file
  and dsp_proc(ds) to print in in dump_objects()
Worked through cycle:
 rm save-file.rdd; python3 rfc-draw.py | tee xxx.yyy; cat save-file.rdd
but get:
  (n_rect 1) [126, 144, 462, 328] "<+>" 0 0 0
  val.object: 2 None  <<< !!!  
  
1623, Thu  7 Mar 2024 (NZDT)

Realised that rfc_draw_globals_class.py had lots of code chunks duplicated !
Used check-dups.py to look at the rdg file,
  Most of the dups are trivial - same code repeated nearby.
  Tweaked check-dups.py to flag ' <<<' duplicated lines with 'def' in them,
  then went through the rdg file to remove the bad dups :-)
Now rfc-draw can draw a header (with col_nbrs), add a row to it,
  and save it to save-file-2.rdd
Also, clicking away from the main header draws a
  new header, with top line, row and -+- field
    saved as save-test-2-2h.rdd, looks fine  :-)

Tested drawing an n_rect, save as save-test-2-2h.rdd
  1 (text 2) [155.5, 143.5] "Test text in n_rect ?" 0 0 0
  2 (n_rect 1) [153, 141, 557, 327] "<+>" 0 0 0
>>> should be one line (line 2), with the text (line 1) in the n_rect text :-(
  text 2 is there so we can edit it, but we shouldn't save it

1710, Fri 8 Mar 2024 (NZDT)

Sorted out yesterday's problems with saving n_rects -
  we now write save-strings for n_rect's, but not for their text objects.
File   n_rect+line+text+hdr.rdd  has 4 types of object, all load properly :-)
Also,  save-file-3h.rdd  has 3 headers, and works properly !

to do list:  (1 Mar 2024)
 - get undraw_object() to work properly, i.e. undraw all of header
     (it leaves tics, field text and hdr top line on-screen!
   . b1_action() finds closest object, e.g. field
 - start row with field of 32 blanks,
     when adding/editing field's text, pad l&r to centre it in field's width
 - implement click on tic to divide field in two, display bar as separator
     should also allow user to move bar l&r!

Hmm, rdg_closest just uses tk find_closest/item_id to find an object
     Clicking a header top row's field (col_nbrs) to select the object,
       then on_delete_key just deletes the field,
     we need to use field -> header -> all it's rows to undraw/redraw them

1610, Sat  9 Mar 2024 (NZDT)

Looking at undraw() for draw_headers_class.py
Added undraw_tics() in class row, it doesn't work yet

In Header mode, click to draw first header (with |_|, col_nbrs and tics)  OK
Click well below first header, draws seond header, but that has a second
  row (r2) the same as it's first (r1) <<<
Commented out a lot of print states so as to declutter xxx.yyy
  now xxx.yyy looks OK at point where h2, r1 has been drawn
    (i.e. at end of dump_objects -- col_nbrs drawn --)
  but then we have
RRRRR starting class row, h = header: h_nbr 2, len(rows) 1
row header 2, x0,y0, x1,y1 185,293, 709,330
   types y0 <class 'int'>, y1 <class 'int'>
   height = 37
   len(h.rows) = 1
+++ new row at bottom, len(h.rows) 1  <<< WHY do we getthat here?
bottom row 185,293, 709, 330
OBJECT: key 69, obj row: h_nbr 2, r_nbr 2, obj_type row, coords [185, 330, 709, 367], text R, parent 35, v1 2, v2 2
>>

1620, Sun 10 Mar 2024 (NZDT)

Added timing in ms (code from t-test.py), to observe times of b1_actions
  There were only two - one for each new header
Still need to work out why second header gets a second row :-( <<<<<

1520, Mon 11 Mar 2024 (NZDT)

Realised that class header() draws row, |_|, tics and col_nbrs;
  deleted call to add another row from b1_action :-)

Problem with field -> row -> header not being restored properly.
save-1h2r.rdd should show one header, row 1 col_nbrs, row 2 -+-
  We get that, with an extra empty row drawn as row 3
Saved that as save-1h3r.rdd, it has an  extra field 67 added for row 2
>>>  but why has it added a third row?

1250, Tue 12 Mar 2024 (NZDT)

Now class header() checks that we have
  if self.rdg.new_drawing and len(self.rows) == 0
    _before_ it adds a row.
Also, we have two rdd files (test-2h1r.rdd and test-2h2r.rdd) to test this,
  both load properly :-)

1111, Wed 13 Mar 2024 (NZDT)

Decided we don't need to pad field strings out to fill the row width,
  changed  mk_field_str() to not pad with blanks
undraw_object:  undraw() for each header/row/field
  field needs h,hr, row needs h.   Pass d_obj.object for h/r/f objects << No!
  If we re-draw a canvas.deleted item,
    tkinter gives the newly-drawn item a new item id
  Therefore, if we delete a field / row / header,
    we can leave it rdg.objects, marked as 'deleted'

1343, Thu 14 Mar 2024 (NZDT)

Using rdg.where() in b1_action() made it too easy to click further away than
  rdgf.far_px (8 pixels), changed back to using rd_where, and allowing click's
  (for an added lower row) up to 20 px below a header's bottom row

Deleting objects again.  What's allowed?
 - lowest row of a header
 - all of header (click in top row)

Restoring objects:
  Oh, oh, draw_headers_class has restore_object(self,
    obj_type, obj_id, o_coords, o_text, parent_id, v1, v2),
      so does class field!
  header/row/field now have separate restore_object() functions :-)
    (they all have separate undraw_object() functions)
  Testing: Del field -+-, Insert  restores the deleted field
    However, updating the restored field xdoesn't carry through
      to the saved .rdd file, sigh :(
  Added .deleted to class object, now obj.deleted -> it's in rdg.deleted_objects

1214, Fri 15 Mar 2024 (NZDT)

Started on updating a restored field (above)
Looking at draw_texts_class: restore_object draws a new object,
  and returns that.
Aha, itemconfigure(tagOrId, option, ...) allows you to reconfigure a tk item :-)
  options: state tk.HIDDEN makes it invisible, NORMAL to make it visible again
           text = text to be displayed
Reworked headers_class to use this for class field,
  instead of delete() and create_text()
  >>> need to do this for arrow_lines, draw_n_rects and draw_texts classes
Also moved wait_for_input up into class draw_headers,
  so it's simple to call from anywhere
Now we can edit deleted/restored text
  and see the change in a saved .rdd file :-)

Changed arrow_lines_class, that works fine
Changed draw_n_rects_class, that works fine
Changed draw_texts_class, that works fine too

1533, Sat 16 Mar 2024 (NZDT)

In rdgc on_delete_key(), o_type "line":
  we now call undraw_object() via an a_line object
Changed save_to_rdd() to not save objects in state HIDDEN
Made sure the we can edit a field text, even if it was deleted/inserted

To do:
 - Get header.undraw_object() to work properly, i.e. undraw all of header;
     it leaves tics, |_| and hdr top line on-screen!
   Only allow delete of bottom row, when only 1 row (col_headers) delete header

- Implement click on tic to divide field in two, display bar as separator
     should also allow user to move bar l&r!  Maybe keys < and > ?
- Keys +/- to increas/decrease nbr of lines in a row
   # ?? . b1_action() finds closest object, e.g. field

1521, Sun 17 Mar 2024 (NZDT)

Moved row() and field() classes outward, they're now in class draw_headers()
Got undraw_tics() to work, using both_tags using && operator

In arrow_lines_class, need to set tk.NORMAL when restoring <<<   Done
In draw_headers, Delete a row works, but restore a row doesn't <<<

1407, Mon 18 Mar 2024 (NZDT)

Worked through setting tags for row and field objects,
  can now delete/insert/edit them :-)
Still to do:
- Implement click on tic to divide field in two, display bar as separator
     should also allow user to move bar l&r!  Maybe keys < and > ?
- Keys +/- to increas/decrease nbr of lines in a row
   # ?? . b1_action() finds closest object, e.g. field

1513, ditto

Added code in b1_action() to look at o_tags for a line item,
  needs more work yet :-(

1730, Tue 19 Mar 2024 (NZDT)

Finding tics via o_tags now working.
Tried making tics 2 px (was 1), and f_height/4 (was /5)
  Certainly make tics easier to see and click on :-)
Now TkFxedFont seems too light, replaced that with
  ('Noto Sans Mono', 10, 'bold')
  Weight looks OK, but had to add extra spaces into col_nbrs string
  Tried drawing col_nbrs 1 px further right, that's better :-)
Last, header top line needs to be 4px higher, and col_nbrs 2 px higher ??

1118, Wed 20 Mar 2024 (NZDT)

Changed to using self.f_font = ('TkFixedFont', 10, 'bold')
Adjusted header layout settings in draw_headers, can now click on tics reliably
Multi-row headers now look a bit empty, but they _are_ very clear
Checked that b1_action still works, it does, but Delete/Insert grizzles

1500, Thu 21 Mar 2024 (NZDT)

Added r_height(r_lines) to class row, now get 1-line rows added to header bottom
Considering draw_headers.restore_object ...
  rdgc uses restore_object(self, r_coords, r_text, parent_id, v1, v2)
    to restore objects from text in read_from_rdd()
  but draw_headers_class.restore_object() needs to undraw/redraw the object ??
    keep restore_object() as it was, need another function to undraw/redraw,
      def mk_visible(self, True) to set state NORMAL, False to HIDDEN

1032, Fri 22 Mar 2024 (NZDT)

We now have four object functions for n_rect, line, text and header:
  mk_save_str(self, obj)  # make save string for object
  restore_object(self,    # make object from save_str components 
      r_coords, r_text, parent_id, v1, v2)
  undraw(self, obj)       # set obj's state to HIDDEN
  redraw(self, obj)       # set obj's state to NORMAL

python3 ~/rfc-draw-dev/tk-colours.py  shows all the tkinter colours

Now we're not getting click-on-tic handled properly ...
  Instead we draw a new header at the point we clicked ???

1557, Sat 23 Mar 2024 (NZDT)

User must click on tic to add a bar dividing the field above that tic <<<
  e.g. in col to the right of tic 15 makes 2 fields: [0:15] and [16:31]
Need headers[] to remember details of header_class objects
test-class-globals.py explores how to reference such things :-)

1604, Sun 24 Mar 2024 (NZDT)

Made new class draw_headers.bar, to handle a click on a tic
Needs more work, e.g. mk_save_string() etc (as above)

1104, Mon 25 Mar 2024 (NZDT)

Worked on class bar.  Can  now save bar (as save-bar.rdd)
  Can also retrieve it, but it's line isn't drawn ??

1749, ditto

Worked thorugh d_r.row.restore_object, that seems to work now (?)
Now working through d_field.restore_object
  we track back through the field's row to get it's h,
    but that doesn't seem to get it's hr ???

1549, Tue 26 Mar 2024 (NZDT)

Decided that bars should be handled in class row, which  has .fields info
Implemented that, now get clicked on tic: h 1, r 2, c 19;
   row.clicked_on_tic(1, 2, 19);  header 1, row 2  :-)

Names for rdg object vs header/row/field (i.e. python3, or class) object ???
  rdg_obj  or cls_obj ???

1735, Wed 27 Mar 2024 (NZDT)

Made draw_headers.field.split_field(), needs more work
We have to
 - make new field claass object for the field's right half
     put that into rdg.objects
 - change the old field object by halving it's length, and updating it's cx
     reflect that change into rdg.objects

1742, Thu 28 Mar 2024 (NZDT)

Worked out how to change field background colour (see change-background.txt)
Added fcolour as last parameter to class field(),
  put "white" in all field() calls
Now split_fields() can set lh field "khaki", rh field "light sky blue"

1057, Fri 29 Mar 2024 (NZDT)  Good Friday

Realised the rectangle uses outline=colour, can't use relief=tk.FLAT
Now field() uses colour None for no outline, tk-colour name for colour fill :-)

1243:  ditto

Almost correct now, but
 - bar is on correct x,y position
 - right edge of blue left is at left of tic 8, looks OK, but
 - left edge of khaki right is a little to left of the bar
 - right edgge of khaki is covering RH line of it's row :-(

1729, ditto

Testing split-field()
  (left of) tic  8  OK, but can't see bar
            tic 12, 16, 20, 24, 28  ditto
  Try only drawing left (blue) field, then only right
  Also, right of RH field is silghtly too far right ??

1730, Sat 30 Mar 2024 (NZDT)

Now have split_field() working,
  layout tweaked so fields fit nicely into the row :-)
Couldn't re.parse save-mpm.rdd (simple test rdd file)
  (field 34) had it's coords enclosed in (), should be [] :-(
  Hmm, text and row get their coords in []; why not field ??

1737, Sun 31 Mar 2024 (NZDT)  Easter Day
Realised we need another class for bar, created that,
  moved bar-drawing code into it from field.split_fields()
Almost working, but ... :-(
  we don't seem to be creating a header
    and getting it appended to draw_headers.headers[] ???

1743, Mon  1 Apr 2024 (NZDT)  Easter Monday

At last, made save-row1.rdd, showing the field's now have the correct row_id
However:
  - the split row's (bar id) has correct row_id, with text "-+-", should be ""
  - split_fields should split the original field text into it's lf and rf
      (It uses "L" and "R" at this stage)

1744, Tue  2 Apr 2024 (NZDT)

Worked on startup using save-row1.rdd
  field and bar have row_id, can read row from that
Currently stuck on field.restore_object()

1713, Thu  4 Apr 2024 (NZDT)

classBfromclassA.py made it clear thet self __in a function__
  is the __caller's__ environment
Anything changed (updated) in the function
  is left in the caller's environment <<<

Back in rfc_draw_headers, field uses a text object, tk id 34
  but we use id 34 for the field object ???
Need to work out how best to handle this ...
  Just now we have (field 34) and row 35
Should the field's restore_object() only restore the text object ?

1053, Fri  5 Apr 2024 (NZDT)

Oh, oh.  In rfc_draw_globals_class.py,
  we had          self.f_font = ('Noto Sans Mono', 10, 'bold')
  changed that to self.f_font = ('TkFixedFont', 10, 'bold')  # points
but that changed the char_width, so now col_nbrs looks cramped :-(

Hmm.  Noto Sans is a free font from Google, we'll have to stick with it
  Also, Noto Sans Font looks fine without bold :-)
Can now read save-hdr1.rdd, add a row to it, and write save-row1.rdd,
  and read it back in :-)
Then, click on r2 tic 8 brings up blue L field, then crashes

1658, ditto

Made tctg.py to help understand calling a class from another class
  You have to create to a class object _before_ you use it,
    that creates it's class (local) namespace

Clicking on row 2 tic 8 draws L and R fields, with bar in right place :-)
  Saved that as save-row2-2f.rdd
Reading that on startup draws row 2 with the bar (and no background colours),
  but the bar is drawn half a tic width left of tic 8 :-(
Need to sort out where r_coords, f_coords and b_coords are set and used <<<<<

1725, Sat  6 Apr 2024 (NZDT)  Maziar and Raquel's visit

Sorted x position of bar (above) :-)
Now looking at what happens when we divide a (previously split) field -
 - starting from L f_col 0 width 8, R f_col 8 width 24  < OK
 - split at tic 20 gets 'Screenshot r2 split twice'.png
     should have made L blue  f_col 7  width 12
                      R hhaki f_col 11 width 12  (8+12+12 = 32)
		      8+12 = 20, bar is drawn at tic 20 :-)
   Need to track this through split_fields() <<<

1742, Sun  7 Apr 2024 (NZST)  Water leak in Laundry/En-suite wall :-(

Working through split-fields ...

1709, Mon  8 Apr 2024 (NZST)  Blake from McBeths fixed the lead :-)

In split-fields(), attempt to undraw R text seems to change the text ("R")
  from bold to normal.  Was the normal R drawn earlier ???
Changed field.undraw and redraw to use f_rdo.key
  Clicking on tic 8 (left of) undraws the initial -+-,
    but then the blue L and khaki R fields have each other's widths ??? :-(

1609 , Tue  9 Apr 2024 (NZST)

Working through save/restore of the col_nbrs field
field.restore_object() creates text object 34,
  and field object 35, (which is f_rdo.object).
In objects{}, fclo.f_rdo is field object 35;
                   that uses text object 34 via f_clo.text_id

Tested this to make xxx-edit-Text-in-Field.txt
Looking at that, we seem to take field 35 and text 34,
  and combine those into field 34 !!! ???

1707, Wed 10 Apr 2024 (NZST)

Wrote shrink_field(), used it to shrink L field to 8 cols,
  works properly, but didn't draw the dividing bar ???
Saved the drawing as save-r2-split.rdd, but
  python3 rfc-draw.py save-r2-split.rdd  crashes, sigh :-(

1251, Thu 11 Apr 2024 (NZST)

Added code in split_field() to draw old-text bar new-text-X
That works as expected, but the bar doesn't appear in save-r2-split.rdd ???

1551, ditto

Now drawing the bar.
Trying python3 rfc-draw.py save-r2-split.rdd
  - We get the text 34 (col_nbrs) overwritten in objects[] as field 34
  - then we restore row 35, which gets key (tk id) 36

Hmm, perhaps it would be simpler to keep a text rdo for each field ???
  e.g. text  tk_id  "-+-"
       field can use it's text (e.g. "35") as the tk_id for it's text
  Implemented that, but ...
dump_objects -- RESTORE field --
1 (header 1) [158, 163, 682, 246] "H" 0 1 0
2 (row 2) [158, 163, 682, 213] "R" 1 1 2
3 (field 34) [167, 164, 676, 208] "34" 2 0 32  <<
4 (text 35) (420, 184) "34" 2 0 32   << Need text first, then field usbng it
5 (row 36) [158, 213, 682, 246] "R" 1 2 2
- - dump - -
Also saved save-r2-split.rdd DOESN'T have the field's text object <<<<

1629, Fri 12 Apr 2024 (NZST)

Tweaked class field: it first makes the field's text object f
  (f.object is a field), then changes it's type to field
Can edit both parts of a split field using b3_click  :-)

But now, splitting the RH part of those fields doesn't work
  we go from f_col 8, width 32, text X,
  then click col 20: we go to 8,20 X bar 28, 4 X
                    should be 8,12 X bar 20,12 X

New feature: in save-file,rdd, remember which mode (e.g. Headwr) we were in <<<
Now save last_mode to rdd file, and read it in rdg.read_from_rdd()
However, just calling rdg.set_mode(last_mode) isn't enough,
  we want the last_mode button down :-(
Tried doing that in rfc-draw.py, failed.
Restored 12 Mar rfc-draw.py from n-backup

1530, Sat 13 Apr 2024 (NZST)

Sorted out rfc-draw: if *.rdd has last_mode, we now start in that mode,
  and it's button is down :-)
Saved a copy of rfc-draw as rfc-draw-last_mode.py

Sorted out split-field, can now split an already-split field
  saved as save-r2-split3.rdd, can reload it correctly
On-screen, the bars are wider than neeeded;
  they're now drawn 1 px wide, at centre of 4-col tics (width 3 px)

Testing: example-diagrams has all the v1 example files
Noted that v2 rfc-draw has trouble drawing n_rects,
  e.g. example-diagrams/draft-ietf-core-href-12.rdd  <<<<
       Looks as though only the first n_rect gets it's rectangle drawn ????

Back to python3 rfc-draw.py save-r2-split3.rdd
  This has problems too, sigh :-(

1751, Sun 14 Apr (NZST)

Tweaked draw_n_rects, RFC2772 now draws rectangles for _all_ the n_rects :-)
Current version of rfc-draw.py works, but starts with no button pressed :-(
  rfc-draw-12mar.py starts with Rectangle button pressed ???

1442, Mon 15 Apr 2024 (NZST)

Tweaked rfc-draw so that we start with the last_mode button down,
  or the Rectangle button if we don't have a last_mode :-)
    r_buttons_class.py declares b_rect button with relief=SUNKEN.
  f we're starting in 'rect' mode,
    we don't call d_canvas.r_buttons.change_current()

1615, ditto

Calling restore_object routines from rfc_draw_globals_class.py
    for line, text and n_rect
  works properly without self as the first parameter (B calling A.function)
But calling restore_object routines from subclasses in draw_headers_class
  only works if we pass self as the first parameter  ???
  
https://stackoverflow.com/questions/44340177/python-self-parameter-while-calling-function-from-another-file
says "Make a class instance ca, then call class functions a ca.function_name()

Implemented that in rfc_draw_globals, using 
  self.rdg.starting_up to control how the header/row/field/bar_cls
    functions are set up
Needs more work!

1721, Tue 16 Apr 2024 (NZST)

Changed implementation of _cls classes.
Now, header_class = self.header_cls = self.dhc_tool.header(
            self.drawing, self.root, self.rdg)
  i.e. rdg.header_cls is a class object, without initialised parameters
And, each _cls has a new() function, to create a new (initialised) cls object

So far, this works for header, and maybe row, but probably not field,
  header.draw_col_nbrs() fails to draw the col_nbrs, sigh :-(

1508, Wed 17 Apr 2024 (NZST)

In _cls classes, need to return self from new() functions,
  python only does that for class initiations (as *_cls for us)!

1748, Wed 17 Apr 2024 (NZST)

Now have save-cls-r2.rdd looking right :-)
But we crash when we load it; note that row needs two parameters, h, r_lines
  Need to give row_cls.new both of those to create a row <<<

1727, Thu 18 Apr 2024 (NZST)

Slow debugging of _cls and _cls.new ...
Now able to draw header, save it as save-hdr.rdd,
  and restore it from that .rdd :-)
Re-drew save-cls-r2.rdd; looks OK on screen,
  but crashes when we restart using it :-(

1649, Fri 19 Apr 2024 (NZST)

Debuging effort on python3 rfc-draw.py save-cls-r2.rdd,
  so far unsuccessful :-(
Pproblen with rd_object.obj -
  Attempts to print it often fail :-(
  Fixed that, we now return an str from all
    __str__ functions in draw_headers_class.py
Problem with rdg.object, object is a python3 keyword,
  changed it to rdd.rd_object
  All rd_objects should now have self.a_obj set (instead of self.object)

1732, Sat 20 Apr 2024 (NZST)

Fixed rd_object problems above.
Looked again at rfc-draw. It's startup sequence is ...
  rdg = rdgc.rdglob()  creates rdg
  last_mode = rdg.read_from_rdd(save_file_name)  reads the save_file
  startup mode is 'rect',
  but we may change to last_mode if it's not 'rect'

1729, Sun 21 Apr 2024 (NZST)

python3: import keyword;  print(keyword.kwlist) shows object is NOT a keyword !
Kept class rdg.object, but use self.a_obj for it's object (2nd) parameter.
Reworked rfc_draw_headers_class.py again,
  classes header, row and field work properly again now :-)

Idea: field draws bar at left provided cn != 0
  Doing that, we don't need a 'bar' class :-)
  python3 rfc-draw.py save-h1r2.rdd  << Needs work
  File "/home/nevil/rfc-draw/rfc_draw_globals_class.py", line 660, in restore_saved_object
    t = self.header_cls

1727, Mon 22 Apr 2024 (NZST)

Reworked restore_saved_object() to make t = classes for header, row and field
Now we're able to call t.restore_object(), 

Alas, now  python3 rfc-draw.py save-h1r1.rdd < with header 1 and row 2
    draws top line, and _two_ rows with tics, but no field text in them :-(
  - why does it draw a second row (row 34) ?
  
Or, when only restoring header 1, why no |_|, tics or col_nbrs drawn ???

1610, Tue 23 Apr 2024 (NZST)

Reworked restore_saved_object() to use header, row and field classes
  directly, to create both *_clo and *_rdo instances instead of
  using restore_object functions (but we _do_ still use those for
    line, text and n_rect)!
We now have save-h1r1.rdd and save-h1r2.rdd;
  both look OK, and reload properly :-)

1622, Wed 24 Apr 2024 (NZST)

Realised we don't need 'bar' as a separate class.
Instead we can just draw a bar at left of fields with f_col != 0 :-)
Made that change, now save-h1r2.rdd has three fields, and
  python3 rfc-draw.py save-h1r2.rdd  works fine :-)
Bars didn't move with rows; now we set h_tag for bars

Still to do:
  1. Increase space at top of row (so that 1-line rows look batter) << DONE
  2. Allow n-line texts to expand (or reduce) row n_lines
  3. Allow user to delete a bar ?  (combine field texts, f1+f2) 
  4. Allow user to drag a bar left or right ??

1733, Thu 25 Apr 2024 (NZST)

Added key_press for + and - to draw_headers_claass.py, that works fine
Decided to see whether dragging the bottom left or right corner of a
  row could be used to uncrease/decrease row's r_lines
Worked on rd_where, want to detect b1_click at ll of lr of a row
  Failed to make that work, sigh :-(

1107, Fri 26 Apr 2024 (NZST)

Backed out of yesterday's changes ro b1_action/rd_where -
  changed b1_action to use rdg.where
Can now click on left or right edge (line) of a row;
  we print 'clicked near row edge, +/- to change row lines'
  Should display that on-screen <<<
Then will need to undraw/change r_lines/redraw,
  simple for bottom row, but it needs to work for _any_ row <<<
Do we actually need rd_where()?  No commented it out this morning :-)

Can we click on a bar?  No, draw_headers thinks we're clicking on a tic
Hmm, ticks are 12 px high, a row with r_lines = 2 is 40 px high
    row.h.tic_height = 40

1657, ditto:

Clicking on a tic gives tic's item_id, so we can get it's coords
However, we find its's hn,rn and cn from it's tags -
  so draw_tics() should always set all three!

To tell tic from bar in b1_action (~line 966):
  bar has l_height = 40, tic has line_height 10,
    say >= 25 = bar, < 25 = tic

1500, Sat 27 Apr 2024 (NZST)

Click on bottom line of a row (between tics); rdg.where -> row, region middle

Added t_t tag to draw_tics, use it in b1_action to test
  whether item_id is a tic.
Otherwise it's a bar (at left of a field) - much simpler!

In b1_action, can now detect region = left, middle or right of row bottom line
For middle, want to drag that line up/down to decrease/increase
  row's number of lines
b1_action() needs to interact with change_row_lines() to make this happen :-)

1706, Sun 28 Apr 2024 (NZST)

Implemented 'drag bottom line of row to change r_lines,
  saved copy: cp draw_headers_class.py draw_headers_class-sun28.py :-)
Now to actually redraw the row to implement the requested (+/- 1 line) change !

Started on that, for bottom row.
  Redrawing works, but we're getting multiple 'down' events <<<<
    Look into b1_action/crl_coords :-)
  Also, we're not moving the tics down <<

1737, Mon 29 Apr 2024 (NZST)

Now change_row_lines is de-bounced, so we only add or subtract a line :-)
But we're not moving the tics line properly ...
  need to move the tics with h_tag && r_tag
tics aren't kept in objects[], so don't need to update r_clo !!
  Make a move_tics() function <<<

1655, Tue 30 Apr 2024 (NZST)

Finally got change_row_lines() to work ...
  From r_lines 1 to 2 top line (from text in original field) is fine,
  but when we change to 3 lines, centre is too high.
    Need to compute new centre y for text with more/less lines
    i.e. for all fields in the row, call field.set_cxy()
  This still needs work <<<<

1536, Wed  1 May 2024 (NZST)

row lines +1 now works, f_cx,f_cy set properly :-)
However, saving it to save-hhh.rrd fails,
  last line in file is "last_mode header"

Made 2 .rrd files:
  save-h1r2-rl1.rdd  has 1-line text in row 2
  save-h1r2-rl2.rdd  has 2-line text in row 2
diff r2-l1 and r2-l2 is
8,9c8,9
< 4 (row 35) [151, 185, 675, 221] "R" 1 2 2 <<<<  row 2, n_lines 2; why not 1?
< 5 (field 67) [160, 186, 669, 216] "-+-" 35 0 32
---
> 4 (row 35) [151, 185, 675, 221] "R" 1 2 3 <<<< n-lines increased by 1
> 5 (field 67) [160, 186, 669, 233] "-+-" 35 0 32

Ah, add row below current bottom row copies it's n_lines !
Changing that to r_lines = 2 looks just the same ??
  Ah again; top row uses self.y0+self.row_height(2),
      row at bottom uses self.y1+self.row_height(1)

1144, Thu  2 May 2024 (NZST)

Fixed yesterday's problems, save-hhh.rdd loads and displays correctly :-)
Now, dragging down on row bottom doesn't extend bars down <<

1721, ditto

Separated out draw_bar(self, f_clo)  # draw bar for field f_clo
Call it from change_row_lines() and class field
bar coords are .b_coords = [self.bar_x, ry0, self.bar_x, ry1]

now we get
  File "/home/nevil/rfc-draw/draw_headers_class.py", line 700, in split_field
    rf_clo = draw_headers.field(self.rdg, fs_clo.h, fs_clo.r, "X",
  File "/home/nevil/rfc-draw/draw_headers_class.py", line 591, in __init__
    self.f_clo = self.draw_bar(self.f_clo)
  File "/home/nevil/rfc-draw/draw_headers_class.py", line 611, in draw_bar
    self.b_coords = f_clo.b_coords
  AttributeError: 'field' object has no attribute 'b_coords'

1453, Fri  3 May 2024 (NZST)

5 (field 67) [141, 175, 268, 222] "-+-" 35 0 8  cx,cy =  204.5, 198.5
6 (text 68) (458, 189) "X" 35 8 24      <<< y higher 9 px     

1637, ditto

Struggled to get change_row_lines)( to work properly,
  created save-222.rdd which has two 2-line texts in fields :-)
The texts aren't centred vertically in the line,
  but that's actually what we want (e.g. could make them 3 lines)
However, dragging the bottom line down redraws the row 2 frame,
  but doesn't redraw the bar down to bottom <<<

Saved that (with bar not down to row bottom) as save-222b.rdd,
  that loads properly, with text centred vertically
    and bar drawn to row bottom :-)  ???

Need to implement double-b3 to delete the bar
  (Delete is for Delete/Insert simple objects)!

1525, Sat  4 May 2023 (NZST)

Changed cursor to double_arrow (up+down) when in hdr_mode "change_row_lines"

Reworked set_cxy, where we set the centre-of-row coords for row field's texts
 1. set_cxy code looks convincing, but two-line text is drawn too high !!!
 2. Need to click a bit lower down to add a row !
 3. Can only drag to change row_lines once !!

1. set_cxy now uses r_clo as a parameter >>> Need x0,x1 for field in row <<<
   changed r_tgap and r_bgap to help rows look 'proper'
2. changed rdg.res_px to 5 (was 4)

Now, in row 2 we have -+- at centre,
  click left of tic 8 draws bar correctly, by "X" text us drawn on top of -+- ??
Saved as  save-r2-bad-split.rd, which looks correct,
  but it loads and displays with X and -+- overlaid at centre x of row

1722, ditto

Reworked save_cxy() to use an f_clo as it's parameter,
  made save-222c.rdd, which has row 2 with 2 2-line fields
    splitting that again worked, :-)
    dragging bottom one more line; bars not redrawn down to new row-bottom
    couldn't drag up after that :-(

1726, Mon  6 May 2024

Can now draw header (r1) and r2, drag r2 bottom down/up.
  Mouse up, down and drag now works as expected, bar is drawn correctly
save-222d.rdd has 3 fields, with 1,3 and 2 lines :-)

To do:
 - sideways drag to move bar
 - double-b3 to delete bar
 - double-b3 of left or right to delete row

1751, Tue  7 May 2024 (NZST)

Started implementing b3_double action, not working yet :-(

1116, Wed  8 May 2024 (NZST)

Implemented b1_double in draw_headers, worked on d_b1 to delete bar
Because a bar is part of a field, it doesn't have an objects[] entry;
  clicking about 1.5 tic_widths gets the field,
--> a bar needs to have an objects[] entry.  Started on that
  
1731, Thu  9 May 2024 (NZST)

Decided to use an f_tag for a bar, rather than an object; implemented that
Move on to moving a bar left/right ...
  Separated find_field(fs_clo, tf_f_col, tf_width) out from split_field(),
  Now can use find_field() to find fields either side of bar :-)

1107, Fri 10 May 2024 (NZST)

In move_bar(), we now use find_field() to find the fields
  either side of the bar in it's r.fields[].
Now we have to delete then redraw both those fields:
  Only have a bar for fields with f_col > 0

1700, Sat 11 May 2024 (NZST)

More on move_bar:
  draw_headers.field.move_bar(self, f_obj, +1)  # Right
  move_bar() finds f_obj in f.r.fields,
    extracts lf_clo, rf_clo and lf_rdo, rf_rdo,
    and uses  draw_headers.field.change_field_widths(self, lf_rdo, rf_rdo)
      to actually reposition the lf_clo, rf_clo and rf_clo's bar

  Now have it tracking cursor (on bar) moving to right,
          field's row f_col,width: 0,  8 | 8, 24  << changing properly
  down to field's row f_col,width: 0, 28 | 28, 4

 On-screen, we can now move the bar 1 col to right,
   and again soon after, for 2 to 3 cols
 But we can't move it to the left at all ?

Changed to allow repeated moves, can move to the right (out past col 32!),
  but  X  position dosen't change ??
  And we still can't move to the left !!

1708, Sun 12 May 2024 (NZST)

Drag bar to l or R now almost working, however ...
  lf_clo text stays centred in field,
    but rf_clo text is crowded to right!
  with bar left of col 16 (lh_clo has 16 cols)
    -|- is left of col 8 < should be under tic, it's about 3 px to the right
  but rh_clo also has 16 cols (ends after col 31)
    X should be left of col 24, but it's drawn in col 25 <<< ???

  Also, moving bar back to the left does NOT move X at all (should move left)

  And click+drag bar should move 1 step L or R,
  It works properly if we click then drag about 0.5 s afterward

1726, Mon 13 May 2024 (NZST)

Changed mode move_bar, now takes 2 px movememnt to shift the bar :-)

Still problems with move_bar() not working properly for move left !@#$%^&

Got sick of having to click very close to bottom row to add a another row
  dh_closest() should return item_id, obj for row  ? ? ?
  
1524, Tue 14 May 2024 (NZST)

Can  now click within 2 lines below row to drag it's bottom line down :-)
>>> Will need to move lower rows down as well <<<

Added (lots of) debugging output, found that rf_clo.width was being
  incremented in change_fields_display(), deleted that, now it all works :-)
Added rdg.msg_display( "warning") for lf_ or rf_ with width only 1

1123, Wed 15 May 2024 (NZST)

Swapped actions;
  click between tics _on_ bottom line of any row to change nbr of lines in row
  click below bottom line of lowest row to add another row

increase lines in row n -> move rows below n down 1 line <<
drag up can't take nbr of lines below 1 <<<

1727, ditto

Sorted above problems, but now ...
  draw row 1 (blue), row 2 (brown), row 3 (red),
  drag row 2
  draw row 4 (orange) -> 1/2 -line row ???

Tried moving row by changing it's coords (line 366 onward),
  that didn't work :-)

1711, Thu 16 May 2024 (NZST)

Continued work on changing row size for header with 3 rows; 1(col_nbrs), 2, 3:
 - changing down up of row 3 works fine :-)
 - changing down of row 2 works, but ...
   changing up of row 2 moves text up a line < not setting c_xy

[[ set_cxy: x0 188, 442, x1 697, text >-|-<
{{ set_cxy: y0 133, 127, y1 159, text >-|-<
                    ***  Above y0, should be (y0+y1)/2 ????

1605, Fri 17 May 2024 (NZST)

In change_row_lines(), we now use move(tag r_id) to move _all of_ row
    (|_|, tics and all the row's fields),
  then change y0 and y1 by +/- draw_headers.line_height

Started on double-b1 to delete a bar, i.e. field to right of bar
Can now find field in it's row, and make combined new field;
  need to check that r.fields changes as expected (print before and after),
  then save drawing and check fields are all correct

Need to del popped field from rdg.objects
and to undraw old two fields, and redraw the row

1719, Sat 18 May 2024 (NZST)

Edited save-xxx.rdd, now texts all include their row number
b1_double on row 3's bar blanks old_lf, leaves old_rf (with it's bar) in place
Need to work through last xxx.yyy :-(

1705, Sun 19 May 2024 (NZST)

Now have b1_double working properly, redrawn LH (i.e. combined LH-RH)
  is drawn correctly :-)
Save it as save-qqq.rrd, however, reading that on startup crashes

Saved screenshots save-xxx.rdd.png and save-xxx-after-deleting-r3-bar.png
Need to work through them to see what's different
  e.g. combined field "-3- X3" is there,
       but field -3- is still in save-qqq, but "-3 X3" is not :-(

1420, Mon 20 May 2024 (NZST)

python3 rfc-draw.py save-xxx.rdd
delete bar on row 3, save as save-xx3.rdd  reading xx3 crashes
edited xx3, saved as xx3a, that loads OK :-)

Bug:
Sorted out creating new_lf, and writing it to the .rdd file.
 Double-b1 not on a bar gives
 Exception in Tkinter callback
 Traceback (most recent call last):
  File "/usr/lib/python3.10/tkinter/__init__.py", line 1921, in __call__
     return self.func(*args)
   File "/usr/lib/python3.10/tkinter/__init__.py", line 839, in callit
     func(*args)
  File "/home/nevil/rfc-draw/draw_headers_class.py", line 1217, in dg_b1_action
     o_tags, f_id))
 UnboundLocalError: local variable 'f_id' referenced before assignment

RFC9293-TCP.rdd drawn from scratch in 13 minutes :-)

But ...
 1. 'r' looks like i on-screen (maybe find a better font) ? ? ?
 2. loading RFC9293-TCP.rdd -> crash
    OK for lines 1 to 9, crash on line 10

Weird results on trying this, decided to look at mono fonts again
Google's Space Mono seems the best, clear difference between i and r

Started rfc-draw, drew header + col_nbrs, saved as save-hhh.rdd
  Now python3 rfc-draw.py save-hhh.rdd reads the rdd file,
  dumps objects, then exits!  What have we broken this time ?

1728, Tue 21 May 2024 (NZST)  Eye appointment with Derryl in Rotorua

Looking closer into reading in RFCC9293-TCP.rdd
Reading save-xxx.rdd worked OK down to line 8, field 102
then got line 9 (row 105) restored as row 103 ???

Oh, oh, # comments aren't allowed in a .rdd file
Reworked test-re-match.py, picking out # + text to end of string
  is the cleanest way to do this -
  take out the comments, then decode the front part of the string as before :-)
Need to get that code into rfc_draw_ !!

1118, Wed 22 May 2024 (NZST)

Reworked rerev2 regex to have 9 fields, last (new one) is 'Optional comment'
Now can load lines to 9 (row 105)

Realised that restoring uses create_line/text/etc -
  no contol over what item_id is used (tk just uses next available)
Since we're building the objects dictionary,
  we need a dictionary of old (from rdd) -> actual item_ids !

1444, ditto

Implemented self.new_ids to do that mapping,
  now can read and display all of RFC9293-TCP.rdd :-)
Now, why is font size for col_nbrs bigger than for the other rows?

Ah, that's because draw_texts_class.py wasn't importing f_font from rdg, fixed

Now 9293-TCP looks fine, but (alas) the RFC Editor html version
  has the col_nbrs in 2 lines without tics at the top of row 1 <<<
Today's version saved as draw_headers_class-22may.py

Started on treating header and row 1 as a special case,
  saved as save-text.rdd
save-text.rdd crashes on loading, sigh :-(
  It has row 3,  that should be row 2 ???
  
Also, RFC 9293's bottom 3 lines  are "|  :", ":  :" and ":  |"
  How could we do that on-screen, i.e.
  how best to indicate an unspecified-length field ?
  RFC 791 didn't do that, do we need to?
    Could do it by drawing the line in sections,
      with dash(d,s) d=dash px, s=space px
    Use V key to mark row |_| as variable-length

svgwrite _can_ do dashed lines on svg, bookmarked as stroke-dasharray

1445, Thu 23 May 2024 (NZST)

Looking into dashes on side of a row
  Click on left or right edge of row to mark it as var_len
  Save var_len row with n_lines as -n_lines
Added code To class row to draw dashed lines on var_len row(s)
>> Could make gap below col_nbrs a wee bit less ?

Also added code to use negative v2 (r_lines) to indicate a vbl_len_row,
  this doesn't work properly yet <<<<<<

1117, Fri 24 May 2024 (NZST)

Reading back a row: rdg.restore_saved_object() must handle -ve v2 
  (Had to initialise hdr/row/field classes directly,
    couldn't do it using /row.restore_object() !!)

1738, ditto

Got it all working, including nicer vbl_row_len :-)
Then broke it trying to decrease gap between col_nbrs and top of row 2
  Now work on from there, sigh :-(

1510, Sun 26 May 2024 (NZST) Sat 25 was Opus Concert in Rotorua

Managed to reconstruct draw_headers_class.py after Friday's bungle :-)

Changes recovered:
 1. No top line for row 1 (i.e. header + colnbrs)
 2. v2 < 0 -> r.vbl_len_row True
 3. In rfc_draw_globals_class.py, restore_saved_object()
      handles -ve v2:      
          v2 = -v2;  h_clo.vbl_len_row = True
          print("       h_clo.vbl_len_row %s" %  r_clo.vbl_len_row)
Saved a copy as draw_headers_class-26may.py << Draws full TCP header,
  with no top line (just colnbrs at top)

Realised that
 - 7996 does allow stroke-dash-array, so we could use that for vbl_len_rows;
     however, I've implemented vbl_len_rows by drawing 3 line segments,
     which looks fine :-)
 - 7996 only allows fonts 'serif', 'sans-serif', and 'monospace',
     so we can't use f_font = ('Space Mono', 10)
 Let's see how it looks after rdd_to_svg < < < <

 Other things to do:
 1. redraw var-len-row after click left or right
 2. consider getting colnbrs a little closer to the bottom of it's row

1538, Mon 27 May 2024 (NZST)

Implemented 1 and 2 above; saved draw_headers as -27may
Now looking at rdd_io.py, use save-h1r2.rdd to start with (rather than RFC9293!)

cp rdd_to_svg.py test_rdd_io.py
Started on test_rdd_io.py ...

1715, Tue 28 May 2024 (NZST)

Worked on rdd_to_svg.py | rdd_io.py
 - n_rect.svg displays properly on firefox
 - monospace-text+line.svg  bad on firefox, looks OK on Inkscape,
          but edges of drawing are too big (x -150 to 370, y -20 to 430)

Tried python3 rdd_to_svg.py RFC9293-TCP.rdd -b7  -  that crashed
  will need to implement header, row and field in rdd_io.py <<<

1756, Wed 29 May 2024 (NZST)

rdd_io.py and rdd_to_svg.py now almost working
monospace-text+line.svg looks OK, but had to tweak rdd_to_svg.py
but, alas, text+line-v2 crashes

1727, Thu 30 May 2024 (NZST)

Sorted out problem with 'header' showing up twice -
  rdd_io.rdd_rw(sys_argv) was also being called inside rdd_io !!@#$
Then got row |_| drawn (mostly, more work needed)
Ditto for fields - these texts need to be centred in the row rectangle <<

1703, Fri 31 May 2024 (NZST)

In rdd_to_svg.py, tweaked adj_coords to add 2*border_width to coords,
  min_x and min_y have already had 1*border_width added
  to make the outer border!
Now n_rect.rdd -> n_rect.svg loks good :-)
So does monospace-text+line.rdd, but it's clear that for svg mono_font
  bold, char width for space is smaller than that for digits,
  and for normal, space is bigger then for digits ?? :-(
However, we have to use monosapace to comply with RFC 7996, sigh
  We could draw colnbrs, treating line 2 as only '0', '1' and '2' :-)

1438, Sat  1 Jun 2024 (NZST)

.rdd files;
  save-h1r1  header only
  save-3rows hdr,two rows, one -+- field in each
  save-h1r2  header = row 2 with three fields
  row-test = TCP

We call adj_coords() in draw_objects() as first parameter for
  draw_line, draw_n_rect, draw_text, draw_header, draw_row and draw_field
  then we _don't call it in any of the draw_* functions

self.draw_text([cx, cy], "012 456 89 .. ") appears twice
  in draw_row for r_nbr == 1,
and the row line/rectangles is drawn 1 (text) line too low 

1544, Sun  2 Jun 2024 (NZST)

Now have row |_| lines drawn properly,
  and fields (i.e. texts) centred L-R, but about 1 line high U-D
For text, width 8.0 works properly, 10.333 spaces the chars out too far
  (draw_text writes each word using f_width, colnbrs has spaces between digits!)

draw_texts now working, but text is too high in each row.
Copied declarations of hdr/row/fld sizes from draw_headers_class.py
  now need to use them to get things correctly positioned in rows

1716, Mon  3 Jun 2024 (NZST)  King's Birthday

Wrote draw_tics() for rdd_to_svg.py,  problems:
 1. Lines look good, but tics stop 2 line-widths above row's |_| lines
 2. Field texts are centred a bit high
 3. Header lower line needs to start/end half a line-width out

1315, Tue  4 Jun 2024 (NZST)
for 
Fixed 1 and above, and 2 using 0.75 px more at start and end :-)

1657, ditto

Got 1, 2 and 3 sorted for save-3rows.rdd :-)
Started on save-h1r2:  header r1, fields 2, 2L, 2R across r2
  Texts (colnbrs, and fields) land in correct positions,
  but row lines stop at col 25 rather than col 32 ???
Saved output from python3 rdd_to_svg.py save-h1r2.rdd | tee xxx.yyy
  as save-h1r2.output  # need to work through this :-(
Also, haven't yet tried to draw bar lines for fields 2L and 2R

1605, Wed  5 Jun 2024 (NZST)

Now have
  save-3rows looking correct,
               to just past col 31  :-)
  row-test   frame only goes to just past col 24,
               3-line row is in wrong place
  save-h1r2  frame only goes to just past col 24
               fields and bars OK, text a bit too high
Changed font width to 8 in save-h1r2.rdd and row-test.rdd

save-h1r2 now has correct width, looks about right,
  but isn't handling space in field 1 | field 2L and field 2R properly :-(
row-test same comments, the 3-line row is 2 lines above where it shoulld be ???

Tried to get texts in save-h1r2.rdd to render properly,
Looks as though char size used for words is a bit bigger than for chars ?
Tried just drawing every char in it's position, that almost works :-(

1146, Thu  6 Juhn 2024 (NZST)

Tried drawing 1 horiz and 2 vert lines, with text above: text+lines.rdd
 - last_mode new_ln, should have been line (not line sub_mode)
 - draw_lines: b key for bare ends doesn't work

Still, python3 rdd_to_svg.py RFC2722-TM-Architecture.rdd  works properly :-)

1632, ditto

Realised that draw_texts_class.py wasn't updating coords of a text when it
  was moved.  Fixed that, now text+lines.rdd updates and draws properly.
Text coords are [x,y] for the text's centre <<<
Sorted out draw_texts() in rdd_to_svg.py, now draw each word, font_size in px

Test file text+lines now looks fine on-screen and in svg :-)

Looking again at draw_lines_class.py, click near end of line should extend it -
  it doesn't.  Instead it says
    b1_click(): At end of line
    >> Direction must change at a junction!
We need to get into ln_mode "extend"  <<<<<<<<<<<<<<<<<<<<<<

Trying on two lines |_, can extend up on | segment, and _ on _segment :-)
Looks as though we never though about extending a single segment!

Trying rdd_to_svg.py row_test.rdd (copy of RFC9293-TCP.rdd,
 - header colnbrs too low
 - 1-line rows look fine (could reduce row height to close up above the text)
 - 3-line row draws in a 1-line area ?? !@#$%^&*(

1634, Fri  7 Jun 2024 (NZST)  Back in Taupo after lunch in Taihape !

Trying RFC9293-TCP.rdd, thw whole thing displays properly in rfc-draw.py -:)
However, rdd_to_svg mkes a mess of it
  colnbrs drawn too low, overlapping row 2 (Source/est ports) <
  row 5 (3 Lines) puts the 3-line strings 1 line too low, <<
    and the row's |_| isn't drawn low enough <<<

1442, Sat  8 Jun 2024 (NZST)

Looked into draw_lines_class.py;
  it doesn't allow you to extend a line from it's end, only it's beginning
  Could add mmore code to do that, but that will need more understanding
    of exisiting code !

Looking at row sizing in row_test.rdd .. oh, oh, draw_row() uses the
  previoius row's height for that of a new row !!!
Changed that to set it as self.r_lines line of text
  Now row-test.rdd draws properly

1643, ditto

rdd_to_svg.rdd makes a mess of row-test.rdd, working  on getting draw_tics()
  to draw the tics at bottom of row's |_| line
Confusion in rdd_to_svg.py about where to add border_width to coords ;-(
      self.draw_tics([rx0-bw,bw+ry0, rx1-bw,bw+ry1])
  gets them in correct position, centred in x and y - but why ????????

1647, Sun  9 Jun 2024 (NZST)

Continued tweaking with row-test.rdd, finished up with 
2 (row 2) [150, 95, 674, 139] "R" 1 1 2
3 (field 34) [159, 96, 668, 139]
This looks OK when drawn on-screen (though maybe a few px lower for the line?)

Spent quite a lot of time fiddling with y1 for row 2 and/or field 34,
  that didn't really work :-(
Need to look at field/row interactions, sigh\

1724, Mon 10 Jun 2024 (NZST)

Working on rdd_to_svg.py, now have header (row 1) looking right
However, row 2 |_ is 1 px too high, row 3 is 1 px too low ???

1705, Tue 11 Jun 2024 (NZST)

Tried using last_row_coords to remember last y1,
  then next y1 = last_y1 + row_height
No improvement, still have row 2 |_| about 2 px above header line,
and row 3 |_| about 5 px below row 2's |_| bottom, sigh :-(

Looking at printed output:
row 1: last row coords [0, 47.0, 524, 47.0]
line points = [[3, 50.0], [527, 50.0]]

row 2: last row coords [0,  0,   524, 45]  <- why not 47?
line points = [[3, 48], [3, 78.0], [527, 78.0], [527, 48]]

row 3: last row coords [0, 45,   524, 81]
line points = [[3, 84], [3, 114.0], [527, 114.0], [527, 84]]

x0,x1 stay the same, but ? ? ?

1014, Wed, 12 Jun 2024 (NZST)

Gave up on computing row's y1 from previous y0, now just using rdd coords.
  Also use colours list to see which row line is which.
Much better, however
 1. Gap between row's text and tics seems bigger on the svg ?
 2. Row 5 (3 rows) drawn as 1 row ??
      Is row's y1 correctly set to include all rows <<<
      
1159, ditto

Worked through draw_headers <-> rdd_to_svg, field texts are now positioned
  correctly inside rows  :-)
Now python3 rdd_to_svg.py RFC9293-TCP.rdd crashes with
 File "/home/nevil/rfc-draw/rdd_io.py", line 119, in restore_object
    v1 = int(fields[6].strip('"'))  # Remove any surrounding " chars
ValueError: invalid literal for int() with base 10: '8 -1'
                                                 vbl_len_row <<<

1625, ditto

Fixed 'invalid literal' problem, rere_v2 now has a conditional - for v2
Now rdd_to_svg handles row-test.rdd properly,
  but cuts off (from viewport) the RH ~quarter of RFC9293-TCP.rdd ???
Hmm, rdd_to_svg sets self.dwg size=(x_size,y_size)
  WHEN does self.min_x change?  Looking through the code, it doesn't :-(

1624, Thu 13 Jun 2024 (NZST)

Found that the rdd with just header 1, row 2 draws properly
  but h1, r2, field 34 doesn't
Field coords are slightly less than row.  Making them the same: no change
Problem must come in draw_text ...
Yes.  draw_text breaks line into words, and calculates the x coords.
  It uses self.di["f_width"], which comes from the .rdd file
  rfc_draw_globals sets it at 10.33, which is too big fo svg, 8 works well
Changed it back to 8 in rfc_draw_globals,
  now it works there and in rdd_to_svg :-)

Later: rdd_to_svg.oy draws all RFC9293-TCP.rdd's rows, but there are probleme:
 1. Row 1's bottom line is too high
 2. Top corner's of row 2's |_| line are slightly below row 2's bottom line
 3. Row 5 (3-line row) hasn't picked up the number of lines
      (but the next row seems to be drawn in the right place)

For 3, added r_lines-1*line_height for each row
 - this works, but it's an aawful kludge !!
Now we see the bar lines don't meet top and bottom lines,
  and thy'e not aligned in the middle of tics
  Also, we haven't yet implemented vbl_len_row

1007, Fri 14 Jun (NZST)

Tried using f_width 7; too close.  8 works well.
Note: f_width is only used in rdd_to_svg.py, it's read from the .rdd file

Try now to move header line down a tic height; DONE
  move bar lines to centre of tics;  DONE
  move left a little;  DONE
  move field texts down a little;  DONE
  move row 1 field up a little;  DONE

1551, ditto

Implemented vbl_line_row :-)?
Now there's about 1 line of white space at top <<<<<
In rfc_draw draw_header, draw top line in red.
  Yes, there is some space above the colnbrs field

Played with how to do this, starting by drawing top of row 1 (header) in red

1454, Sat 15 Jun 2024 (NZDT)

Couldn't find a way to move header (i.e. row 1) up, so instead,
  in rdd_to_svg.adj.coords we now subtract self.r_tgap from all y coords :-)

RFCs with header diagrams:
  3261: SIP, 7540 - HTTP/2  <- neither of these have 9293-style diagrams
  1035 DNS  <- doesn't either
  5598   Internet Mail Architecture ? lots of diagrams, no headers

  4302 IP Authentiation Header does !
  7978 (TRILL): RBridge Channel Header Extension does
  8300 Network Service Header (NSH) (updated by 9451)  < done
  9491 (NSH) and (SFC) does
  
Made RFC-4302-AH.rdd (including a text caption underneath)
  rdd_to_svg draws it well, but row 2 |_| is a little too high !!! :-(
2 (row 1) [147, 115, 671, 160] "R" 0 1 2
3 (field 2) [156, 116, 665, 155] "0   ... 1 ... 1 2 3 4 5 6 7 8 9 0 1" 1 0 32
4 (row 3) [147, 160, 671, 196] "R" 0 2 1
  r1 y1 = 160, r3 y0 = 160 <- should line up properly ??? <<<

Put cursor on the text, Delete ->
  AttributeError: 'draw_texts' object has no attribute 'undraw_object' <<<

1709, Sun 16 Jun 2024 (NZST)

Worked through drawing header + row 2, making save-h1r2.rdd
  row 1: blue line, 1 px inside edges or row 2 ???
  row 2: save-h1r2 shows ...
1 (header 0) [167, 145, 691, 226] "H" 0 1 0
2 (row 2) [167, 145, 691, 190] "R" 0 1 2
3 (field 3) [176, 146, 685, 185] "0                   1                   2                   3  \n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1" 2 0 32
4 (row 4) [167, 190, 691, 226] "R" 0 2 1
5 (field 36) [176, 191, 685, 221] "-|-" 4 0 32
  rdd file looks OK, rfc-draw draws it nicely,
    but rdd_to_svg draws row 2 a little bit high  <<< WHY?

1144, Mon 17 Jun 2024 (NZST)

Realised that adjusting min_y and max_y when calculating drawing size
  is the best way to ajust top and bottom borders on svg image
Looking through rdd_io.py, it already handles extrema properly for
  lines in a text object 

Now RFC4302-AH.rdd renders properly :-)

1616, Tue 18 Jun 2024 (NZST)

Started on rdd-to-ascii.py for Header types.
python3 rdd-to-ascii.py save-h1r2.rdd  looks like a good start, however:
 . vertical scall is fine (1 line of text + top and bottom lines of ---)
 . horizontal scale draws lines using whole width of row
     but text header lines should have 2*32+1 chars ???

1018, Wed 19 Jun 2024 (NZST)

Realised that scale factors for rdd-to-ascii.py are set - arbirarily -
  in rdd_globals.by.  These are (mostly?) to may char height:width ratio

draw_row uses +_+_+ for top and bottom rows, and |   | for middle rows
  draw_rows() sets these up, but not quite correctly, yet :-(

1712, Fri 21 Jun 2024 (NZST)

Plodding on with rdd-to-ascii.py
To get rows to scale properly, had to tweak asc_x_sf and asc_y_sf,
  we'll need to use these for hdr_x_sf and hdr_y_sf, sigh

1608, Sat 22 Jun 2024 (NZST)

Looking more closely at map scaling;
 . row coords 171, 93, 695, 142 have a bigger range than those
     in example-diagrams/*.rdd
 . therefore they map to wider rows than before, e.g.
     min_x 171, max_x 695, min_y 93, max_y 231, border_width 1
     c_min 1, c_max 99, n_chars 101, r_min 1, r_max 8, n_lines 10,
 . is 99 chars(792 px) really too wide?
     it is for header diagrams, they expect 65 chars !
   -> use 65 chars if rdd file has mostly header/row/field objects
Added code to rdd-to-ascii.py to determine
  "mostly header" or ""mostly not header" objects
now use   hdr_sf       asc_sf  scaliing

Sun, 23 Jun 2024 (NZST)

Sorted out scaling using asc_sf and hdr_sf values in rdd_globals.py
Starting to look OK, scaling correct for nchars 65, n_lines 4 :-)

But we don't seem to have added bw chars/lines to outer edges ???

Mon, 24 Jun 2924 (NZST)

Working on test-h1r2.text
 . Adjusted hdr_x_sf, hdr_y_sf to get
     c_min 1, c_max 66, n_chars 67, r_min 1, r_max 6, n_lines 8,
     x 173 to 697, y 134 to 215
 . Now test-h1r2.txt looks correct :-)
 . and row-test3.txt is OK, except that row 2's Dest field has no bar at left !!
 
Tue 25 Jun 2024 (NZST)
rdd files:
  test-h1r2  Row 2, with a long string
  row-test3  3 rows, row 2 has two fields + bar between
  RFC4302-AH  5 rows, text caption below
    all above draw properly

  RFC9293-TCP.rdd  Everything but rows 4 and 5 (1 and 3 lines) commented out
  rows drawn properly, but
   . text in row 5 is one row high
   . text in leftmost two fields not centred
   . haven't implemented vbl_len_row yet !!

1617, Wed 26 Jun 2024 (NZST)

rdd-to-ascii.py again:
  Added self.row_info, prints coords, r,c for each row.  These all look OK
  Then added draw_field_text() to draw a field's text,
    it gets fy0,fy1, shoud be able to check it doesn't overwrite
        row's top or bottom ... not working for me yet, sigh :-(

1658, Thu 27 Jun 2024 (NZST)
  Worked on using fy0,fy1 to catch wrong tlr values in draw_field_text
    Row 1 is OK now, lower rows and fields are not, sigh

1046, Fri 28 Jun 2024  Matariki

Changed draw_field_text to use row ry0,ry1 instead of field fy0,fy1
Problems now:
  . draw_field_text draws text 1 line low
  . text not being centered vertically

1738, ditto

Now have rows 2-8 drawn properly, but row 2 doesn't have it's bar drawn
But row 1 has ut's field text (colnbrs) drawn 1 row low, sigh :-(

1644, Sat 29 Jun 2024 (NZST)

Row 1 has text in lines[] 1 and 2, made that a special case.
Now all of RFC9293-TCP draws properly :-)

Started on RFC9491-NSH+SFC.rdd
  row 2 drawn OK, started on row 3, but couldn't put bars into it
    click on h 1, r 3, c 7  gets
  File "/home/nevil/rfc-draw/draw_headers_class.py", line 1348, in dg_b1_action
    draw_headers.row.clicked_on_tic(self, hn, rn, cn)
  File "/home/nevil/rfc-draw/draw_headers_class.py", line 625, in clicked_on_tic

Also, can't click far from existing header to start a new header <<<<

1621, Sun 30 Jun 2024 (NZST)

Fixed clicked_on_tic bug above (append restored header to draw_headers.headers
New bugs:
 . still can't create a second header
 . vbl_len_row drew it (need to do better on 5- and 6-line rows),
     but it doesn't get saved
  
1158, Mon  1 Jul 2024 (NZST)

Working on b1_action() to draw a second header
  But header doesn't draw anhything, instead it uses hdr_id 0 ...
    that only works if we has a single header !!!
Decided to make header's hdr.id be for a white (or red) top line.
  That looks OK, and creates a correct(-looking) test-h2.rdd file
Now python3 rfc-draw.py test-h2.rdd loads the two headers properly :-)

Looking at vbl_len_row:
  Had to redraw FC9491-NSH+SFC.rdd, so far only down to row 5,
    vbl_len_row, 5 lines
  rfc-draw.py reads it and displays it properly (though it needs tweeking)
  but save to test-xxx.rdd doesn't give row 115 -5 for v2, sigh <<<<<

  save_strings written by rdg.get_save_string(),
    that should call self.dhc_tool.row.mk_save_str(),
      but doesn't do that !!!
    looking through xxx.yyy, 'ROW mk_save_str:' never appears,
      -> we're not calling class row.mk_save_str()  <<<<

1723, Tue  2 Jul 2024 (NZST)

Tracked down row.mk_save_str() problem -ve v2
  this was ddeclared twice in draw_headers.  Deleted the second of these!
Now vbl_len_rows are saved correctly, with negative v2 :-)

python rfc-draw.py RFC9491-NSH+SFC.rdd
  Tried to add another row, single click below bottom of last (vbl_len) row.
  Failed, got  "len(l_coords) = 8 / line, but not tic or bar, tags h_1"

1614, Wed  3 Jul 2024 (NZST)

Made new function near_row(self, mx,my, hn,rn), and made sure that
  row bottom lines have h_tag and r_tag (hdr and row nbrs)
  
Added near_row() function to handle b1_action near an existing header
  rdg.new_header_nbr increments rdg.n_headers -
    does restore_object(headers) also do that?
  draw_headers.py does allow you to draw 2 headers
    so restore_object() doesn't increment rdg.n_headers, added that
  Now rfc-draw.py RFC9491-NSH+SFC.rdd loads it,
    click just below bottom (var_len) row adds an new bottom row :-)
  Alas, clicking well below that >>>doesn't<<< create a new header below :-(
  instead got ...
    12345 near_row: hn 1, rn 6, region far
    -|-|- new_header_nbr()
    rdg_new_header_nbr: n_headers 0
        n_headers now 1
    so restore_object isn't incrementing n_headers ???
  Also, new_header_nbr() should be in draw_headers <<< <<<

1457, Thu  4 Jul 2024 (NZST)

Moved new_header_nbr() to draw_headers.header
Now we can create a drawing with two headers, save-h2r2 :-)

We print far too much debugging info while reading an rdd file,
  Went through rfc_draw_globals and draw_headers, commenting out
    debugging print statements
  Now we only get a dump after reading in an rdd file
Finished off drawing of RFC9491-NSH+SFC.rdd, no problems doing that

Made save-h2r2.rdd.  Yes, we can have >1 (but <= 4) headers in a drawing :-)

Still to do:
 - Update rfc-draw manual with 'how to draw headers'
 - Improve drawing of var_len_rows (3 vertical segments, line/space/line) ?
 - Draw some more headers
 - Document rdd records for v2 header/row/field
 
1718, Sat  6 Jul 2024 (NZST)

Tried python3 rdd_to_svg.py RFC9491-NSH+SFC.rdd
Almost works, but needs more work :-(
python3 rdd-to-ascii.py RFC9491-NSH+SFC.rdd also almost works :-)

1615, Sun  7 Jul 2024 (NZST)

mv rdd-to-ascii.py rdd_to_ascii.py
Worked on rdd_to_ascii.py, test-xxx.rdd gets field texts all in ropmost row !!!

rdd_to-svg.py grizzles with
  File "/home/nevil/rfc-draw/rdd_to_svg.py", line 30, in __init__
    self.objects = rio.objects;  self.di = rio.di
AttributeError: 'rdd_rw' object has no attribute 'di'

Managed to get rdd_to_svg.py working, but it still needs work :-(
     Ditto for rdd_to_ascii.py :-( again

1707, Mon,  8 Jul 2024 (NZST)

Worked on rdd_to_ascii.py RFC941-test.rdd,
  haven't yet got that to work properly, sigh :-(




1713, Tue  9 Jul 2024 (NZST)

Getting closer to having rdd_to_ascii.py RFC941-test.rdd working,
  still needs work!

1644, Fri 12 Jul 2024 (NZST)

Trying to work out why rdd_to_ascii.py seems to process each row twice !? !?
We now dump objects after reading in the rdd file once, that makes it clearer
what's happening.  ? ? ? :-(


1705, Mon 15 Jul 2024 (NZST) Lower Hutt family stayed over this weekend :-)

Still working on rdd_io interface.
Needs better understanding, then careful tidy-up, for both rdd_to_ascii and
rdd_to_svg, sigh !!! :-(

Now have rdd_to_ascii.py reading in .rdd file correctly using
     self.rdd_i = rdd_io.rdd_rw(sys_argv, self.bw)
     print("*** rdd_i >%s<" % self.rdd_i) ## rdd_rw object
     self.objects, self.di = self.rdd_i.read_from_rdd()
     self.rdd_i.dump_objects("read in by rdd_io")

1648, Tue 16 Jul 2024 (NZST)

Worked on rdd_to_svg.py, RFC941-test.rdd
Promising, but resulting drawing needs a lot of tweaking yet! :-)
 . Overall frame doesn't get corners of drawing properly, sigh <<<
 . Lines around rows (1 and others) look OK
 . Col nbrs sit about 1 line too high
 . Need to draw tics in svg

1141, Wed 17 Jul 2024 (NZST)

Got rdd_io.py to print out Extrema; need to ignore negative values,
  these come from draw_field(), which assumes that
  extrema can be half text width left of cx!

draw_field() doesn't work well, try using test-1h2r.rdd for testing

python3 rdd_to_svg.py test-1h2r.rdd gives
About to call draw_row()
  max_x 1030, coords [185, 185]
draw_row: r_nbr 1, coords [185, 185], len(text) 1, text R
Traceback (most recent call last):
  File "/home/nevil/rfc-draw/rdd_to_svg.py", line 343, in <module>
    svg_drawing(sys.argv)
  File "/home/nevil/rfc-draw/rdd_to_svg.py", line 66, in __init__
    self.draw_objects("row")     #   all layer 3
  File "/home/nevil/rfc-draw/rdd_to_svg.py", line 326, in draw_objects
    self.draw_row(obj.id, obj.i_coords, obj.i_text,
  File "/home/nevil/rfc-draw/rdd_to_svg.py", line 216, in draw_row
    rx1,ry1 = (coords[2], coords[3])  # Bottom right x,y
IndexError: list index out of range

Hmm row only has 2 coords!  That's not proper, can't use 1h2r.rdd

Using row-test.rdd, we see that using svgwrite.text.Text(words[j], insert=(round(x+wx[j]*self.di[f_width]),int(ly)) cramps up the words too much.
Using 10.0 instead of di[f_width] looks much better ... ???

Oh, oh. Now we're drawing the col numbers field (with it's blanks) much too wide
My find_words method doesn't seem to work properly now, sigh :-(

1709, ditto

Went on experimenting, found simple-text.py example,
maybe I can find a better way to display text ? !!!

1746, Thu 18 Jul 2024 (NZST)

Got rdd_to_svg to use words,wx, with wx multiplied by c_width,
Still needs work :-(

1609, Fri 19 Jul 2024 (NZST)

rdd_to_svg's text drawing (again, sigh):
  Found that using (words,wx) spreads col_nbrs lines out too wide,
  and - worse - it overlaps words in short texts, e.g. 'Source Port'
kludge for this is to use (words,wx) for texts with <= 3 words
  (includes first line of col_nbrs),  and single, whole-text for others
  >>> Will need to test this with lots of other rdd files <<<

Oh, oh, python3 rdd_to_svg.py RFC9491-NSH+SFC-test.rdd
  really mangles
(field 112) [132, 192, 641, 273] "Segment List[n] (128-bit IPv6 address)" 80 0 32
and so does python3 rdd_to_svg.py RFC941-test.rdd, sigh  :-(

text-example.py works properly

Try text-example using string above ("Segment List[n] ...
  Yes, it works properly

1713, Sat 20 Jul 2024 (NZST)

Worked on draw_text() in rdd_to_svg.py,
  using words,wx*c_width for lines with > 4 spaces in them,
  and just writing the whole string otherwise

Now it works well for RFC9491-NSH+SFC-test.rdd
                  and RFC941-test.rdd, :-)
though this seems a dreadful kludge!

Now we need to work out why the header's fram isn't contained
  inside the svgwrite frame ??? :-(

RFC941-test.svg has frame x 120-650, y 60-375  ???
and Extrema: min_x -70(field), max_x 843(field), min_y 47(field), max_y 380(field)

1655, Sun 21 Jul 2024 (NZST)

Added map() function to rdd_to_svg.py, now we call map() for each pair of coords
to get it's svg x,y coords

This should work better for making the svg drawing, but it produces
an svg size (appears as white in Inkscape (and Firefox, which cuts off the drawing outside it's specified size)

We haven't yet got xsize, ysize calculated properly, sigh

1156, Mon 22 Jul 2024 (NZST)

working on RFC941-test, with all but row 2 and field 3 commented out
col nbrs in svg at (132,75), field 3's first two coords
but that's too far to the right.
Oh, oh:
  coords for svg text are it's lower left corner,
  but coords for tkinter text are its centre point !!!

1737, Tue 23 Jul 2024 (NZST)

Added hd_colours to rdd_to_svg, 
and changed draw_row and draw_text to draw ir hd_colours[r_nbr], so we can see
where text lads for each row.
Promising, but still needs work!

1747, Wed 24 Jul 2024 (NZST)

Tracked down line drawn under header field, now draw it in svg :-)
Added draw_tics() in rdd_to_svg.py, looks (nearly) right :-)
Need a little more work too get RFC-941-test.svg looking right <<<

1039, Thu 25 Jul 2024 (NZST)

Tried ython3 rdd_to_svg.py RFC2722-TM-Architecture.rdd
Had to add r_nbr 0 (colour=black) to calls on draw_line aand draw_text
Realised that coords to draw_text should now be the text's top-left position,
  not to cx,cy! (that was before
    we had parent-row and field) <<< more work needed

Oh dear, in rdd_to_svg, draw_field() appeared twice.
Used python3 check-dups.py rdd_to_svg.py to find the duplicates, deleted them

Now looking at field bars: they start 1px low, and end 2px high

1729, Fri 26 Jul 2024 (NZST)

Got draw_text positionoing the text inside the field Rect,
Implemented vbl_len_row in draw_row()  :-)

Now, looking at prinout of rdd_io.py as it loads the .rdd file,
it builds nicely up to >min_x 123, max_x 647,
but the drawing size jumps to be much too big :-(
Aha, object 21 is a header.  Commenting that out fixes ths :-)
Objects 40 and 41 are also headers, commented them out too!
However, text 340 (the figure caption) isn't displaying in rdd_to_svg.
It does in rfc_draw.py, but NOT in rdd_to_svg << bug to fix <<

1713, Sat 27 Jul 2024 (NZST)

Figure caption now displaying (in correct position) in rdd_to_svg
python3 rdd_to_svg.py save-h2r2.rdd works correctly
  (two headers, a second row for each, in correct colours :-)
Question: why is x-size 900; the RFC9491 header is only from 200 to ~720 ??

1720, Sun 28 Jul 2024 (NZST)

Commenting out extrema calls in rdd_io.py
  self.extrema(obj, x+/-tw2_px, y+/-th2_px)
gets drawing-size almost right again,
  but the "Figure 6" y coord is not included <<
Putting those calls back in gives a drawing
  with 200px white borders either side!
    Took them out again

Played with check-dups.py; would be nice to check that line dups are for
several lines, rather than just one.  :-?

1548, Mon 29 Jul 2024 (NZST)

More work on check-dups, still not comparing pairs of lines.
Decided check-dups.py is good (useful) enough as it is !!!

Worked on rdd_to_svg.py;
  min/max x/y are used to set drawing size,
  but Inkscape shows the drawing x from 0 to 920,
    with 0-200 and 720 to 920 blank (white) ???
  also,  min_x -70, max_x 843,  min_y 74, max_y 704
... x 843+70 = 913 ???
    y 704-74 = 630  < needs to be about 660 ???

1609, Tue 30 Jul 2024 (NZST)

Getting drawing size correct (i.e. including all objects)
  in rdd_io.py's Extrema
field objects get drawing coords right becuase they use the field's
  surrounding rectangle.
text objects don't have a surrounding rectangle, so instead we use use top and
  bottom of their text lines :-)

Updated rdd-obj-table.md: layouts to cover _all_ rfc-draw's object types

python3 rdd_to_svg.py example-diagrams/draft-ietf-core-href-12.rdd
  drawing has rectangles and lines in right places, but texts are too low !!!

1645, Wed 31 Jul 2024 (NZST)

Looking again at RF7996, stroke-dash-array is allowed, and svg-write supports it
as a css attribute.  Should we use it for vbl_len_rows?
Not worth it, can't really do it in rdd_to_ascii.py

ython3 rdd_to_svg.py example-diagrams/RFC2722-TM-Architecture.rdd fails:
 File "/home/nevil/rfc-draw/rdd_io.py", line 190, in read_from_rdd
    o_key, obj = self.restore_object(ln, ds)
  File "/home/nevil/rfc-draw/rdd_io.py", line 117, in restore_object
    v1 = int(fields[6].strip('"'))  # Remove any surrounding " chars
  ValueError: invalid literal for int() with base 10: 'N 0' <<<<<<<

Now RFC9491-NSH+SFC.rdd has an extra blank line after text "Figure 6 ..."
This works well. 

1533, Thu  1 Aug 2024 (NZST)

RFC9491-NSH+SFC.rdd svg looks fine,
example-diagrams/RFC2722-TM-Architecture.rdd
in n_rects
  single-line text in n_rects is fine, :-)
  but 2- or 3-line texts are 1 line too low :-(  << fixed
elsewhere
  single-line texts are also 1 line too low :-(  << Still to do 

1144, Fri  2 Aug 2024 (NZST)

Moved single-line texts up a little

Started looking at rdd_to_ascii.py,
  using example-diagrams/RFC5755-AC-Exchanges.txt
Observed that rdd_to_svg doesn't put arrows on lines <<<<
  fixed that in rdd_to_svg.py
With rdd_to_ascii, Left middle and lower
n_rects are missing their text,
  and lower two lines are missing their left-to-up corners ???
  
1702, Sat  3 Aug 2024 (NZST)

Looking at
  python3 rdd_to_ascii.py example-diagrams/RFC5755-AC-Exchanges.rdd | tee xxx.out
Don't understand it well enough yet, sigh :-(

1202, Sun  4 Aug 2024 (NZST)

Checking syntax with jing:
In rfc-draw/example-disgrams, use
  jing  c SVG-1.2-RFC.rnc RFC5755-AC-Exchanges.svg
svgcheck *.svg  works too :-)

python3 rdd_to_ascii.py example-diagrams/RFC5755-AC-Exchanges.rdd
makes example-diagrams/RFC5755-AC-Exchanges.txt

1706, ditto
Worked on rdd_to_ascii.py.
Cut-down RFC5755-AC-Exchanges.rdd.
draw_n_rect() calls draw_row_text() with the n_rect's text,
  but draw_row_text() doesn't put that text in the right place :-(

1708, Mon  5 Aug 2024 (NZST)

More work on rdd_to_ascii.py
Problems with getting 'AC "push"', seems to be OK  now

1525, Tue  6 Aug 2024 (NZST)

Started testing rdd_to_ascii.py on row-test3.rdd  That just didn't work
Tried python3 rdd_to_svg.py row-test3.rdd  OK,
  but texts neeed to be 1 line lower in their fields,
  and col_nbrs should be about 1/2 a line lower
Made those tweaks in draw_text().  Now row-test3.svg looks OK

RFC9491-NSH+SFC.avg looks OK too :-)
More tweaking, so now RFC9293-TCP.svg also looks OK

1648, Thu  8 Aug 2024 (NZST)

Rainy day.  Now looking at rdd_to_ascii.py, drawing RFC9293-TCP.rdd
Row outlines look fine, row 1 (col_nbrs) should be 1 col to the right,
i.e. starting in col 2, not col 1  <<<<<
Note: LHS of row, i.e. |  is in col 1

Oops, checkdups.py found two functions duplicated in rdd_to_ascii.py
Recovered from that :-)
 But we still have above problems in RFC9293-TCP.txt :-(

1105, Fri  9 Aug 2024 (NZST)

Worked on rdd_to_svg.py again.
Realised that RFC9293.rdd had been corrupted,
  moved it to RFC9293-TCP-fri-bad.rdd
Recoverd it from RFC9293-TCP.rdd+2024-08-06~1615  (Tue, 6 Aug)

Now python3 rdd_to_svg.py RFC9293-TCP.rdd makes RFC9293-TCP.svg,
  that looks OK, except that colnbrs are brown(1)?
  and the Note (at bottom) should be 1 line higher!
  
1646, ditto

Tweaked y coords for field text in rdd_to_svg; RFC9293-TCP.rdd now looks fine
Realised that rfc-draw wasn't saving negative lines (v2) for vbl_len_rows.
Edited RFC9293-TCP.rdd to have -1 lines for row 8, rfc-draw now draws it
as a vbl_len_row, and so does rdd_to_svg :-)

In rdd_to_svg, self.debug True  -> uses hd_colours to show row is which!
                          False -> always draw in black

RFC9491-NSH+SFC.svg looks OK too
and svgcheck says gthese two svg files "conform to SVG requirements" :-)

However, still work to do on rdd_to_ascii <<<<<

1620, Sat 10 Aug 2024 (NZST)

Problems with rdd_to_ascii.py drawing RFC9293-TCP.rdd
(row 2) is the colnbrs row, i.e. actual row 1, with header 1 as parent
1 (header 1) [150, 95, 674, 426] "H" 0 1 0
2 (row 2) [150, 95, 674, 140] "R" 1 1 2
3 (field 3) [159, 96, 668, 135] "0  ... 0 1" 2 0 32

but map() gets
  row_info r,c = rc0.rr0 1,3, rc1,rr1 66,5  # top-left, bot-right
  field    r,c = fc0,fr0 34,4, fc1,fr1 65,5 # brc,      brr
                 is this cx,cy ???
What did we expect here?
Should we just use the field info??

1622, Sun 11 Aug 2024 (NZST)

Looking at RFC9293-TCP.txt;
Need to make it clearer where row 1, col 1 actually is on the .txt output
  added >  < around each line. we now see border (1 blank column) either side,
    and 1 blank line top abd bottom

Looks as though scaling (in map) isn't working properly :-( ??
  for texts in row 2  Source Port, Dest Port ????

1702, Mon 12 Aug 2024 (NZST)

python3 rdd_to_ascii.py RFC9293-TCP.rdd | tee xxx.out
Worked on draw_field_text()
  Got field 3 (col_nbrs) in it's correct place (at last)  :-)
  But now, fields 36 or 37 overwrite line 1 (colnbrs) ;-(
    They're fine in rdd_to_svg <<<

1558, Tue 13 Aug 2024 (NZST)

Sorted out positoining of field texts, now fields for rows 1, 2 and 3 are OK
However, we have 2 blank lines at top, we should only have 1 <<<
we have: draw_row: r_nbr 1, coords 1,1, 66,4, r_width 64
                              should be 66,3
Draw_field wasn't drawing a bar at field's left, fixed that
  but 4-line row (row 4) isn't drawing the flags field properly :-(

1752, Wed 14 Aug 2024 (NZST)

RFC9293-TCP.rdd's problems now are that C/W/R in row4 is 1 row too high !!!
and row 1's top line is 1 line too low :-(

1512, Fri 16 Aud 2024 (NZST)

Sorted out draw_text, now RFC9293-TCP.txt 3-line row (flags) looks OK
But colnbrs has a blank line below it :-(
More testing with row-test3.rdd
  using int() instead of round() in map() works well for row-test3,
    but wrecks RFC9293-TCP

Need to fix the blank line under r_nbr 1 (v1 = 1)

RFC9491-NSH+SFC.rdd looks a bit "sparse", but it is ~OK

We still need to iplement vbl_len_row in rdd_to_ascii.py !!!
Puzzle: can we get mapping that works well for RFC9293-TCP, _and_ row-test3 ?
Or: shall we just kludge drawing the field in row 1 ???

1748, Sat 17 Aug 2024 (NZST)

New approach to drawing field text:
  find_txt_rows(self, txl, tr,br, r_nbr, r_lines)
  draw_text_in_row(self, text, tr, br, r_nbr, r_lines)
Promising, but not yet working, sigh :-(

1702, Sun 18 Aug 2024 (NXST)

Now have rdd_to_ascii.py RFC9293-TCP.rdd working nicely :-)

Testing change_row_lines()
  Mouse down on row's bottom line: sets change_lines_mode up/down, cursor ^=v
  But dragging it down doesn't change the right-hand edge of the line,
    so it's left sloping <<< :-(

Also, we haven't implemented vbl_len_row for row 8 ( Data ) <<<

1618, Mon 19 Aug 2024 (NZST)

Fixed resize_row(), now only the bottom line (and it's tics) move :-)
  drag on bottom line of row, now can drag up (reduce) or down (increase)
    the number of lines in the row.
  You can only move 1 line up/down at a time (release, then drag up/down again)
  Dragging up/down keeps field's texts centred in row :-)

Tweaked print_lbuf() so as not to print (empty) top line of row 1 (colnbrs)(
>>> Check this doesn't interact with self.bw (self.rg.asc_def_b_w)
>>> Need to not print > < and right-fill blanks on each line
    Now we don't add the >< id self.debug is True

1743, Tue 20 Aug 2024 (NZST)

Tweaked rdd_to_ascii.py:
  Realised that RFC9293-TCP.rdd had a second header at it's end, deleted that
  Now it's self.n_chars is 67, which is correct :-)
  Now when self.debug is False, we don't put row numbers into their bottom row

Still need to implement vbl_len_row <<<
>>> also need to add self.bw blanks at end of each output line!

RFC9491-NSH+SFC.rdd
RFC9293-TCP.rdd      both look OK.  Any other headers we can draw?

1618, Thu 22 Aug 2024 (NZST)

Started documenting Header objects in rfc-draw-manual.md
Realised that we can draw a Header (b1 far from other objects),
  draw a row below it by clicking about one col-width _below_,
Cann add further rows by clicking one col-width below the bottom row.
A Row is drawn containing a single field, with initial text '-|-'.
We can move the whole header + rows by dragging it's colnbrs.
Click on any tic in a Row to divide it into two fields;
  a vertical bar is drawn above the tic mark to separate those fields,
  the new (right-most) field has 'X" as it's initial text.

Can't delete a Header/Row/Field by putting cursor on it and pressing Delete <<<

Pressing b1 on bottom line of a Row _between_ tic marks
changes the cursor to a two-way (up/down) arrow, 
and allows you to drag b1 down/up to increase/decrease by 1 the
number of lines of text in that Row.

Clicking b1 on the right- or left-edge line of a row makes that row
a 'variable-length row', drawn with a gap in both it's edges.

Dragging b1 on a field

Should check for two-lines of text in r_lines == 2 row,
right now, Two lines remain when r_lines is reduced to 1 !!! <<<

Double-b1 on a field separator (vertical) line to combine Fields

Drag b1 on separator bar to move it

Check that rdd_to_ascii.py -p3 does set self.bw to 3 (yes, it does:-)


1546, Fri 23 Aug 2024 (NZST)

Thinking about making a product-release/how-to-ise-rfc-draw video ...
Firefox: How to Record the Screen in Ubuntu
usggests Ubuntu built-in recorder, or simplescreenrecorder
but simplescreenrecorder, but it says
You are using a non-X11 window system (e.g. Wayland) which is currently not supported by SimpleScreenRecorder. Several features will most likely not work properly. In order to solve this, you should log out, choose a X11/Xorg session at the login screen, and then log back in.

8 Best Screen Recorders for Ubuntu
simplescreenrecorder  is simple, records audio, but didn't record the screen
  also, it says it needs an X11/Xorg session to work properly
kazam didn't work
ogv might work, but is more complicated

1134, Sat 24 Aug 2024 (NZST)

Found kooha, install via  sudo snap install kooha
sudo snap refresh kooha # installs kooha updates
This one works :-)
  Start from Activities, left-hand icon starts kooha
vokoscreen: audio recording not implemented

RecApp doesn't work
vokoscreen looks promising, records the microphone,
 but can't display the window.

kazam: records the rfc-draw window well,
  but doesn't record the microphone

ssr:  can't play the recorded movie

16556, ditto

Worked with obs-studio, was able to capture the rfc-draw window and sound
from the microphone :-)  !!!!!

The recording lands in ~/snap/obs-studio/current,
e.g. 2024-08-25 16-52-39.mkv,
and vlc can play it well !

Checked that python3 rdd_to_ascii.py RFC9293-TCP.rdd 5
  does indeed add borders of 5 cols/rows :-)

Also worked on draw_headers_class.py, change_row_lines() to:
 - in class row, keep self.r_mx_txt_lines, max txt lines in the row's fields
 - bring up error display if user tries to reduce r_lines below that
>>> not yet working <<<

1718, Mon 26 Aug 2024 (NZST)

In class row: added self.mx_txt_lines #max nbr of text lines in row's fields
              and def set_mx_txt_lines(self)
set_mx_txt_lines() get's a field's text from it's object (rdo) using itemcget
That way, if one edit's a rows text to reduce it's nbr of lines,
mx_txt_lines value ios up-to-date :-)

New bug: with a header on the drawing, can't draw a line -
instead we get:
Exception in Tkinter callback
Traceback (most recent call last):
  File "/usr/lib/python3.10/tkinter/__init__.py", line 1921, in __call__
    return self.func(*args)
  File "/home/nevil/rfc-draw/draw_lines_class.py", line 507, in ln_b1_release
    self.abd.lbd_id, self.abd, "line",  self.abd.lbd, self.l_text,
AttributeError: 'row' object has no attribute 'lbd_id'

However, if we draw a Text first, then we can draw a line !!! ???

1501, Tue 27 Aug 2024 (NZST)

Bought NEXTECH microphone, installed audio-recoder, record as .ogg,
in directory ~/Audio
Works well, However, when I plug the mic in, I selected Headset.
Once I've made a recording, I have to unplug the mic to hear the
recorded sound from the PC's speakers :-)
>>> Still need to test obs-studio recording sound fronm the mic <<<

1644, Ditto

Sorted out 'no lbd_id' bug in rfc-draw above ...
Having changed into lines-drawing, we now check that the closest object
_is_ actually a line :-)
Ditto for Rectangle and Text modes.
Went back to editing/improving rfc-draw-manual.md :-)

1058, Wed 28 Aug 2024 (NZST)

Tried vokoscreen: can't play it's video
RecApp: ditto
ScreenRec didn't work
Audio Recoder does work, don't forget to unplug mic to listen to the audio!

Trying simplescreenrecorder again, but using vlc to play the recording
Yes, that worked  (ssr is in Favorites)
~/Videos/test-of-ssr-28-Aug.mkv can be played by VLC :-)
Volume level is a bit low though.

Tried kazam again; it works quite well, and VLC can play it
To stop kazam, click the red icon top-left of screen <<<
files in ~/Videos/*.mkv

obs has the advantage that it can make scenes, but I couldn't get it to work


ssr again:  can increase it's volume while playing a video with VLC
vokoscreen also works, speech from mic is clear.
  Once it's started, move (blue +) cursor to window and click it

So... obs, kazam and ssr all work,
but simplescreenrecorder really does seem to be the simplest
>>> Need to write out a script _before_ trying to record anything,
    then stick to it!

1647, Wed 28 Aug 2024 (NZST)

Testing b1 down to move bar:  We get
b1 single click event <<<
??? item_type line
It's a bar, f_id 37 <><>

File "/home/nevil/rfc-draw/draw_headers_class.py", line 1411, in dg_b1_action
    f_o = self.rdg.objects[item_id]
KeyError: 41
 No luck with tracking this down, yet!

1219, Thu 29 Aug 2024 (NZST)

Aha!  a field's bar (at left) is a line, f.clo_bar_id,
which is NOT in objects (only the field object is in objects).

We need to find the field f_clo before working on it's bar <<<

1612, Thu 29 Aug 2024 (NZST)

Needed a proper Bell sound for error messages (\a dosn't work in display_msg()

Found https://bigsoundbank.com
BigSoundBank.com is a library of free, royalty free sounds.

Chose counter-bell sound, saved as "BSB-counter_bell.wav"

pip3 install playsound==1.2.2

from playsound import playsound;  playsound("BSB-counter_bell.wav")
  Now we use this to signal an error while drawing :-)

In rfc-draw.py, added a test to see whether a  specified save-file exists.
  If not, we don't try to read it!

1452, Sat 31 Aug 2024 (NZST)

renamed ~/rfc-draw ~/frc-draw-bad
recovered draw_headers_class.py as draw_headers_class_28.py  (Wed, 28 Aug 24)
import draw_headers_class_28 as dhc in rfc_draw_globals_class.py,
  rfc-draw-last_mode.py and rfc-draw.py

in draw_headers_class_28.py: line 93, make fill="red"
  Now we see the header line drawn in red (it was white, so we couldn't see it)

All the draw*class.py files use import rfc_draw_global_class.py <<<<

Current problem:
  rfc-draw.py calls  rdg.read_from_rdd(), which sets self.new_drawing
    but then in draw_headers_class we get
  File "/home/nevil/rfc-draw/draw_headers_class_28.py", line 121, in __init__
    if rdgc.new_drawing and len(self.rows) == 0:
AttributeError: module 'rfc_draw_globals_class' has no attribute 'new_drawing'

WHY ??? :-(

1747, Sun  1 Sep 2024 (NZST)

Attempted debugging of draw_headers_class28.
prints 5678 in class header, 

1128, Mon  2 Sep 2024 (NZST)

Brought back draw_headers_class _25 and _26 (not able to get _27, sigh)
that's included in rfc-draw.py and rfc_draw_globals.py

Backed out testing for new_drawing in rdhc_26,
now we can create a new drawing in header mode :-)

Also tweaked draw_texts_class to use draw_globals_26
ditto arrow_lines_class, draw_lines_class and draw_n_rects_class

Still not wroking, sigh :-(

We start rdg = rdgc.rdglob(d_canvas.drawing, root, d_canvas.m_text)
  in rfc-draw
print("<><> rdg >%s<" % rdg)  <<< but we never see this printed ???

1530, Tue  3 Sep 2024 (NZST)

Backing up:
  mv ~/rfc-draw ~/rfc-draw-bad
  mkdir rfc-draw  # New, empty directory

Retrieve ...
  rfc_draw.py                27 Aug
  arrow_lines_class.py        6 Jun
  r_buttons_class.py          4 Jul
  draw_n_rects_class.py      27 Aug
  rfc_draw_globals_class.py  27 Aug
  draw_lines_calss.py        27 Aug
  draw_texts_class.py        27 Aug
  draw_headers_class.py      28 Aug
  4-lines.rdd                 3 Sep

Now python3 rfc-draw.py 4-lines.rdd
  starts rfc-draw, in Rect mode, with it's 4 lines :-)
  Rect, Line and Text modes all work
  Header mode doesn't
    ** Nothing drawn yet:
        n_headers now 1
  but python3 rfc-draw.py row-test3.rdd works properly :-)
  and Save as row-test-new.rdd makes a new rdd file,
  which reads and displays properly :-)

A little tweaking, gets header's top line in red, (was white before)
plus a row (with colnbrs) added at bottom ? ? ?
=-=-=-=-=

1505, Wed  4 Sep 2024 (NZST)

Found that draw_headers_class_28 had changed fromn _26 (which we were using).
Fixed that, now we can write test.rdd,
and start rfc-draw using that properly :-)

Now we need to work out how to create and use new_drawing.
We start rfc_draw like this:
  if sfp.is_file():
    last_mode = rdg.read_from_rdd(save_file_name)

Need to test save_file_name == = "save-file.rdd" (it's default)

If save_file_name doesn't exist, display_msg( "normal")
If save_file_name exists:
  if using default (save-file.rdd) display_msg( "error") (big ding!)
otherwise display_msg(will write .., "warning" (small ding!)

renamed ~/rfc-draw-bad  ~/rfc-draw-new  # it has all the .rdd and .txt files
cd ~/rfc-draw-new
copy all the .py files from ~/rfc-draw
mv ~/rfc-draw ~/rfc-draw-test  <<< has all the classes with no _2*.py versions
                and all the .rdd files
copied all the class files from ~/rfc-draw-test
Now we have all the .py and .rdd files in ~/rfc-draw
  python3 rfc-draw.py test.rdd     now OK
  python3 rfc-draw.py 4-lines.rdd  now OK
What next?  Get display_msg() playing ding.wav sounds
Done, as described above.  (Renamed the BSB* files, using - of _ )

python3 rfc-draw.py
gives big-ding, but message take a few seconds to display ???

Need to find a simpler way to make a ding BEL <<<
Reworked display_msg to just print("\a",end='') for BEL

1710, Thu  5 Sep 2024 (NZST)

Now python3 rfc-draw.py test.rdd works as expected,
and python3 rfc-draw.py rings bel, but then
 - click anywhere -> top (red) line drawn
 - click below it -> another top line drawn ???
printed output says ...
ELAPSED 46.048: hdr 2,top line drawn
>< header >< self.rdg.new_drawing False, 0 rows
dump_objects -- New header added <<<< --
1 (header 1) [135, 132, 659, 132] "H" 0 1 0
2 (header 2) [349, 181, 873, 181] "H" 0 2 0
- - dump - -
   >>> need to work carefully through this <<<

1723, Fri  6 Sep 2024 (NZDT)

Now have:
  In rfc_draw_globals -
    self.new_drawing True  for fn doesn't exist.
                     False for no rdd file specified
  This lets us draw a header and some rows :-)
  but when we write an .rdd file, it gets a new field for row_nbrs in row 1 ???
  test-1722.rdd looks OK, we should't call draw_col_nbrs for it <<<

Try:
  python3 rfc-draw.py new.rdd  # new_drawing False
     in Header mode, click to draw a new header, _with_ col_nbrs
     then save new.rdd
  then  python3 rfc-draw.py new.rdd #new_drawing mow False
     should read new.rdd and display it properly ...

1708, Sat  7 Sep 20243 (NZST)

python3 rfc-draw.py   drew test-sat1708.rdd  (header, with col_nbrs in row 1)
python3 rfc-draw.py test-sat1708.rdd draws header with col_nbrs, then
  field col_nbrs in row 2 <<< !!!
Looking at test-sat1708.rdd, it has field 3 "col_nbrs"0 1 2 ..." 2 0 32

python3 rfc-draw.py  test-cn.rdd
save to test-cn.rdd :
1 (header 1) [144, 127, 668, 172] "H" 0 1 0
2 (row 2) [144, 127, 668, 172] "R" 1 1 2
3 (field 3) [153, 128, 662, 167] "0                   1                   2                   3  \n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1" 2 0 32
>>> looks OK, field 3 has row_id 2, which is row_nbr 1, 2 lines
   compared  that to save-1hr2.rdd: also draws field 3 in row 2 ???

Tried python3 rfc-draw.py save-abc.rdd
  Works fine, but no col_nbrs drawn
We want to draw_col_nbrs (which adds the col_nbrs field) if new_drawing False
and if not new_drawing, don't call col_nbrs

1749, ditto
Using save-h1r2.rdd, field 3 is drawn in row 2 <<<
  and we don't get col nbrs drawn in the header row
  . . . . Need to work through this . . . .
  
Sun,  8 Sep 2024 (NZST)

In draw_headers_class.py, looked at where >make 2-line row appears:  lines 125, 633, 1173, 1258
and where draw_col_nbrs() appears: 127 only

python3 rfc-draw.py, no file save0file.rdd  works fine,
  i.e. only row 1 with col nbrs
when we save that, save-file.rdd looks OK

but python3 rfc-draw.py save-file.rdd draws header,
  but also row 2 with col_nbrs  <<<<<

??? looks as though draw_col_nbrs() is being called
  >>as well as drawing field 3 (the col_nbrs field) <<< ???

draw_col_nbrs called at L 127, (creating a header), and nowhere else ???
save-file.rdd exists, and has a field for col-nbrs

1442, Mon  9 Sep 2024 (NZST)

When we start Header mode, b1_action() calls draw_headers.header()
In that, we test for self.rdg.new_drawing and len(self.rows) == 0,
  i.e.  # Didn't read drawing from save file, need to draw col_nbrs

Now test-mon1437.rdd loads properly, and so does RFC9293-TCP.rdd :-)

1724, ditto

Found "delay in playsound", suggested running playsound in a thread
Tried that (sound_thread.py and threading2.py), results inconclusive
We need to see that program is cotinuing tu run after making the sound <<<

1655, Tue 10 Sep 2024 (NZST)

Made threading-example.py; plays bell sound in a thread,
  then prints integers from 0 to 20 in main thread
This works fine!

Added two threads to rfc_draw_globals.py,
big_bell() (error, red), and small_bell() (warning, blue)
These now work fine, so - as of now - no known problems :-)

Now we need to work on the user manual <<<

python modules required:
import os. path, re, sys, time, datetime, threading, tkinter, playsound  

1706, Wed 11 Sep 2024 (NZST)

Testing using save-file.rdd, header + 1 field
Add bar, gets t_c_tag (c_*)  change c_* tag to refer to col at right of tic <<<

Did a little more work on rfc-draw-manual.md
mdview rfc-draw-manual.md  uses your browser to display the file :-)

1618, Sat 14 Sep 2024 (NZST)

github sequence:
  git add program   to local repo
  git rm program    from local repo
  git commit -m "message"
  git push origin main  # update remote repo
      >> copy username, password from pwsafe [github token]

Need to update requirements.txt <<<

 git status  to show local repo files, pending commits, etc

1632, Mon 16 Sep 2024 (NZST)

python3 rfc-draw.py crashed with 'no module playsound'

Updated Ubuntu to 20.04 version 24.
That broke pip install :-( !!!

https://pimylifeup.com/python-externally-managed-environment/ suggested:
python3 -m pip install playsound --break-system-packages
That worked, now rfc-draw runs properly again :-)

On https://github.com/nevil-brownlee/rfc-draw/  Updated
README.md, requirements.txt, rfc-draw-manual.md
Looked at rdd-to-xmlfig.py <<< This probably needs updating

Asked Brian to test rfc-draw v2 :-)

Need to work through rdd-to-xmlfig.py <<<

1650, Tue 17 Sep 2024 (NZST)

Managed to install python34 on the vaio,
Had to set it's system time correctly, then ...
installed all the modules for rfc-draw using xp Start | Run
  python -m pip install mscvrt

tar -cvzf projects.tar.gz $HOME/projects/

tar -cvzf rfc-draw.tgz  rfc-draw.py r_buttons_class.py rfc_draw_globals_class.py  draw_lines_class.py draw_n_rects_class.py arrow_lines_class.py draw_texts_class.py draw_headers_class.py BSB-counter-bell.wav  BSB-small-bell.wav

Moved this to vaio, unpacked files into 
C:\Documents and Settings\nevil\Desktop\rfc-draw
now need to find out how to start rfc-draw.py there <<<<<

1613, Wed 18 Sep 2024 (NZST)

On vaio, made time-test.py
import time
for j in range(30):
    time.sleep(1)
    print("j = %d" % j)

If I run python from the command line, I can type this program in to it,
  and it runs properly, so pip has installed the time module :-)
But I can't run it in the python interpreter :-(
Actually, I can't run any python script on the vaio,
Let's not waste any more time on it.

1507, Thu 19 Sep 2024 (NZST)

Brian reports problem with saving a rectangle
Nevil discovers he can't delete a Header !!!

Hmm, 2_n_rects.rdd is unreadable
Looking ar save_n_rect-txt.rdd, it has new (edited) text, and (unchanged) original text
(n_rect 1) [127, 132, 551, 312] "<+>" 0 0 0
We really want (n_rect 3) just  [192.0, 158.0, 475.0, 309.0] "text in n_rect" 0 0 0
i.e. no parent, the text is _part_ of an n_rect

1717, Fri 20 Sep 2024 (NZST)

Teweaked rfc_draw_globals_class, edit_esc_key() now reflects text for
  n_rects and fields back into their parent objects
That fixes Brians 'saving a rectangle' bug :-)
saved changed n_rect to n_rect_text.rdd

Considered deleting row(s):
  get "May only delete a header's bottom row"
  Needs more work <<< <<<
  
1705, Sat 21 Sep 2024 (NZST)

List of useful .rdd files:
- example-diagrams
    RFC2722-TM-Architecture.txt
    RFC5755-AC-Exchanges.rdd
    draft-ietf-core-href-12.rdd
    RFC4302-AH.rdd
    RFC9293-TCP.rdd
    RFC9491-NSH+SFC.rdd
  Text-in-Rectangle.rdd
  4-lines.rdd
  monospace-text+line.rdd   << rdd_to_ascii leaves out top line of colnbrs
  n_rect+line+text+hdr.rdd  << rdd_to_ascii gets colnbrs one line too high
  h1r1.rdd
  h1r2.rdd

  2-n_rects.rdd  << can't draw 2 n_rects in one drawing !!!
    >>> Working on this :-(
    Need to test for b1_click within (or away) by ~20 px on an n_rect

  h1r2.rdd  << can't delete bottom row ???

1716, Sun 22 Sep 2024 (NZST)

Brian reports another bug, rdd_to_ascii.py not handling test_n_rect.rdd
Had to re-install svgwrite  (sudo apt install python3-svgwrite)

On github, rfc_draw_globals_class.py has Version 4.1 !!

1636, Mon 23 Sep 2024 (NZST)

Fixed Brian's bug, python3 rdd_to_ascii.py now Text-in-Rectangle.rdd looks OK
Also rdd_to_ascii.py now has self.bw border columns and rows :-)

But python3 rdd-to-ascii.py RFC2722-TM-Architecture.rdd crashes
## Haven't worked out why just yet, sigh :-(

1621, Tue 24 Sep 2024 (NZST)

Got rdd_to_ascii.py to work properly,
needed to make rdd_globals.asc_sf a bit bigger
Now lookiing into draw_n_rects_class.py;  need to be able to move an n_rect
Added ,parent = .v1 = .v2 = None into n_rect's clo
Now clicking away from an n_rect lets you draw a new n_rect,
  and clicking inside an n_rect lets you move that n_rect.
  but sometimes it just starts a new n_rect ???
  Need to work through n_rect | b1_click() <<<<<<

1114, Wed 25 Sep 2024 (NZST)

Looking further into draw_n_rects_class.py.
Observed that the first n_rect drawn has <+> as it's text,
  but later ones have -+-   ???  Fixed that, now always <+>
Aha! b1 click inside an n_rect, then move draws a new n_rect;
  can then move the new n_rect :-)

1730, Sat 28 Sep 2024 (NZST)

Added code to draw_n_rects_class.py to draw an oval inside n_rects,
with different colours (to indicate which rectangle is the current object)

n_rects are brown, green, brown again
but clicking in an earlier n_rect still just starts a new n_rect @#$%^&*()
>1> printout shows that for the third rectangle (inside rectangle 1)
      we found n_rect key 1, but where returnes 9 (far), not 4 (middle) ???
... could where() not be working properly ? ? ?

1734, Sun 29 Sep (NZDT)

Spent lots of time testing draw_n_rects_class.py
 - draw 1 n_rect, can click insode it to move it
 - ditto for second n_rect
 ! but now clicking inside first n_rect isn't recognised,
     and starts a new (third) n_rect !@#$%^& :-(
Need to verify that clicking inside does find the clicked-in n_rect <<<<

1742, Mon 30 Sep 2024 (NZDT)

tNot sure that find_closest() works properly for a point inside a rectangle.
Tried to use find_all() instead . . . haven't succeeded yet, sigh :-(

Could search rdg.objects instead ? ? ?

1747, Tue  1 Oct 2024 (NZDT)

Started on reworking nr_closest(mx,my) to search rdg.items
We're not able to draw more than one n_rect -
  the second replaces the first, etc ??? !!!

1103, Wed  2 Oct 2024 (NZDT)

changed draw_n_rects_class.py back to Sep4 version,
  now we can draw 2 n_rects again :-)

1743, WED  2 Oct 2024 (NZDT)

implemented using find_all() to find nearest rectangle in nr_closest.
Now can draw an n_rect and move it,
  but can only move n_rect immediately after drawiing it !@#ERTY
If we try, we start a new n_rect ???
Aha !!!
  between ++1++ and ++2++ we call new_n_rect(), which starts a new n_rect
>> need to test if we're inside an existing n_rect, before making a new one !!
  
1732, Thu  3 Oct 2024 (NZDT)

Drawing n_rect 1, n_rect 2 to it's right,
then click in n_rect 1,get
dump_objects -- nr_closest --
1 (n_rect 1) [59, 49, 298, 220] "<1>" 0 0 0
2 (text 2) [62, 52] "<1>" 1 0 0
3 (n_rect 3) [342, 52, 551, 224] "<2>" 0 0 0
4 (text 4) [342, 52] "<2>" 3 0 0
- - dump - -
draw_n_rects, self x0,y0 342/52

nr_b1_click(110,189): closest returned item (1,), obj <Key 1, Object NRXXX: coords [342, 52, 551, 224], Text ><2><, Type n_rect, I_coords [59, 49, 298, 220], i_text <1>, parent_id 0 v1 0, v2 0>

click >1< b1<<<<<<<<<<<<
Clicked near n_rect 3, text_id 4
draw_n_rects, self x0,y0 342/52
- - nr_b1_click() 110,189 obj <Key 1, Object NRXXX: coords [342, 52, 551, 224], Text ><2><, 
                  testing against n_rect 3, not n_rect 1 ?????

1750, Fri  4 Oct 2024 (NZDT)

Decided that we need a new 'class n_rect' in draw_n_rects_class.py,
rather than what we had in new_n_rect(), i.e. just using self. vaiables !!
Promising, but more work to do to get that working!

1525, Sat  5 Oct (NZDT)

Saved draw_n_rects_class_1524.py
  This can draw a rectangle, than b1_click draws a text <0>
    (or maybe < > with 0 and 1)
  but then dragging does nothing, sigh :-(
    current_object.ao_bj  is digit 4, so it has no bbox

1705, ditto

Now we can draw 2 n_n_rects, and move eiher of them,
  even after drawing a third n_rect :-)
Hmm, an n_rects text is drawn at a lower layer than it's rectangle,
  it should be at the same layer

Almost implemented that, but drawing three rectangles, texts aaa, bbb, ccc
  - in that order -
aaa slides underneath bbb and ccc,
bbb slides over aaa, but under ccc
ccc slides over both aaa and bbb
>>> somehow the n_rects have been drawn at different layers !!!

Added l_nbr parameter to dtc.restore_object (between t_text and parent_id)
Now n_rect texts are drawn at layer2 (same as their rectangle),
so they overlap each other nicely.  As well, Text mode works properly.

Alas, Header mode doesn't work properly now
  First click gets the bottom line and colnbrs, but it also gets row 2 draw ???

1437, Sun  6 Oct 2024 (NZDT)

python3 rfc-draw.py save-h1r1.rdd  gets header and col_nbrs drawn properly,
but python3 rfc-draw.py gets 2 rows (as seen yesterday)

Header mode: new_drawing now draws header with col_nbrs in row 1.
  and h1r2.rdd loads and displays properly (it has col_nbrs as a field)

github: update files newer than 24 Sep 24, i.e.
rdd_globals.py
rfc-draw.py
rdd_to_ascii.py
rfc_draw_globals_class.py
draw_n_rects_class.py
draw_texts_class.py
draw_headers_class.py

  git add program   to local repo
  git rm program    from local repo
  git commit -m "message"
  git push origin main  # update remote repo
      >> copy username, password from pwsafe [github token]

